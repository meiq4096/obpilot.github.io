<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>OB 开源团队招聘需求</title>
    <url>/posts/30744/</url>
    <content><![CDATA[<h2 id="OceanBase-简介"><a href="#OceanBase-简介" class="headerlink" title="OceanBase 简介"></a>OceanBase 简介</h2><p>OceanBase 是阿里巴巴和蚂蚁金服完全自主研发的通用的<strong>分布式关系型数据库</strong>，从2010年第一版本研发上线，至今已有11年。版本也从 0.3 发展到 3.2。</p>
<span id="more"></span>

<p>OceanBase 从 2020年6月1日起，从支付宝内独立出来为全资子公司，公司业务主要是面向国内外分布式关系型数据库市场。目前客户主要分布是大型金融机构（银行、保险、证券等）、运营商、国企等。OceanBase 的目标是全行业，场景特点是 OLTP + ROLAP 业务。</p>
<p>OceanBase 在 2021年6月1日，再次开源。目前开源团队组建中，急需 DBA布道师、开发者运营人员、数据库工具开发者、内核开发者（C/C++)。</p>
<p>欢迎感兴趣的朋友自荐或推荐。OceanBase 跟其他开源数据库的显著区别之一是 OceanBase 先有企业版和企业客户案例，然后才有开源版本，并面向中小企业和个人用户。</p>
<h2 id="OceanBase-资源"><a href="#OceanBase-资源" class="headerlink" title="OceanBase 资源"></a>OceanBase 资源</h2><ul>
<li>OB 官网： <code>open.oceanbase.com</code></li>
<li>OB 开源地址：<code>github.com/oceanbase</code></li>
<li>OB 官方威信公众号：<code>OceanBase</code></li>
<li>OB 开源钉钉群：钉钉搜索：<code>33254054</code> 。</li>
<li>OB 开源微信群：请先微信加我（<code>obpilot4096</code>），然后拉您进群。</li>
<li>简历投递方式：可以在职位外网链接直接投递，或者联系我微信（<code>obpilot4096</code>），或者邮件（<code>qing.meiq#alibaba-inc.com</code>)(请改<code>#</code>为<code>@</code>)</li>
</ul>
<h2 id="OceanBase-开源团队岗位"><a href="#OceanBase-开源团队岗位" class="headerlink" title="OceanBase 开源团队岗位"></a>OceanBase 开源团队岗位</h2><p>下面职位要求供参考。关键点是：热爱数据库技术、热爱分享、乐于沟通。有些技术要求可以适当放宽。欢迎联系我。</p>
<h3 id="蚂蚁集团-OceanBase开源布道师-上海-北京-杭州-深圳"><a href="#蚂蚁集团-OceanBase开源布道师-上海-北京-杭州-深圳" class="headerlink" title="蚂蚁集团-OceanBase开源布道师-上海/北京/杭州/深圳"></a>蚂蚁集团-OceanBase开源布道师-上海/北京/杭州/深圳</h3><ul>
<li>职位地址：<code>https://talent.alibaba.com/off-campus-position/736002?trace=qrcode_share</code></li>
<li>基础信息：工作地点（北京/上海/杭州/深圳）、工作年限（3年以上）、有DBA经历、热爱分享</li>
<li>职位描述：</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1、重点负责OceanBase 开源社区技术布道工作，通过技术分享、内容和活动等形式，提升社区影响力，构建开发者和用户生态；</span><br><span class="line">2、参与 OceanBase 开源项目的技术方案规划，参与开源社区治理，开源技术生态运营，推动开源生态合作伙伴的合作；</span><br><span class="line">3、制定开源技术、社区整体运营规划，为社区发展及各项指标负责；</span><br><span class="line">4、协调外部公司或内部合作团队，落实项目的阶段性结果并实现最终目标。</span><br></pre></td></tr></table></figure>

<ul>
<li>职位要求：</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.熟练掌握MySQL、<span class="keyword">Oracle等一种主流数据库体系架构及运行机制，了解主流的分布式数据库（Spanner/Cassandra等），对各数据库优劣和适用场景有深入的理解，能根据具体场景进行数据库选型和模型设计. </span>多年DBA经验者优先；</span><br><span class="line"><span class="number">2</span>.熟练掌握ACID、范式设计、索引设计等关系数据库基础理论知识，熟悉<span class="number">2</span>pc、paxos、<span class="keyword">base、cap等分布式数据库基础理论知识. </span>曾任数据库内核研发或测试或产品经理优先.；</span><br><span class="line"><span class="number">3</span>.大学本科及以上学历，熟悉开源文化及社区运作模式，对开源有热情，在开源相关领域有一定的行业影响力优先.；</span><br><span class="line"><span class="number">4</span>.具备良好的学习能力，积极进取的心态，文字写作能力，以及演讲沟通能力，英语水平满足工作交流。</span><br></pre></td></tr></table></figure>

<h3 id="蚂蚁集团-OceanBase开源开发者运营-杭州"><a href="#蚂蚁集团-OceanBase开源开发者运营-杭州" class="headerlink" title="蚂蚁集团-OceanBase开源开发者运营-杭州"></a>蚂蚁集团-OceanBase开源开发者运营-杭州</h3><ul>
<li>职位地址：<code>https://talent.alibaba.com/off-campus-position/694827?trace=qrcode_share</code></li>
<li>基础信息：工作地点（北京/杭州）、工作年限（2年以上）、学历（本科以上）</li>
<li>职位描述：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 规划和产出 OceanBase 的技术内容体系，让优质内容得以被体系化呈现；</span><br><span class="line"><span class="bullet">2.</span> OceanBase 的技术传播体系的构建和运营，并完成技术内容的传播，为传播效果负责；</span><br><span class="line"><span class="bullet">3.</span> OceanBase 开发者社群运营，围绕开发者设计有参与感的社群活动，并拿到业务结果；</span><br><span class="line"><span class="bullet">4.</span> 根据团队情况和技术热点，策划技术传播的热点事件。</span><br></pre></td></tr></table></figure>

<ul>
<li>职位要求：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 对技术有一定的理解， 能与技术团队高效合作，并能与开发者共情；</span><br><span class="line"><span class="bullet">2.</span> 对短视频等新兴内容形式有“网感”，能创意的组织内容结构；</span><br><span class="line"><span class="bullet">3.</span> 乐观、思维活跃，学习能力强，能快速吸收新的玩法；</span><br><span class="line"><span class="bullet">4.</span> 抗压能力强，有主人翁意识，有破局韧性；</span><br><span class="line"><span class="bullet">5.</span> 有较好的英文表达、书写能力。</span><br></pre></td></tr></table></figure>

<h3 id="蚂蚁集团-OceanBase开源生态工具研发-java-go-python-北京-杭州-上海-深圳"><a href="#蚂蚁集团-OceanBase开源生态工具研发-java-go-python-北京-杭州-上海-深圳" class="headerlink" title="蚂蚁集团-OceanBase开源生态工具研发 java/go/python-北京/杭州/上海/深圳"></a>蚂蚁集团-OceanBase开源生态工具研发 java/go/python-北京/杭州/上海/深圳</h3><ul>
<li>职位地址：<code>https://talent.alibaba.com/off-campus-position/705161?trace=qrcode_share</code></li>
<li>基础信息：工作地点（北京/上海/杭州/深圳）、工作年限（2年以上）、学历（本科以上）</li>
<li>职位描述：</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">参与开源生态的研发</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 负责数据库同步系统的研发, 底层使用类似于流计算框架来支撑数据库之间的集数据迁移、订阅及实时同步功能于一体. 可参考 `https:<span class="regexp">//</span>www.oceanbase.com<span class="regexp">/product/</span>oms` 。</span><br><span class="line"><span class="number">2</span>. 负责数据库备份工具, 可以为OceanBase提供强有力的保护，包括本地数据中心、其他云厂商、公共云及混合云。</span><br><span class="line"><span class="number">3</span>. 负责数据库运维管控平台, 实现OceanBase管控平台的研发, 管理和部署OceanBse, 接入k8s, `https:<span class="regexp">//</span>www.oceanbase.com<span class="regexp">/product/</span>ocp`</span><br><span class="line"><span class="number">4</span>. 负责数据库诊断工具的研发, 帮助快速定位OceanBase 问题, 尤其是对OceanBase监控系统。</span><br><span class="line"><span class="number">5</span>. 负责数据库客户端驱动, 实现类似go 驱动, 对接navicate, kettle, hue 等工具。</span><br></pre></td></tr></table></figure>

<ul>
<li>职位要求：</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.熟练掌握ACID、范式设计、索引设计等关系数据库基础理论知识，熟悉<span class="number">2</span>pc、paxos、base、cap等分布式数据库基础理论知识。</span><br><span class="line"><span class="number">2</span>.熟练掌握MySQL、Oracle等一种主流数据库体系架构及运行机制，了解主流的分布式数据库（Spanner/Cassandra等），对各数据库优劣和适用场景有深入的理解，能根据具体场景进行数据库选型和模型设计。</span><br><span class="line"><span class="number">3</span>.熟悉Linux<span class="regexp">/Unix操作系统，熟练掌握C++/</span>Java<span class="regexp">/Python/</span>Perl/Golang等语言中的一种，可以通过编写程序解决工作中遇到的问题，具备良好的编程风格，有高并发系统经验者优先。</span><br><span class="line"><span class="number">4</span>.熟练掌握数据库性能优化技巧，能够定位全链路上的性能瓶颈（网络、CPU、IO、操作系统等），并解决问题。</span><br><span class="line"><span class="number">5</span>.对技术特别是存储技术方面有激情有追求，愿意在数据库领域持续投入青春和精力，渴望突破、勇于挑战。</span><br><span class="line"><span class="number">6</span>.良好的团队协作能力，有大局观，有较强的抗压能力和积极的心态。</span><br><span class="line"><span class="number">7</span>.良好的沟通表达能力，具备优秀的文档能力，使用文字、图示清楚地表达架构意图，能够熟练编写各类技术文档。</span><br><span class="line"><span class="number">8</span>.具有 Hadoop<span class="regexp">/spark/</span>Flink<span class="regexp">/storm/</span>elastic search<span class="regexp">/Kafka等分布式计算系统开发/</span>运维经验者优。</span><br></pre></td></tr></table></figure>

<h3 id="蚂蚁集团-OceanBase开源内核研发-杭州-北京-上海-深圳"><a href="#蚂蚁集团-OceanBase开源内核研发-杭州-北京-上海-深圳" class="headerlink" title="蚂蚁集团-OceanBase开源内核研发-杭州/北京/上海/深圳"></a>蚂蚁集团-OceanBase开源内核研发-杭州/北京/上海/深圳</h3><ul>
<li>职位地址：<code>https://talent.alibaba.com/off-campus-position/705161?trace=qrcode_share</code></li>
<li>基础信息：工作地点（北京/上海/杭州/深圳）、工作年限（2年以上）、学历（本科以上）</li>
<li>职位描述：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 参与 OceanBase数据库内核模块研发, 参与OceanBase SQL模块的研发工作， 或者分布式数据库OceanBase内核存储引擎研发 。</span><br><span class="line"><span class="bullet">2.</span> SQL 引擎则打造全面支持HTAP场景的新一代SQL引擎，包括但不限于查询优化、向量化执行引擎、分布式执行。</span><br><span class="line"><span class="bullet">3.</span> MySQL/Oracle 兼容性等方面的开发工作与性能调优, 存储引擎则重点解决性能优化, 尤其是单机性能优化, 新索引技术, 抽象存储介质层, 存储引擎接口层封装等任务的开发和研究。</span><br></pre></td></tr></table></figure>

<ul>
<li>职位要求：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 至少熟悉Java/C++/Python/Go语言的一种或多种，有不错的编程实战能力和调试能力。</span><br><span class="line"><span class="bullet">2.</span> 熟练掌握多线程等高并发系统编程和优化技能；熟悉分布式系统的设计和应用，熟悉分布式、缓存、消息等机制；能对分布式常用技术进行合理应用，解决问题。</span><br><span class="line"><span class="bullet">3.</span> 加分项：有SQL执行引擎、优化器、分布式执行引擎等相关项目经验者优先。</span><br><span class="line"><span class="bullet">4.</span> 加分项：有数据库研发内核经验者优先。</span><br><span class="line"><span class="bullet">5.</span> 加分项: 有大型分布式系统内核研发经验者优先。</span><br><span class="line"><span class="bullet">6.</span> 加分项: 有dba 经验或数据库运维经验 者优先。</span><br><span class="line"><span class="bullet">7.</span> 加分项: 有云计算平台研发经验者优先。</span><br><span class="line"><span class="bullet">8.</span> 快速学习能力，较强的团队沟通和协作能力，较强的自我驱动能力。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>招聘</category>
      </categories>
      <tags>
        <tag>招聘</tag>
      </tags>
  </entry>
  <entry>
    <title>DB2 迁移 OceanBase 实践总结</title>
    <url>/posts/55457/</url>
    <content><![CDATA[<p>IBM DB2 是美国IBM公司开发的一套关系型数据库管理系统，它主要的运行环境为UNIX（包括IBM自家的AIX）、Linux、IBM i（旧称OS/400）、z/OS，以及Windows服务器版本。其中 LINUX、UNIX 和Windows 平台又简称 LUW 开放平台。客户包含 省农信、农商行 以及一些中字头金融机构。</p>
<span id="more"></span>

<p>目前业界应该没有哪家国产数据库号称兼容 DB2， 所以 “去 DB2” ，业务的改造是不可避免的。业界数据库能力最接近 DB2 的是 ORACLE 数据库，而 OceanBase 又同时兼容 ORACLE 和 MySQL。所以 DB2 迁移到 OceanBase ，最佳选择是选择 ORACLE 租户类型。个别客户为了去 DB2 后不再被数据库厂商标准绑定，会选择 OceanBase的 MySQL 租户。<br>本文主要是总结 DB2 迁移到 OceanBase ORACLE 租户的经验。</p>
<p>首先要评估 DB2 的表结构在 OB(ORACLE) 上的兼容性。</p>
<h2 id="表结构转换"><a href="#表结构转换" class="headerlink" title="表结构转换"></a>表结构转换</h2><p>DB2 跟 OB(ORACLE) 的数据类型差异还是比较大，下面仅就常用的类型的典型差异举例说明。</p>
<h3 id="自增列类型"><a href="#自增列类型" class="headerlink" title="自增列类型"></a>自增列类型</h3><p>DB2 的 SQL 语法，在 OB(ORACLE) 里都可以找到对应的实现，但不完全一样。<br>DB2 的自增列（<code>IDENTITY</code>）语法 OB 3.2 版本开始支持。在那之前，需要应用使用 SEQUENCE 给列填充值。</p>
<ul>
<li>DB2 示例：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t4 ( ID <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> GENERATED <span class="keyword">BY</span> <span class="keyword">DEFAULT</span> <span class="keyword">AS</span> <span class="keyword">IDENTITY</span> (MAXVALUE <span class="number">9223372036854775807</span>), C1 <span class="type">VARCHAR</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> )  ;</span><br></pre></td></tr></table></figure>

<ul>
<li>ORACLE 示例：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t4 (ID NUMBER GENERATED ALWAYS <span class="keyword">AS</span> <span class="keyword">IDENTITY</span> MINVALUE <span class="number">1</span> MAXVALUE <span class="number">9223372036854775807</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, C1 VARCHAR2(<span class="number">50</span>) );</span><br></pre></td></tr></table></figure>

<p>二者写法 <code>NOT NULL</code> 的位置不同。</p>
<h3 id="DB2-的-DATE-TIME-跟-OB-ORACLE-的-DATE-差异问题"><a href="#DB2-的-DATE-TIME-跟-OB-ORACLE-的-DATE-差异问题" class="headerlink" title="DB2 的 DATE / TIME 跟 OB(ORACLE) 的 DATE 差异问题"></a>DB2 的 DATE / TIME 跟 OB(ORACLE) 的 DATE 差异问题</h3><p>默认情况下（指 DB2 不开启 ORACLE 兼容模式），DB2 的 DATE 只包含日期，TIME 只包含时间。而 OB(ORACLE) 的 DATE 包含日期和时间。</p>
<p>DB2: </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">TABLE</span> t1</span><br><span class="line">DB20000I  The <span class="keyword">SQL</span> command completed successfully.</span><br><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1(id <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY ,c1 <span class="type">date</span> , c2 <span class="type">time</span>, c3 <span class="type">timestamp</span>)</span><br><span class="line">DB20000I  The <span class="keyword">SQL</span> command completed successfully.</span><br><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">values</span>(<span class="number">1</span>, sysdate,sysdate,<span class="built_in">current_timestamp</span> )</span><br><span class="line">DB20000I  The <span class="keyword">SQL</span> command completed successfully.</span><br><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1</span><br><span class="line"></span><br><span class="line">ID                   C1         C2       C3</span><br><span class="line"><span class="comment">-------------------- ---------- -------- --------------------------</span></span><br><span class="line">                   <span class="number">1</span> <span class="number">08</span><span class="operator">/</span><span class="number">14</span><span class="operator">/</span><span class="number">2021</span> <span class="number">05</span>:<span class="number">29</span>:<span class="number">55</span> <span class="number">2021</span><span class="number">-08</span><span class="number">-14</span><span class="number">-05.29</span><span class="number">.55</span><span class="number">.343157</span></span><br><span class="line"></span><br><span class="line">  <span class="number">1</span> record(s) selected.</span><br><span class="line"></span><br><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>OB(ORACLE):</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">TABLE</span> t1;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1(id number <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY ,c1 <span class="type">date</span> , c3 <span class="type">timestamp</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.04</span> sec)</span><br><span class="line"></span><br><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">values</span>(<span class="number">1</span>, sysdate,<span class="built_in">current_timestamp</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+----------------------------+</span></span><br><span class="line"><span class="operator">|</span> ID <span class="operator">|</span> C1                  <span class="operator">|</span> C3                         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+----------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="number">2021</span><span class="number">-08</span><span class="number">-14</span> <span class="number">13</span>:<span class="number">28</span>:<span class="number">15</span> <span class="operator">|</span> <span class="number">2021</span><span class="number">-08</span><span class="number">-14</span> <span class="number">13</span>:<span class="number">28</span>:<span class="number">15.177911</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+----------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<h3 id="字符集问题"><a href="#字符集问题" class="headerlink" title="字符集问题"></a>字符集问题</h3><p>如果 DB2 字符集已经是 UTF-8 ，那可以直接转换为 OB(ORACLE) 的 UTF8MB4 。UTF8MB4 是 UTF8 的超集，多一些表情字符。</p>
<p>如果 DB2 字符集不是 UTF-8 ，也建议转换为 OB(ORACLE) 的 UTF8MB4，相关字符串字段长度需要在 OB(ORACLE) 里放大。如果是单向同步，这个没问题。如果还要考虑 OB(ORACLE) 数据回流到 DB2，可能会出现实际字符串数据超长问题。</p>
<p>查看 DB2 数据库字符集方法： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[db2inst1@9a9fd42bf525 ~]$ db2 get db cfg <span class="keyword">for</span> testdb |grep -i code</span><br><span class="line"> Database code page                                      = 1208</span><br><span class="line"> Database code <span class="built_in">set</span>                                       = utf-8</span><br><span class="line"> Database country/region code                            = 1</span><br><span class="line"> [db2inst1@a32408ac626d ~]$ db2 get db cfg <span class="keyword">for</span> testdb|grep -i national</span><br><span class="line"> National character string mapping       (NCHAR_MAPPING) = CHAR_CU32</span><br></pre></td></tr></table></figure>
<p> 查看 OB(ORACLE) 租户字符集方法<br> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> MySQL [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%character%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> VARIABLE_NAME            <span class="operator">|</span> <span class="keyword">VALUE</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> character_set_client     <span class="operator">|</span> utf8mb4   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_connection <span class="operator">|</span> utf8mb4   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_filesystem <span class="operator">|</span> <span class="type">binary</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_results    <span class="operator">|</span> utf8mb4   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_system     <span class="operator">|</span> utf8mb4   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> nls_characterset         <span class="operator">|</span> AL32UTF8  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> nls_nchar_characterset   <span class="operator">|</span> AL16UTF16 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> nls_numeric_characters   <span class="operator">|</span> .,        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-----------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.003</span> sec)</span><br></pre></td></tr></table></figure></p>
<p>OB(ORACLE) 的参数 <code>nls_characterset</code> 定义了数据库的字符集，通常是 <code>AL32UTF8</code>，每个中文字符字长为 3 个字节。 同时 <code>nls_nchar_characterset</code> 定义了 Unicode字符串使用的字符集，每个中文字符字长 2 个字节。</p>
<h3 id="字符串长度问题"><a href="#字符串长度问题" class="headerlink" title="字符串长度问题"></a>字符串长度问题</h3><p>DB2 和 ORACLE 都有参数定义一个 字符存储时对应多少字节。这个会影响一个列里最多能存储几个中文字符。</p>
<ul>
<li>DB2 查看字长单位方法</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[db2inst1@8d6dd8adcacf ~]$ db2 get db cfg <span class="keyword">for</span> testdb |grep -i string</span><br><span class="line"> Default string units                     (STRING_UNITS) = SYSTEM</span><br><span class="line"> National character string mapping       (NCHAR_MAPPING) = CHAR_CU32</span><br></pre></td></tr></table></figure>

<p>当字符集是 <code>Unicode</code> 时，</p>
<ul>
<li>如果 <code>STRING_UNITS</code> 值为 <code>SYSTEM</code> ，则 CHAR, VARCHAR, and CLOB 类型的长度在不指定 <code>CODEUNITS32</code> 时，会默认为是 <code>OCTETS</code> 。</li>
<li>如果 <code>STRING_UNITS</code> 值为 <code>CODEUNITS32</code> 时，则默认长度是 <code>CODEUNITS32</code>。</li>
</ul>
<p>字符串长度单位说明： </p>
<ul>
<li><code>OCTETS</code> : 使用字节作为字符的单位。</li>
<li><code>CODEUNITS16</code>：使用 <code>UTF-16</code> 编码作为字符的单位，长度为 2 个 字节。</li>
<li><code>CODEUNITS32</code>：使用 <code>UTF-32</code> 编码作为字符的单位，长度为 4 个字节。</li>
</ul>
<p><code>NCHAR_MAPPING</code> 取值为 <code>CHAR_CU32</code> 时，<code>NCHAR</code> 、<code>NVARCHAR</code> 和 <code>NCLOB</code> 列字符默认单位是 <code>CODEUNITS32</code> 。</p>
<ul>
<li>OB(ORACLE) 查看字长单位方法。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;%nls_length_semantics%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> VARIABLE_NAME        <span class="operator">|</span> <span class="keyword">VALUE</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> nls_length_semantics <span class="operator">|</span> BYTE  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>参数 <code>nls_length_semantics</code> 是在租户下设置，只影响当前租户。取值有两种：</p>
<ul>
<li><code>BYTE</code> : 使用字节作为字符的单位。</li>
<li><code>CHAR</code> : 使用字符作为单位。每个字符多少个字节跟字符集设置有关。字符集是 <code>UTF-8</code>的时候，每个中文字符 3 个字节。</li>
</ul>
<p>下面的示例方便具体理解 DB2 跟 OB(ORACLE) 的字符长度差异。</p>
<ul>
<li>DB2 字符长度示例</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">TABLE</span> t2;</span><br><span class="line">DB20000I  The <span class="keyword">SQL</span> command completed successfully.</span><br><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t2(id <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY, c1 <span class="type">char</span>(<span class="number">50</span>), c2 <span class="type">varchar</span>(<span class="number">50</span>), c3 <span class="type">nchar</span>(<span class="number">50</span>), c4 nvarchar(<span class="number">50</span>));</span><br><span class="line">DB20000I  The <span class="keyword">SQL</span> command completed successfully.</span><br><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t2 <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;中&#x27;</span>,<span class="string">&#x27;中&#x27;</span>,<span class="string">&#x27;中&#x27;</span>,<span class="string">&#x27;中&#x27;</span>);</span><br><span class="line">DB20000I  The <span class="keyword">SQL</span> command completed successfully.</span><br><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t2 <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>);</span><br><span class="line">DB20000I  The <span class="keyword">SQL</span> command completed successfully.</span><br><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> id, c1, length(c1) c1_length,lengthb(c1) c1_lengthb,c2,length(c2) c2_length,lengthb(c2) c2_lengthb, c3, length(c3) c3_length, lengthb(c3) c3_lengthb,c4, length(c4) c4_length,lengthb(c4) c4_lengthb <span class="keyword">FROM</span> t2;</span><br><span class="line"></span><br><span class="line">ID                   C1                                                 C1_LENGTH   C1_LENGTHB  C2                                                 C2_LENGTH   C2_LENGTHB  C3                                                                                                   C3_LENGTH   C3_LENGTHB  C4                                                                                                   C4_LENGTH   C4_LENGTHB</span><br><span class="line"><span class="comment">-------------------- -------------------------------------------------- ----------- ----------- -------------------------------------------------- ----------- ----------- ---------------------------------------------------------------------------------------------------- ----------- ----------- ---------------------------------------------------------------------------------------------------- ----------- -----------</span></span><br><span class="line">                   <span class="number">1</span> 中                                                         <span class="number">50</span>          <span class="number">50</span> 中                                                          <span class="number">6</span>           <span class="number">6</span> 中                                                                                                           <span class="number">50</span>          <span class="number">53</span> 中                                                                                                            <span class="number">3</span>           <span class="number">6</span></span><br><span class="line">                   <span class="number">2</span> 中国                                                      <span class="number">50</span>          <span class="number">50</span> 中国                                                      <span class="number">12</span>          <span class="number">12</span> 中国                                                                                                        <span class="number">50</span>          <span class="number">56</span> 中国                                                                                                         <span class="number">6</span>          <span class="number">12</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2</span> record(s) selected.</span><br></pre></td></tr></table></figure>
<p>  <img src="/images/16289205000178.jpg"></p>
<ul>
<li>ORACLE 字符长度示例</li>
</ul>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  obclient<span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">TABLE</span> t2;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t2(id number <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY, c1 <span class="type">char</span>(<span class="number">50</span>), c2 varchar2(<span class="number">50</span>), c3 <span class="type">nchar</span>(<span class="number">50</span>), c4 nvarchar2(<span class="number">50</span>));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t2 <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;中&#x27;</span>,<span class="string">&#x27;中&#x27;</span>,<span class="string">&#x27;中&#x27;</span>,<span class="string">&#x27;中&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t2 <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">SELECT</span> id, c1, length(c1) c1_length,lengthb(c1) c1_lengthb,c2,length(c2) c2_length,lengthb(c2) c2_lengthb, c3, length(c3) c3_length, lengthb(c3) c3_lengthb,c4, length(c4) c4_length,lengthb(c4) c4_lengthb <span class="keyword">FROM</span> t2;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------------------------------------------------+-----------+------------+--------+-----------+------------+--------------------------------------------------------+-----------+------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> ID <span class="operator">|</span> C1                                                 <span class="operator">|</span> C1_LENGTH <span class="operator">|</span> C1_LENGTHB <span class="operator">|</span> C2     <span class="operator">|</span> C2_LENGTH <span class="operator">|</span> C2_LENGTHB <span class="operator">|</span> C3                                                     <span class="operator">|</span> C3_LENGTH <span class="operator">|</span> C3_LENGTHB <span class="operator">|</span> C4     <span class="operator">|</span> C4_LENGTH <span class="operator">|</span> C4_LENGTHB <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------------------------------------------------+-----------+------------+--------+-----------+------------+--------------------------------------------------------+-----------+------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 中                                                 <span class="operator">|</span>        <span class="number">48</span> <span class="operator">|</span>         <span class="number">50</span> <span class="operator">|</span> 中     <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span> 中                                                     <span class="operator">|</span>        <span class="number">50</span> <span class="operator">|</span>        <span class="number">100</span> <span class="operator">|</span>  中     <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 中国                                               <span class="operator">|</span>        <span class="number">46</span> <span class="operator">|</span>         <span class="number">50</span> <span class="operator">|</span> 中国   <span class="operator">|</span>         <span class="number">2</span> <span class="operator">|</span>          <span class="number">6</span> <span class="operator">|</span> 中国                                                   <span class="operator">|</span>        <span class="number">50</span> <span class="operator">|</span>        <span class="number">100</span> <span class="operator">|</span>  中国   <span class="operator">|</span>         <span class="number">2</span> <span class="operator">|</span>          <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------------------------------------------------+-----------+------------+--------+-----------+------------+--------------------------------------------------------+-----------+------------+--------+-----------+------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
<p>  <img src="/images/16289206656037.jpg"></p>
<h3 id="非空与空值问题"><a href="#非空与空值问题" class="headerlink" title="非空与空值问题"></a>非空与空值问题</h3><p>在 DB2 里，空值 跟 <code>NULL</code> 是两个值，并不相等。但是在 OB(ORACLE) 里，空值就是 <code>NULL</code> 。<br>针对是否是 <code>NULL</code> 只能用 <code>IS NULL</code> 或者 <code>IS NOT NULL</code> 判断，而不能用等值符号判断。在 DB2 里针对是否是空值，是用等值符号判断。<br>所以，DB2 的应用如果定义了很多 <code>NOT NULL</code> 列，但实际又允许写入空值，这个应用迁移到 OB(ORACLE) 是会报错的。解决办法只能是拿掉 OB(ORACLE) 列的 <code>NOT NULL</code> 属性。</p>
<ul>
<li>DB2 示例</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">TABLE</span> t3;</span><br><span class="line">DB20000I  The <span class="keyword">SQL</span> command completed successfully.</span><br><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t3(id <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY, c1 <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> , c2 <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NULL</span> );</span><br><span class="line">DB20000I  The <span class="keyword">SQL</span> command completed successfully.</span><br><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t3 <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">DB20000I  The <span class="keyword">SQL</span> command completed successfully.</span><br><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t3 <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">DB20000I  The <span class="keyword">SQL</span> command completed successfully.</span><br><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> id, c1, hex(c1), c2, hex(c2) <span class="keyword">FROM</span> t3 ;</span><br><span class="line"></span><br><span class="line">ID                   C1                                                 <span class="number">3</span>                                                                                                    C2                                                 <span class="number">5</span></span><br><span class="line"><span class="comment">-------------------- -------------------------------------------------- ---------------------------------------------------------------------------------------------------- -------------------------------------------------- ----------------------------------------------------------------------------------------------------</span></span><br><span class="line">                   <span class="number">1</span></span><br><span class="line">                   <span class="number">2</span>                                                    <span class="number">20</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2</span> record(s) selected.</span><br><span class="line"></span><br><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> id, c1, hex(c1), c2, hex(c2) <span class="keyword">FROM</span> t3 <span class="keyword">WHERE</span> c1 <span class="keyword">IS</span> <span class="keyword">NULL</span> ;</span><br><span class="line"></span><br><span class="line">ID                   C1                                                 <span class="number">3</span>                                                                                                    C2                                                 <span class="number">5</span></span><br><span class="line"><span class="comment">-------------------- -------------------------------------------------- ---------------------------------------------------------------------------------------------------- -------------------------------------------------- ----------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="number">0</span> record(s) selected.</span><br><span class="line"></span><br><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> id, c1, hex(c1), c2, hex(c2) <span class="keyword">FROM</span> t3 <span class="keyword">WHERE</span> c1 <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">ID                   C1                                                 <span class="number">3</span>                                                                                                    C2                                                 <span class="number">5</span></span><br><span class="line"><span class="comment">-------------------- -------------------------------------------------- ---------------------------------------------------------------------------------------------------- -------------------------------------------------- ----------------------------------------------------------------------------------------------------</span></span><br><span class="line">                   <span class="number">1</span></span><br><span class="line">                   <span class="number">2</span>                                                    <span class="number">20</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2</span> record(s) selected.</span><br><span class="line"></span><br><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ORACLE 示例</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">TABLE</span> t3;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t3(id number <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY, c1 varchar2(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> , c2 varchar2(<span class="number">50</span>) <span class="keyword">NULL</span> );</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t3 <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">ORA<span class="number">-01400</span>: cannot <span class="keyword">insert</span> <span class="keyword">NULL</span> <span class="keyword">into</span> <span class="string">&#x27;(C1)&#x27;</span></span><br><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t3 <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">SELECT</span> id, c1, dump(c1), c2, dump(c2,<span class="number">16</span>) <span class="keyword">FROM</span> t3 ;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----+------------------+------+-------------+</span></span><br><span class="line"><span class="operator">|</span> ID <span class="operator">|</span> C1 <span class="operator">|</span> DUMP(C1)         <span class="operator">|</span> C2   <span class="operator">|</span> DUMP(C2,<span class="number">16</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----+------------------+------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span>    <span class="operator">|</span> Typ<span class="operator">=</span><span class="number">22</span> Len<span class="operator">=</span><span class="number">1</span>: <span class="number">32</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----+------------------+------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">SELECT</span> id, c1, dump(c1), c2, dump(c2,<span class="number">16</span>) <span class="keyword">FROM</span> t3 <span class="keyword">WHERE</span> c1 <span class="keyword">IS</span> <span class="keyword">NULL</span> ;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">SELECT</span> id, c1, dump(c1), c2, dump(c2,<span class="number">16</span>) <span class="keyword">FROM</span> t3 <span class="keyword">WHERE</span> c1 <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">SELECT</span> id, c1, dump(c1), c2, dump(c2,<span class="number">16</span>) <span class="keyword">FROM</span> t3 <span class="keyword">WHERE</span> c1 <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----+------------------+------+-------------+</span></span><br><span class="line"><span class="operator">|</span> ID <span class="operator">|</span> C1 <span class="operator">|</span> DUMP(C1)         <span class="operator">|</span> C2   <span class="operator">|</span> DUMP(C2,<span class="number">16</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----+------------------+------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span>    <span class="operator">|</span> Typ<span class="operator">=</span><span class="number">22</span> Len<span class="operator">=</span><span class="number">1</span>: <span class="number">32</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----+------------------+------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">obclient<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="范围分区表分区边界问题"><a href="#范围分区表分区边界问题" class="headerlink" title="范围分区表分区边界问题"></a>范围分区表分区边界问题</h3><p>DB2 的范围分区表语法 跟 OB(ORACLE) 语法在指定分区的范围时语法完全不一样。除此之外，边界值也有不同逻辑。<br>DB2 的 RANGE 分区在定义分区边界时，可以通过在 起始值 和 结束值后面带上选项 <code>INCLUSIVE</code> 或 <code>EXCLUSIVE</code> ，以表示是否包含边界值。不指定的时候就是默认为 <code>INCLUSIVE</code>（包含边界值）。OB(ORACLE) 没有这个语法，默认分区范围就是不包含边界值，且只能指定上限，不能执行下限。<br>所以，DB2 的分区表分区范围不要使用 <code>INCLUSIVE</code> 选项，要明确指定 <code>EXCLUSIVE</code> 选项；否则，转换为 OB(ORACLE) 的时候要调整分区范围的起始值和结束值。</p>
<ul>
<li>DB2 示例</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[db2inst1<span class="variable">@8d6dd8adcacf</span> <span class="operator">~</span>]$ db2 &quot;DROP TABLE t6;&quot;</span><br><span class="line">DB20000I  The <span class="keyword">SQL</span> command completed successfully.</span><br><span class="line">[db2inst1<span class="variable">@a32408ac626d</span> <span class="operator">~</span>]$ db2 &quot;CREATE TABLE t6(</span><br><span class="line">&gt; id bigint NOT NULL,</span><br><span class="line">&gt; c1 varchar(50),</span><br><span class="line">&gt; c2 timestamp NOT NULL ,</span><br><span class="line">&gt; PRIMARY KEY (id)</span><br><span class="line">&gt; ) PARTITION BY RANGE(c2)</span><br><span class="line">&gt; ( PARTITION P1 STARTING &#x27;1/1/2020&#x27; ENDING &#x27;1/31/2020&#x27; INCLUSIVE ,</span><br><span class="line">&gt; PARTITION P2 STARTING &#x27;2/1/2020&#x27; ENDING &#x27;2/28/2020&#x27; INCLUSIVE ,</span><br><span class="line">&gt; PARTITION P3 STARTING &#x27;3/1/2020&#x27; ENDING &#x27;3/31/2020&#x27; INCLUSIVE ,</span><br><span class="line">&gt; PARTITION P4 STARTING &#x27;4/1/2020&#x27; ENDING &#x27;4/30/2020&#x27; INCLUSIVE ,</span><br><span class="line">&gt; PARTITION P5 STARTING &#x27;5/1/2020&#x27; ENDING &#x27;5/31/2020&#x27; INCLUSIVE</span><br><span class="line">&gt; );&quot;</span><br><span class="line">DB20000I  The <span class="keyword">SQL</span> command completed successfully.</span><br><span class="line">[db2inst1<span class="variable">@a32408ac626d</span> <span class="operator">~</span>]$ db2 &quot;INSERT INTO t6(id,c1,c2) values(1,&#x27;A&#x27;,&#x27;1/1/2020&#x27;);&quot;</span><br><span class="line">DB20000I  The <span class="keyword">SQL</span> command completed successfully.</span><br><span class="line">[db2inst1<span class="variable">@a32408ac626d</span> <span class="operator">~</span>]$ db2 &quot;INSERT INTO t6(id,c1,c2) values(2,&#x27;B&#x27;,&#x27;5/31/2020&#x27;);&quot;</span><br><span class="line">DB20000I  The <span class="keyword">SQL</span> command completed successfully.</span><br><span class="line">[db2inst1<span class="variable">@a32408ac626d</span> <span class="operator">~</span>]$ db2 &quot;INSERT INTO t6(id,c1,c2) values(3,&#x27;C&#x27;,&#x27;12/31/2019&#x27;);&quot;</span><br><span class="line">DB21034E  The command was processed <span class="keyword">as</span> an <span class="keyword">SQL</span> statement because it was <span class="keyword">not</span> a</span><br><span class="line">valid Command Line Processor command.  During <span class="keyword">SQL</span> processing it returned:</span><br><span class="line">SQL0327N  The <span class="type">row</span> cannot be inserted <span class="keyword">into</span> <span class="keyword">table</span> &quot;JXXD.T6&quot; because it <span class="keyword">is</span></span><br><span class="line">outside the bounds <span class="keyword">of</span> the defined data <span class="keyword">partition</span> ranges.  <span class="keyword">SQLSTATE</span><span class="operator">=</span><span class="number">22525</span></span><br><span class="line">[db2inst1<span class="variable">@a32408ac626d</span> <span class="operator">~</span>]$</span><br><span class="line">[db2inst1<span class="variable">@a32408ac626d</span> <span class="operator">~</span>]$ db2 &quot;SELECT * FROM t6;&quot;</span><br><span class="line"></span><br><span class="line">ID                   C1                                                 C2</span><br><span class="line"><span class="comment">-------------------- -------------------------------------------------- --------------------------</span></span><br><span class="line">                   <span class="number">1</span> A                                                  <span class="number">2020</span><span class="number">-01</span><span class="number">-01</span><span class="number">-00.00</span><span class="number">.00</span><span class="number">.000000</span></span><br><span class="line">                   <span class="number">2</span> B                                                  <span class="number">2020</span><span class="number">-05</span><span class="number">-31</span><span class="number">-00.00</span><span class="number">.00</span><span class="number">.000000</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2</span> record(s) selected.</span><br><span class="line"></span><br><span class="line">[db2inst1<span class="variable">@a32408ac626d</span> <span class="operator">~</span>]$</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>ORACLE 用法</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t6(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id number <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> c1 <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> c2 <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">PRIMARY</span> KEY (id,c2)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ) <span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span>(c2)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ( <span class="keyword">PARTITION</span> P1 <span class="keyword">VALUES</span> LESS THAN ( to_date(<span class="string">&#x27;2020/02/01&#x27;</span>,<span class="string">&#x27;YYYY/MM/DD&#x27;</span>)),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">PARTITION</span> P2 <span class="keyword">VALUES</span> LESS THAN ( to_date( <span class="string">&#x27;2020/03/01&#x27;</span>,<span class="string">&#x27;YYYY/MM/DD&#x27;</span>)),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">PARTITION</span> P3 <span class="keyword">VALUES</span> LESS THAN ( to_date( <span class="string">&#x27;2020/04/01&#x27;</span>,<span class="string">&#x27;YYYY/MM/DD&#x27;</span>)),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">PARTITION</span> P4 <span class="keyword">VALUES</span> LESS THAN ( to_date( <span class="string">&#x27;2020/05/01&#x27;</span>,<span class="string">&#x27;YYYY/MM/DD&#x27;</span>)),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">PARTITION</span> P5 <span class="keyword">VALUES</span> LESS THAN ( to_date( <span class="string">&#x27;2020/06/01&#x27;</span>,<span class="string">&#x27;YYYY/MM/DD&#x27;</span>))</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.09</span> sec)</span><br><span class="line"></span><br><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t6(id,c1,c2) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;A&#x27;</span>,to_date(<span class="string">&#x27;2020/01/01&#x27;</span>,<span class="string">&#x27;YYYY/MM/DD&#x27;</span>));</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t6(id,c1,c2) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;B&#x27;</span>,to_date(<span class="string">&#x27;2020/03/01&#x27;</span>,<span class="string">&#x27;YYYY/MM/DD&#x27;</span>));</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t6(id,c1,c2) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;C&#x27;</span>,to_date(<span class="string">&#x27;2020/06/01&#x27;</span>,<span class="string">&#x27;YYYY/MM/DD&#x27;</span>));</span><br><span class="line">ORA<span class="number">-14400</span>: inserted <span class="keyword">partition</span> key does <span class="keyword">not</span> map <span class="keyword">to</span> <span class="keyword">any</span> <span class="keyword">partition</span></span><br><span class="line">obclient<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="SQL-语法转换"><a href="#SQL-语法转换" class="headerlink" title="SQL 语法转换"></a>SQL 语法转换</h2><p>除了数据类型问题外，有些常用 SQL 写法也许要微调。</p>
<h3 id="rownumber-函数"><a href="#rownumber-函数" class="headerlink" title="rownumber 函数"></a><code>rownumber</code> 函数</h3><p>DB2 里有 <code>rownumber</code> 和 <code>row_number</code> 函数，作用一样，但是 OB(ORACLE) 只有 <code>row_number</code> 函数。如果业务使用的是 <code>rownumber</code>，那么要调整一下 SQL。</p>
<p>DB2 应用通常把 <code>rownumber</code>  和 <code>FETCH FIRST N ROWS</code> 结合使用来进行分页，在 OB(ORACLE) 3.1 版本之前，需要转换为 OB(ORACLE) 的分页方法。</p>
<ul>
<li>DB2 示例</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t5 <span class="keyword">AS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SYSIBM.TABLES ) <span class="keyword">WITH</span> DATA ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">row_number</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">ORDER</span> <span class="keyword">OF</span> t5) rn , <span class="operator">*</span> <span class="keyword">FROM</span> t5</span><br><span class="line">	<span class="keyword">ORDER</span> <span class="keyword">BY</span> table_schema, table_type </span><br><span class="line">	<span class="keyword">FETCH</span> <span class="keyword">FIRST</span> <span class="number">100</span> <span class="keyword">ROWS</span> <span class="keyword">ONLY</span> </span><br><span class="line">	<span class="keyword">WITH</span> ur </span><br><span class="line">) t </span><br><span class="line"><span class="keyword">WHERE</span> rn <span class="operator">&gt;=</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure>

<p>业务在写这类 SQL 的时候可能会不写最里面的 <code>ORDER BY </code> 语句，这样性能会快很多。但是结果集的顺序就是不确定。需要确认是否符合业务需求。</p>
<ul>
<li>OB(ORACLE) 示例</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t5 <span class="keyword">AS</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> all_objects;</span><br><span class="line">EXPLAIN EXTENDED_NOADDR </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> rownum rn, owner, object_name, object_type, created, last_ddl_time</span><br><span class="line">	<span class="keyword">FROM</span> (</span><br><span class="line">		<span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line">		<span class="keyword">FROM</span> t5</span><br><span class="line">		<span class="keyword">ORDER</span> <span class="keyword">BY</span> owner,object_name</span><br><span class="line">	) <span class="keyword">WHERE</span> rownum <span class="operator">&lt;</span> <span class="operator">=</span><span class="number">100</span></span><br><span class="line">) <span class="keyword">WHERE</span> rn <span class="operator">&gt;=</span><span class="number">90</span></span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="operator">|</span>ID<span class="operator">|</span>OPERATOR      <span class="operator">|</span>NAME <span class="operator">|</span>EST. <span class="keyword">ROWS</span><span class="operator">|</span>COST<span class="operator">|</span></span><br><span class="line"><span class="comment">----------------------------------------</span></span><br><span class="line"><span class="operator">|</span><span class="number">0</span> <span class="operator">|</span>COUNT         <span class="operator">|</span>     <span class="operator">|</span><span class="number">11</span>       <span class="operator">|</span><span class="number">1143</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="number">1</span> <span class="operator">|</span> SUBPLAN SCAN <span class="operator">|</span>VIEW1<span class="operator">|</span><span class="number">11</span>       <span class="operator">|</span><span class="number">1143</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="number">2</span> <span class="operator">|</span>  LIMIT       <span class="operator">|</span>     <span class="operator">|</span><span class="number">11</span>       <span class="operator">|</span><span class="number">1143</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="number">3</span> <span class="operator">|</span>   TOP<span class="operator">-</span>N SORT <span class="operator">|</span>     <span class="operator">|</span><span class="number">100</span>      <span class="operator">|</span><span class="number">1141</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="number">4</span> <span class="operator">|</span>    <span class="keyword">TABLE</span> SCAN<span class="operator">|</span>T5   <span class="operator">|</span><span class="number">729</span>      <span class="operator">|</span><span class="number">891</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"></span><br><span class="line">Outputs <span class="operator">&amp;</span> filters: </span><br><span class="line"><span class="comment">-------------------------------------</span></span><br><span class="line">  <span class="number">0</span> <span class="operator">-</span> output([rownum() <span class="operator">+</span> ?], [VIEW1.T5B.OWNER], [VIEW1.T5B.OBJECT_NAME], [VIEW1.T5B.SUBOBJECT_NAME], [VIEW1.T5B.OBJECT_ID], [VIEW1.T5B.DATA_OBJECT_ID], [VIEW1.T5B.OBJECT_TYPE], [VIEW1.T5B.CREATED], [VIEW1.T5B.LAST_DDL_TIME], [VIEW1.T5B.TIMESTAMP], [VIEW1.T5B.STATUS], [VIEW1.T5B.TEMPORARY], [VIEW1.T5B.GENERATED], [VIEW1.T5B.SECONDARY], [VIEW1.T5B.NAMESPACE], [VIEW1.T5B.EDITION_NAME]), <span class="keyword">filter</span>(nil)</span><br><span class="line">  <span class="number">1</span> <span class="operator">-</span> output([VIEW1.T5B.OWNER], [VIEW1.T5B.OBJECT_NAME], [VIEW1.T5B.SUBOBJECT_NAME], [VIEW1.T5B.OBJECT_ID], [VIEW1.T5B.DATA_OBJECT_ID], [VIEW1.T5B.OBJECT_TYPE], [VIEW1.T5B.CREATED], [VIEW1.T5B.LAST_DDL_TIME], [VIEW1.T5B.TIMESTAMP], [VIEW1.T5B.STATUS], [VIEW1.T5B.TEMPORARY], [VIEW1.T5B.GENERATED], [VIEW1.T5B.SECONDARY], [VIEW1.T5B.NAMESPACE], [VIEW1.T5B.EDITION_NAME]), <span class="keyword">filter</span>(nil), </span><br><span class="line">      access([VIEW1.T5B.OWNER], [VIEW1.T5B.OBJECT_NAME], [VIEW1.T5B.SUBOBJECT_NAME], [VIEW1.T5B.OBJECT_ID], [VIEW1.T5B.DATA_OBJECT_ID], [VIEW1.T5B.OBJECT_TYPE], [VIEW1.T5B.CREATED], [VIEW1.T5B.LAST_DDL_TIME], [VIEW1.T5B.TIMESTAMP], [VIEW1.T5B.STATUS], [VIEW1.T5B.TEMPORARY], [VIEW1.T5B.GENERATED], [VIEW1.T5B.SECONDARY], [VIEW1.T5B.NAMESPACE], [VIEW1.T5B.EDITION_NAME])</span><br><span class="line">  <span class="number">2</span> <span class="operator">-</span> output([T5.OWNER], [T5.OBJECT_NAME], [T5.SUBOBJECT_NAME], [T5.OBJECT_ID], [T5.DATA_OBJECT_ID], [T5.OBJECT_TYPE], [T5.CREATED], [T5.LAST_DDL_TIME], [T5.TIMESTAMP], [T5.STATUS], [T5.TEMPORARY], [T5.GENERATED], [T5.SECONDARY], [T5.NAMESPACE], [T5.EDITION_NAME]), <span class="keyword">filter</span>(nil), limit(?), <span class="keyword">offset</span>(?)</span><br><span class="line">  <span class="number">3</span> <span class="operator">-</span> output([T5.OWNER], [T5.OBJECT_NAME], [T5.SUBOBJECT_NAME], [T5.OBJECT_ID], [T5.DATA_OBJECT_ID], [T5.OBJECT_TYPE], [T5.CREATED], [T5.LAST_DDL_TIME], [T5.TIMESTAMP], [T5.STATUS], [T5.TEMPORARY], [T5.GENERATED], [T5.SECONDARY], [T5.NAMESPACE], [T5.EDITION_NAME]), <span class="keyword">filter</span>(nil), sort_keys([T5.OWNER, <span class="keyword">ASC</span>], [T5.OBJECT_NAME, <span class="keyword">ASC</span>]), topn(<span class="built_in">cast</span>(<span class="built_in">cast</span>(?, NUMBER(<span class="number">-1</span>, <span class="number">-1</span>)) <span class="operator">+</span> <span class="built_in">cast</span>(?, NUMBER(<span class="number">-1</span>, <span class="number">-1</span>)), <span class="type">BIGINT</span>(<span class="number">-1</span>, <span class="number">0</span>)))</span><br><span class="line">  <span class="number">4</span> <span class="operator">-</span> output([T5.OWNER], [T5.OBJECT_NAME], [T5.SUBOBJECT_NAME], [T5.OBJECT_ID], [T5.DATA_OBJECT_ID], [T5.OBJECT_TYPE], [T5.CREATED], [T5.LAST_DDL_TIME], [T5.TIMESTAMP], [T5.STATUS], [T5.TEMPORARY], [T5.GENERATED], [T5.SECONDARY], [T5.NAMESPACE], [T5.EDITION_NAME]), <span class="keyword">filter</span>(nil), </span><br><span class="line">      access([T5.OWNER], [T5.OBJECT_NAME], [T5.SUBOBJECT_NAME], [T5.OBJECT_ID], [T5.DATA_OBJECT_ID], [T5.OBJECT_TYPE], [T5.CREATED], [T5.LAST_DDL_TIME], [T5.TIMESTAMP], [T5.STATUS], [T5.TEMPORARY], [T5.GENERATED], [T5.SECONDARY], [T5.NAMESPACE], [T5.EDITION_NAME]), partitions(p0), </span><br><span class="line">      is_index_back<span class="operator">=</span><span class="literal">false</span>, </span><br><span class="line">      range_key([T5.__pk_increment]), <span class="keyword">range</span>(MIN ; MAX)always <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意，OB(ORACLE)  并没有 <code>ORDER BY ORDER OF t</code> 这种用法。也不支持 <code>with ur</code> 这种脏读语法。<br>标准的 ORACLE 分页框架用法就是两层嵌套循环，最里层是先对结果集排序。这点跟 DB2 的写法不同。当表很大并且查询条件不是很好发挥索引性能的时候，这个分页查询性能往往会不好。主要是最里面的那层排序耗时。<br>特殊的业务场景下，如果要查询的字段很少，能通过索引覆盖的话，就可以提升性能。或者将这个查询改写为自关联的表连接,以提升分页的性能。</p>
<p>分页示例优化（假设 t5 表很大）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN EXTENDED_NOADDR </span><br><span class="line"><span class="keyword">SELECT</span> l.rn, r.<span class="operator">*</span> <span class="keyword">FROM</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> rownum rn,rid </span><br><span class="line">	<span class="keyword">FROM</span> (</span><br><span class="line">		<span class="keyword">SELECT</span> rowid rid</span><br><span class="line">		<span class="keyword">FROM</span> t5</span><br><span class="line">		<span class="keyword">ORDER</span> <span class="keyword">BY</span> owner,object_name</span><br><span class="line">	) 	<span class="keyword">WHERE</span> rownum <span class="operator">&lt;=</span> <span class="number">100</span></span><br><span class="line">) l <span class="keyword">JOIN</span> t5 r <span class="keyword">ON</span> l.rid<span class="operator">=</span>r.rowid  </span><br><span class="line"><span class="keyword">WHERE</span> rn <span class="operator">&gt;=</span><span class="number">90</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> l.rn</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="operator">|</span>ID<span class="operator">|</span>OPERATOR          <span class="operator">|</span>NAME          <span class="operator">|</span>EST. <span class="keyword">ROWS</span><span class="operator">|</span>COST<span class="operator">|</span></span><br><span class="line"><span class="comment">-----------------------------------------------------</span></span><br><span class="line"><span class="operator">|</span><span class="number">0</span> <span class="operator">|</span>SORT              <span class="operator">|</span>              <span class="operator">|</span><span class="number">358</span>      <span class="operator">|</span><span class="number">2645</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="number">1</span> <span class="operator">|</span> <span class="keyword">MERGE</span> <span class="keyword">JOIN</span>       <span class="operator">|</span>              <span class="operator">|</span><span class="number">358</span>      <span class="operator">|</span><span class="number">1877</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="number">2</span> <span class="operator">|</span>  <span class="keyword">TABLE</span> SCAN      <span class="operator">|</span>R(rowid_index)<span class="operator">|</span><span class="number">729</span>      <span class="operator">|</span><span class="number">1002</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="number">3</span> <span class="operator">|</span>  SORT            <span class="operator">|</span>              <span class="operator">|</span><span class="number">50</span>       <span class="operator">|</span><span class="number">775</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="number">4</span> <span class="operator">|</span>   SUBPLAN SCAN   <span class="operator">|</span>L             <span class="operator">|</span><span class="number">50</span>       <span class="operator">|</span><span class="number">727</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="number">5</span> <span class="operator">|</span>    COUNT         <span class="operator">|</span>              <span class="operator">|</span><span class="number">100</span>      <span class="operator">|</span><span class="number">723</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="number">6</span> <span class="operator">|</span>     SUBPLAN SCAN <span class="operator">|</span>VIEW1         <span class="operator">|</span><span class="number">100</span>      <span class="operator">|</span><span class="number">722</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="number">7</span> <span class="operator">|</span>      LIMIT       <span class="operator">|</span>              <span class="operator">|</span><span class="number">100</span>      <span class="operator">|</span><span class="number">720</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="number">8</span> <span class="operator">|</span>       TOP<span class="operator">-</span>N SORT <span class="operator">|</span>              <span class="operator">|</span><span class="number">100</span>      <span class="operator">|</span><span class="number">719</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="number">9</span> <span class="operator">|</span>        <span class="keyword">TABLE</span> SCAN<span class="operator">|</span>T5            <span class="operator">|</span><span class="number">729</span>      <span class="operator">|</span><span class="number">570</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"></span><br><span class="line">Outputs <span class="operator">&amp;</span> filters: </span><br><span class="line"><span class="comment">-------------------------------------</span></span><br><span class="line">  <span class="number">0</span> <span class="operator">-</span> output([L.RN], [R.OWNER], [R.OBJECT_NAME], [R.SUBOBJECT_NAME], [R.OBJECT_ID], [R.DATA_OBJECT_ID], [R.OBJECT_TYPE], [R.CREATED], [R.LAST_DDL_TIME], [R.TIMESTAMP], [R.STATUS], [R.TEMPORARY], [R.GENERATED], [R.SECONDARY], [R.NAMESPACE], [R.EDITION_NAME]), <span class="keyword">filter</span>(nil), sort_keys([L.RN, <span class="keyword">ASC</span>])</span><br><span class="line">  <span class="number">1</span> <span class="operator">-</span> output([L.RN], [R.OWNER], [R.OBJECT_NAME], [R.SUBOBJECT_NAME], [R.OBJECT_ID], [R.DATA_OBJECT_ID], [R.OBJECT_TYPE], [R.CREATED], [R.LAST_DDL_TIME], [R.TIMESTAMP], [R.STATUS], [R.TEMPORARY], [R.GENERATED], [R.SECONDARY], [R.NAMESPACE], [R.EDITION_NAME]), <span class="keyword">filter</span>(nil), </span><br><span class="line">      equal_conds([L.RID <span class="operator">=</span> R.ROWID]), other_conds(nil)</span><br><span class="line">  <span class="number">2</span> <span class="operator">-</span> output([R.ROWID], [R.OWNER], [R.OBJECT_NAME], [R.SUBOBJECT_NAME], [R.OBJECT_ID], [R.DATA_OBJECT_ID], [R.OBJECT_TYPE], [R.CREATED], [R.LAST_DDL_TIME], [R.TIMESTAMP], [R.STATUS], [R.TEMPORARY], [R.GENERATED], [R.SECONDARY], [R.NAMESPACE], [R.EDITION_NAME]), <span class="keyword">filter</span>(nil), </span><br><span class="line">      access([R.__pk_increment], [R.ROWID], [R.OWNER], [R.OBJECT_NAME], [R.SUBOBJECT_NAME], [R.OBJECT_ID], [R.DATA_OBJECT_ID], [R.OBJECT_TYPE], [R.CREATED], [R.LAST_DDL_TIME], [R.TIMESTAMP], [R.STATUS], [R.TEMPORARY], [R.GENERATED], [R.SECONDARY], [R.NAMESPACE], [R.EDITION_NAME]), partitions(p0), </span><br><span class="line">      is_index_back<span class="operator">=</span><span class="literal">false</span>, </span><br><span class="line">      range_key([R.ROWID]), <span class="keyword">range</span>(MIN ; MAX)always <span class="literal">true</span></span><br><span class="line">  <span class="number">3</span> <span class="operator">-</span> output([L.RN], [L.RID]), <span class="keyword">filter</span>(nil), sort_keys([L.RID, <span class="keyword">ASC</span>])</span><br><span class="line">  <span class="number">4</span> <span class="operator">-</span> output([L.RID], [L.RN]), <span class="keyword">filter</span>([L.RN <span class="operator">&gt;=</span> <span class="number">90</span>]), </span><br><span class="line">      access([L.RID], [L.RN])</span><br><span class="line">  <span class="number">5</span> <span class="operator">-</span> output([rownum()], [VIEW1..RID]), <span class="keyword">filter</span>(nil)</span><br><span class="line">  <span class="number">6</span> <span class="operator">-</span> output([VIEW1..RID]), <span class="keyword">filter</span>(nil), </span><br><span class="line">      access([VIEW1..RID])</span><br><span class="line">  <span class="number">7</span> <span class="operator">-</span> output([T5.ROWID]), <span class="keyword">filter</span>(nil), limit(?), <span class="keyword">offset</span>(nil)</span><br><span class="line">  <span class="number">8</span> <span class="operator">-</span> output([T5.ROWID]), <span class="keyword">filter</span>(nil), sort_keys([T5.OWNER, <span class="keyword">ASC</span>], [T5.OBJECT_NAME, <span class="keyword">ASC</span>]), topn(?)</span><br><span class="line">  <span class="number">9</span> <span class="operator">-</span> output([T5.ROWID], [T5.OWNER], [T5.OBJECT_NAME]), <span class="keyword">filter</span>(nil), </span><br><span class="line">      access([T5.__pk_increment], [T5.ROWID], [T5.OWNER], [T5.OBJECT_NAME]), partitions(p0), </span><br><span class="line">      is_index_back<span class="operator">=</span><span class="literal">false</span>, </span><br><span class="line">      range_key([T5.__pk_increment]), <span class="keyword">range</span>(MIN ; MAX)always <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果 DB2 的 <code>row_number</code> 函数不仅仅是分页，还有分组功能，那就转换为 ORACLE 对应的  <code>row_number</code> 函数用法。</p>
<h3 id="FETCH-FIRST-N-ROWS"><a href="#FETCH-FIRST-N-ROWS" class="headerlink" title="FETCH FIRST N ROWS"></a><code>FETCH FIRST N ROWS</code></h3><p>在 OB 3.1 版本之后，也支持 <code>FETCH FIRST N ROWS</code> 。3.1 版本之前，就按上面分页方法。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain extended_noaddr </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">row_number</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> owner,object_name) rn , t5.<span class="operator">*</span> <span class="keyword">FROM</span> t5 <span class="keyword">ORDER</span> <span class="keyword">BY</span> owner, object_name <span class="keyword">FETCH</span> <span class="keyword">FIRST</span> <span class="number">100</span> <span class="keyword">ROWS</span> <span class="keyword">ONLY</span></span><br><span class="line">) t5b </span><br><span class="line"><span class="keyword">WHERE</span> rn <span class="operator">&gt;=</span><span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="operator">|</span>ID<span class="operator">|</span>OPERATOR         <span class="operator">|</span>NAME<span class="operator">|</span>EST. <span class="keyword">ROWS</span><span class="operator">|</span>COST<span class="operator">|</span></span><br><span class="line"><span class="comment">------------------------------------------</span></span><br><span class="line"><span class="operator">|</span><span class="number">0</span> <span class="operator">|</span>SUBPLAN SCAN     <span class="operator">|</span>T5B <span class="operator">|</span><span class="number">50</span>       <span class="operator">|</span><span class="number">2749</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="number">1</span> <span class="operator">|</span> LIMIT           <span class="operator">|</span>    <span class="operator">|</span><span class="number">100</span>      <span class="operator">|</span><span class="number">2746</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="number">2</span> <span class="operator">|</span>  <span class="keyword">WINDOW</span> <span class="keyword">FUNCTION</span><span class="operator">|</span>    <span class="operator">|</span><span class="number">100</span>      <span class="operator">|</span><span class="number">2744</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="number">3</span> <span class="operator">|</span>   SORT          <span class="operator">|</span>    <span class="operator">|</span><span class="number">729</span>      <span class="operator">|</span><span class="number">2357</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="number">4</span> <span class="operator">|</span>    <span class="keyword">TABLE</span> SCAN   <span class="operator">|</span>T5  <span class="operator">|</span><span class="number">729</span>      <span class="operator">|</span><span class="number">891</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"></span><br><span class="line">Outputs <span class="operator">&amp;</span> filters: </span><br><span class="line"><span class="comment">-------------------------------------</span></span><br><span class="line">  <span class="number">0</span> <span class="operator">-</span> output([T5B.RN], [T5B.OWNER], [T5B.OBJECT_NAME], [T5B.SUBOBJECT_NAME], [T5B.OBJECT_ID], [T5B.DATA_OBJECT_ID], [T5B.OBJECT_TYPE], [T5B.CREATED], [T5B.LAST_DDL_TIME], [T5B.TIMESTAMP], [T5B.STATUS], [T5B.TEMPORARY], [T5B.GENERATED], [T5B.SECONDARY], [T5B.NAMESPACE], [T5B.EDITION_NAME]), <span class="keyword">filter</span>([T5B.RN <span class="operator">&gt;=</span> <span class="number">90</span>]), </span><br><span class="line">      access([T5B.RN], [T5B.OWNER], [T5B.OBJECT_NAME], [T5B.SUBOBJECT_NAME], [T5B.OBJECT_ID], [T5B.DATA_OBJECT_ID], [T5B.OBJECT_TYPE], [T5B.CREATED], [T5B.LAST_DDL_TIME], [T5B.TIMESTAMP], [T5B.STATUS], [T5B.TEMPORARY], [T5B.GENERATED], [T5B.SECONDARY], [T5B.NAMESPACE], [T5B.EDITION_NAME])</span><br><span class="line">  <span class="number">1</span> <span class="operator">-</span> output([T_WIN_FUN_ROW_NUMBER()], [T5.OWNER], [T5.OBJECT_NAME], [T5.SUBOBJECT_NAME], [T5.OBJECT_ID], [T5.DATA_OBJECT_ID], [T5.OBJECT_TYPE], [T5.CREATED], [T5.LAST_DDL_TIME], [T5.TIMESTAMP], [T5.STATUS], [T5.TEMPORARY], [T5.GENERATED], [T5.SECONDARY], [T5.NAMESPACE], [T5.EDITION_NAME]), <span class="keyword">filter</span>(nil), limit(?), <span class="keyword">offset</span>(nil)</span><br><span class="line">  <span class="number">2</span> <span class="operator">-</span> output([T_WIN_FUN_ROW_NUMBER()], [T5.OWNER], [T5.OBJECT_NAME], [T5.SUBOBJECT_NAME], [T5.OBJECT_ID], [T5.DATA_OBJECT_ID], [T5.OBJECT_TYPE], [T5.CREATED], [T5.LAST_DDL_TIME], [T5.TIMESTAMP], [T5.STATUS], [T5.TEMPORARY], [T5.GENERATED], [T5.SECONDARY], [T5.NAMESPACE], [T5.EDITION_NAME]), <span class="keyword">filter</span>(nil), </span><br><span class="line">      win_expr(T_WIN_FUN_ROW_NUMBER()), partition_by(nil), order_by([T5.OWNER, <span class="keyword">ASC</span>], [T5.OBJECT_NAME, <span class="keyword">ASC</span>]), window_type(<span class="keyword">RANGE</span>), <span class="built_in">upper</span>(UNBOUNDED PRECEDING), <span class="built_in">lower</span>(UNBOUNDED FOLLOWING)</span><br><span class="line">  <span class="number">3</span> <span class="operator">-</span> output([T5.OWNER], [T5.OBJECT_NAME], [T5.SUBOBJECT_NAME], [T5.OBJECT_ID], [T5.DATA_OBJECT_ID], [T5.OBJECT_TYPE], [T5.CREATED], [T5.LAST_DDL_TIME], [T5.TIMESTAMP], [T5.STATUS], [T5.TEMPORARY], [T5.GENERATED], [T5.SECONDARY], [T5.NAMESPACE], [T5.EDITION_NAME]), <span class="keyword">filter</span>(nil), sort_keys([T5.OWNER, <span class="keyword">ASC</span>], [T5.OBJECT_NAME, <span class="keyword">ASC</span>])</span><br><span class="line">  <span class="number">4</span> <span class="operator">-</span> output([T5.OWNER], [T5.OBJECT_NAME], [T5.SUBOBJECT_NAME], [T5.OBJECT_ID], [T5.DATA_OBJECT_ID], [T5.OBJECT_TYPE], [T5.CREATED], [T5.LAST_DDL_TIME], [T5.TIMESTAMP], [T5.STATUS], [T5.TEMPORARY], [T5.GENERATED], [T5.SECONDARY], [T5.NAMESPACE], [T5.EDITION_NAME]), <span class="keyword">filter</span>(nil), </span><br><span class="line">      access([T5.OWNER], [T5.OBJECT_NAME], [T5.SUBOBJECT_NAME], [T5.OBJECT_ID], [T5.DATA_OBJECT_ID], [T5.OBJECT_TYPE], [T5.CREATED], [T5.LAST_DDL_TIME], [T5.TIMESTAMP], [T5.STATUS], [T5.TEMPORARY], [T5.GENERATED], [T5.SECONDARY], [T5.NAMESPACE], [T5.EDITION_NAME]), partitions(p0), </span><br><span class="line">      is_index_back<span class="operator">=</span><span class="literal">false</span>, </span><br><span class="line">      range_key([T5.__pk_increment]), <span class="keyword">range</span>(MIN ; MAX)always <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="列名重复问题"><a href="#列名重复问题" class="headerlink" title="列名重复问题"></a>列名重复问题</h3><p>DB2 的查询结果集可以接受有重复的列名（投影列），但是 OB(ORACLE) 不行。</p>
<p>DB2 示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> id,c1,c1 <span class="keyword">FROM</span> t3);</span><br><span class="line"></span><br><span class="line">ID                   C1                                                 C1</span><br><span class="line"><span class="comment">-------------------- -------------------------------------------------- --------------------------------------------------</span></span><br><span class="line">                   <span class="number">1</span></span><br><span class="line">                   <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2</span> record(s) selected.</span><br><span class="line"></span><br><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<p>ORACLE 示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> id,c1,c1  <span class="keyword">FROM</span> t3);</span><br><span class="line">ORA<span class="number">-00918</span>: <span class="keyword">column</span> <span class="string">&#x27;C1&#x27;</span> <span class="keyword">in</span> field list ambiguously defined</span><br><span class="line">obclient<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表别名问题"><a href="#表别名问题" class="headerlink" title="表别名问题"></a>表别名问题</h3><p>DB2 表别名语法用 <code>AS</code> 关键字，是可选的。但是 OB(ORACLE) 表别名不支持 <code>AS</code> 关键字。</p>
<ul>
<li><p>DB2 示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">select</span> id , c1 <span class="keyword">as</span> c1_new <span class="keyword">from</span> t4  <span class="keyword">as</span> t4_new ;</span><br><span class="line"></span><br><span class="line">ID                   C1_NEW</span><br><span class="line"><span class="comment">-------------------- --------------------------------------------------</span></span><br><span class="line">                   <span class="number">1</span> a</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span> record(s) selected.</span><br><span class="line"></span><br><span class="line">db2 <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">select</span> id , c1 c1_new <span class="keyword">from</span> t4  t4_new ;</span><br><span class="line"></span><br><span class="line">ID                   C1_NEW</span><br><span class="line"><span class="comment">-------------------- --------------------------------------------------</span></span><br><span class="line">                   <span class="number">1</span> a</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span> record(s) selected.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>OB(ORACLE) 示例：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">select</span> id , c1 <span class="keyword">as</span> c1_new <span class="keyword">from</span> t4  <span class="keyword">as</span> t4_new ;</span><br><span class="line">ORA<span class="number">-00900</span>: You have an error <span class="keyword">in</span> your <span class="keyword">SQL</span> syntax; <span class="keyword">check</span> the manual that corresponds <span class="keyword">to</span> your OceanBase version <span class="keyword">for</span> the <span class="keyword">right</span> syntax <span class="keyword">to</span> use near <span class="string">&#x27;t4_new&#x27;</span> <span class="keyword">at</span> line <span class="number">1</span></span><br><span class="line">obclient<span class="operator">&gt;</span> <span class="keyword">select</span> id , c1 <span class="keyword">as</span> c1_new <span class="keyword">from</span> t4  t4_new ;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="operator">|</span> ID <span class="operator">|</span> C1_NEW <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> a      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">obclient<span class="operator">&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="DB2-的-ORACLE-兼容模式"><a href="#DB2-的-ORACLE-兼容模式" class="headerlink" title="DB2 的 ORACLE 兼容模式"></a>DB2 的 ORACLE 兼容模式</h2><p>为了减少 DB2 和 ORACLE 的不兼容逻辑，或者说 IBM 当初为了减少 ORALCE 应用迁移到 DB2 上的修改成本，DB2 可以开启 ORACLE 兼容模式。这个需要在创建数据库的时候就指定，后期不能修改。适合以 OB(ORACLE) 为主，DB2 为异构备的方案。</p>
<ul>
<li>DB2 数据库开启 ORACLE 兼容模式方法：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[db2inst1@08935f5bff4f ~]$ db2set -all[i] DB2COMM=TCPIP[g] DB2SYSTEM=08935f5bff4f[db2inst1@08935f5bff4f ~]$ db2set DB2_COMPATIBILITY_VECTOR=ORA[db2inst1@08935f5bff4f ~]$ db2set -all[i] DB2_COMPATIBILITY_VECTOR=ORA[i] DB2COMM=TCPIP[g] DB2SYSTEM=08935f5bff4f[db2inst1@08935f5bff4f ~]$ db2stop01/28/2021 03:03:23 0 0 SQL1064N DB2STOP processing was successful.SQL1064N DB2STOP processing was successful.[db2inst1@08935f5bff4f ~]$ db2start01/28/2021 03:05:13 0 0 SQL1063N DB2START processing was successful.SQL1063N DB2START processing was successful.[db2inst1@08935f5bff4f ~]$[db2inst1@59f37c64eddd ~]$ db2 create db db2ora using codeset utf-8 territory USDB20000I The CREATE DATABASE <span class="built_in">command</span> completed successfully.[db2inst1@59f37c64eddd ~]$</span><br></pre></td></tr></table></figure>

<ul>
<li>DB2 建表示例 </li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[db2inst1<span class="variable">@a32408ac626d</span> <span class="operator">~</span>]$ db2 &quot;DROP TABLE T10;&quot;</span><br><span class="line">DB20000I  The <span class="keyword">SQL</span> command completed successfully.</span><br><span class="line">[db2inst1<span class="variable">@a32408ac626d</span> <span class="operator">~</span>]$ db2 &quot;CREATE TABLE T10 (</span><br><span class="line">&gt; ID BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MAXVALUE 9223372036854775807),</span><br><span class="line">&gt; C1 NUMBER NOT NULL,</span><br><span class="line">&gt; C2 VARCHAR2(50) NOT NULL,</span><br><span class="line">&gt; C3 NVARCHAR2(50) NOT NULL,</span><br><span class="line">&gt; C4 DATE NOT NULL DEFAULT SYSDATE,</span><br><span class="line">&gt; C5 TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP</span><br><span class="line">&gt; );&quot;</span><br><span class="line">DB20000I  The <span class="keyword">SQL</span> command completed successfully.</span><br><span class="line">[db2inst1<span class="variable">@a32408ac626d</span> <span class="operator">~</span>]$</span><br><span class="line">[db2inst1<span class="variable">@a32408ac626d</span> <span class="operator">~</span>]$ db2 &quot;INSERT INTO t10(c1,c2,c3) values(1,&#x27;a&#x27;,&#x27;A&#x27;);&quot;</span><br><span class="line">DB20000I  The <span class="keyword">SQL</span> command completed successfully.</span><br><span class="line">[db2inst1<span class="variable">@a32408ac626d</span> <span class="operator">~</span>]$</span><br><span class="line">[db2inst1<span class="variable">@a32408ac626d</span> <span class="operator">~</span>]$ db2 &quot;INSERT INTO t10(c1,c2,c3) values(2,&#x27;b&#x27;,&#x27;&#x27;);&quot;</span><br><span class="line">DB21034E  The command was processed <span class="keyword">as</span> an <span class="keyword">SQL</span> statement because it was <span class="keyword">not</span> a</span><br><span class="line">valid Command Line Processor command.  During <span class="keyword">SQL</span> processing it returned:</span><br><span class="line">SQL0407N  Assignment <span class="keyword">of</span> a <span class="keyword">NULL</span> <span class="keyword">value</span> <span class="keyword">to</span> a <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">column</span> &quot;TBSPACEID=2,</span><br><span class="line">TABLEID=523, COLNO=3&quot; <span class="keyword">is</span> <span class="keyword">not</span> allowed.  <span class="keyword">SQLSTATE</span><span class="operator">=</span><span class="number">23502</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可见，当开启 ORACLE 兼容模式后，支持 ORACLE 的列类型，并且 <code>NULL</code> 跟空值也等同对待了。</p>
<p>查看一下表结构,可见在 DB2 内部，表的列还是以 DB2 的原生类型存储。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[db2inst1<span class="variable">@a32408ac626d</span> <span class="operator">~</span>]$ db2look <span class="operator">-</span>d testdb <span class="operator">-</span>e <span class="operator">-</span>t T10</span><br><span class="line"><span class="comment">-- No userid was specified, db2look tries to use Environment variable USER</span></span><br><span class="line"><span class="comment">-- USER is: DB2INST1</span></span><br><span class="line"><span class="comment">-- The db2look utility will consider only the specified tables</span></span><br><span class="line"><span class="comment">-- Creating DDL for table(s)</span></span><br><span class="line"><span class="comment">-- This CLP file was created using DB2LOOK Version &quot;11.5&quot;</span></span><br><span class="line"><span class="comment">-- Timestamp: Sat Aug 14 09:52:21 2021</span></span><br><span class="line"><span class="comment">-- Database Name: TESTDB</span></span><br><span class="line"><span class="comment">-- Database Manager Version: DB2/LINUXX8664 Version 11.5.6.0</span></span><br><span class="line"><span class="comment">-- Database Codepage: 1208</span></span><br><span class="line"><span class="comment">-- Database Collating Sequence is: IDENTITY</span></span><br><span class="line"><span class="comment">-- Alternate collating sequence(alt_collate): null</span></span><br><span class="line"><span class="comment">-- varchar2 compatibility(varchar2_compat): ON</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Binding package automatically ...</span></span><br><span class="line"><span class="comment">-- Bind is successful</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">TO</span> TESTDB;</span><br><span class="line"></span><br><span class="line"><span class="comment">------------------------------------------------</span></span><br><span class="line"><span class="comment">-- DDL Statements for Table &quot;TPCC&quot;.&quot;T10&quot;</span></span><br><span class="line"><span class="comment">------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &quot;TPCC&quot;.&quot;T10&quot;  (</span><br><span class="line">                  &quot;ID&quot; <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> GENERATED <span class="keyword">BY</span> <span class="keyword">DEFAULT</span> <span class="keyword">AS</span> <span class="keyword">IDENTITY</span> (</span><br><span class="line">                    <span class="keyword">START</span> <span class="keyword">WITH</span> <span class="operator">+</span><span class="number">1</span></span><br><span class="line">                    INCREMENT <span class="keyword">BY</span> <span class="operator">+</span><span class="number">1</span></span><br><span class="line">                    MINVALUE <span class="operator">+</span><span class="number">1</span></span><br><span class="line">                    MAXVALUE <span class="operator">+</span><span class="number">9223372036854775807</span></span><br><span class="line">                    <span class="keyword">NO</span> <span class="keyword">CYCLE</span></span><br><span class="line">                    CACHE <span class="number">20</span></span><br><span class="line">                    <span class="keyword">NO</span> <span class="keyword">ORDER</span> ) ,</span><br><span class="line">                  &quot;C1&quot; <span class="type">DECFLOAT</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">                  &quot;C2&quot; <span class="type">VARCHAR</span>(<span class="number">50</span> OCTETS) <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">                  &quot;C3&quot; <span class="type">VARCHAR</span>(<span class="number">50</span> CODEUNITS32) <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">                  &quot;C4&quot; <span class="type">TIMESTAMP</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">WITH</span> <span class="keyword">DEFAULT</span> &quot;SYSIBM&quot;.&quot;TIMESTAMP&quot;(<span class="keyword">CURRENT</span> <span class="type">TIMESTAMP</span>) ,</span><br><span class="line">                  &quot;C5&quot; <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">WITH</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT</span> <span class="type">TIMESTAMP</span> )</span><br><span class="line">                 <span class="keyword">IN</span> &quot;USERSPACE1&quot;</span><br><span class="line">                 ORGANIZE <span class="keyword">BY</span> <span class="type">ROW</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &quot;TPCC&quot;.&quot;T10&quot; <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> &quot;ID&quot; RESTART <span class="keyword">WITH</span> <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span> WORK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CONNECT</span> RESET;</span><br><span class="line"></span><br><span class="line">TERMINATE;</span><br><span class="line"></span><br><span class="line">[db2inst1<span class="variable">@a32408ac626d</span> <span class="operator">~</span>]$</span><br></pre></td></tr></table></figure>

<p>注意，如果如果涉及到国家字符集，则按DB2的 Unicode 规则保存，每个汉字是 4 个字节。</p>
<h2 id="DB2-和-OB-ORACLE-的异构数据同步"><a href="#DB2-和-OB-ORACLE-的异构数据同步" class="headerlink" title="DB2 和 OB(ORACLE) 的异构数据同步"></a>DB2 和 OB(ORACLE) 的异构数据同步</h2><p>DB2 和 ORACLE 语法的客观差异决定 DB2 到 OB(ORACLE) 的同步或者并轨运行不会是一件轻松的事情。实际项目有的是业务自己同步，有的是靠产品同步。<br>如果是产品做异构同步，业务需要做一些妥协。比如说遵守特定的数据库表结构设计规范、SQL 规范等等。传统的数据库同步产品 OGG 、DSG 等做异构同步也是同样的经验。<br>就 DB2 和 OB(ORACLE)之间的实时同步，可以使用 OB 官方数据同步产品（OMS）或者 OB 合作伙伴产品（DSG）。如果是离线同步，可以使用 Alibaba 开源的 DATAX 产品（ DATAX 的 OB 插件源码也已经随着 OB 社区版一起开源）。</p>
<p>OMS 的 DB2 同步功能包括：</p>
<ul>
<li>DB2 和 OB(ORACLE) 彼此的全量表结构同步。</li>
<li>DB2 和 OB(ORACLE) 彼此的全量数据同步。</li>
<li>DB2 和 OB(ORACLE) 彼此的增量数据同步。</li>
<li>DB2 和 OB(ORACLE) 彼此的增量表结构同步。</li>
</ul>
<p>注意，这里说的是具备双向同步的能力，但是只激活单向的同步链路。</p>
<p>非表结构对象在技术上存在一些客观的技术困难，需要人为分析再手动同步：</p>
<ul>
<li>序列的同步。目标端再激活之前，序列的值需要推高。在 OB(ORACLE) 里目前推高序列的方法是重建序列。</li>
<li>同义词的同步。同义词链接的对象可能是其他 用户或SCHEMA 下的对象，这有个依赖问题，需要分析后手动同步。</li>
<li>存储过程的同步。DB2 和 OB(ORACLE) 存储过程语法差异非常大，很多用法都要翻译为兼容性的实现。目前还需要手动做。</li>
</ul>
<h2 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h2><p>单纯的看 DB2 到 OB(ORACLE) 的异构同步，是一件困难麻烦多收益少的事情。还需要其他角度来看这个事情。<br>首先是可以降低对 IBM 小机和存储等高端硬件的依赖，相应的数据库运维技术门槛也降低。 稳定性方面 OB 通过多副本（3 副本或 5 副本）以及容灾集群来提高整体的可靠性。<br>第二是数据库架构从集中式转向分布式，业务的架构也相应的转向分布式架构，两条腿走路跑的快。虽然目前看复杂的 SQL，单条语句性能 OB 可能不如小机上的 DB2 跑的快，但是 OB 的并发处理能力强。当并发上去后（如50、100等等），复杂 SQL 在 OB 上的平均延时水平很可能比 DB2 低很多，吞吐能力会更高。<br>第三是成熟的开发商（ISV）的应用本身都适配过 DB2、ORACLE 和 MySQL。所以在核心业务表结构设计上对特定数据库依赖很少，尽可能的取各个数据库能力的交集。这样的业务做 DB2 到 OB(ORACLE) 的迁移，困难还会少很多。</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="DB2-DOCKER-环境搭建"><a href="#DB2-DOCKER-环境搭建" class="headerlink" title="DB2 DOCKER 环境搭建"></a>DB2 DOCKER 环境搭建</h3><ul>
<li>下载 db2 镜像</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull ibmcom/db2</span><br><span class="line"></span><br><span class="line">docker images |grep db2</span><br><span class="line">REPOSITORY                                            TAG                     IMAGE ID            CREATED             SIZE</span><br><span class="line">ibmcom/db2                                            latest                  a6a5ee354fb1        7 weeks ago         2.95GB</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>起 db2 容器（不兼容ORACLE）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker volume create db2-11.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker run -itd --name db2_11.5 --privileged=true -p 50000:50000 \</span></span><br><span class="line">        -e LICENSE=accept \</span><br><span class="line">        -e DB2INST1_PASSWORD=db2inst1 \</span><br><span class="line">        -e DBNAME=testdb \</span><br><span class="line">        -e DBPORT=50000 \</span><br><span class="line">        -e TSPORT=55000 \</span><br><span class="line">        -e ENABLE_ORACLE_COMPATIBILITY=<span class="literal">true</span> \</span><br><span class="line">        -v db2-11.5:/database ibmcom/db2</span><br><span class="line"></span><br><span class="line">-- 等 5 分钟，db2 容器初始化完毕</span><br><span class="line"><span class="comment"># docker logs db2_11.5</span></span><br><span class="line"></span><br><span class="line">-- 进入 db2 容器</span><br><span class="line"><span class="comment"># docker exec -it  db2-11.5 bash</span></span><br><span class="line"><span class="comment"># su - db2inst1</span></span><br><span class="line"></span><br><span class="line">-- 连接数据库，查看表信息</span><br><span class="line">$ db2 connect to testdb</span><br><span class="line">$ db2 <span class="built_in">set</span> current schema tpcc</span><br><span class="line">$ db2 list tables <span class="keyword">for</span> schema tpcc</span><br><span class="line">$ db2 describe table t10</span><br><span class="line"></span><br><span class="line">-- 查看 db2 归档日志设置，增量同步需要开启归档</span><br><span class="line">$ db2 get db cfg <span class="keyword">for</span> testdb |grep -i <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">-- 查看/修改 db2 默认监听端口</span><br><span class="line">$ db2 get dbm cfg |grep -i tcp/ip</span><br><span class="line"> TCP/IP Service name                          (SVCENAME) = db2c_db2inst1</span><br><span class="line"> </span><br><span class="line">$ cat /etc/services |grep db2c_db2inst1</span><br><span class="line">db2c_db2inst1      50000/tcp</span><br><span class="line">db2c_db2inst1_ssl  50001/tcp</span><br><span class="line"></span><br><span class="line">--修改 /etc/services 端口后，重启 db2</span><br><span class="line">$ db2stop</span><br><span class="line">$ db2start</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="DATAX-FOR-OB-同步任务文件示例"><a href="#DATAX-FOR-OB-同步任务文件示例" class="headerlink" title="DATAX FOR OB 同步任务文件示例"></a>DATAX FOR OB 同步任务文件示例</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;job&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;setting&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;speed&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;channel&quot;</span>: <span class="number">8</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;errorLimit&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;record&quot;</span>: <span class="number">10000</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;content&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;reader&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;db2reader&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;db2inst1&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;******&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;splitPK&quot;</span>:<span class="string">&quot;ID&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;column&quot;</span>: [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;c1&quot;</span>, <span class="string">&quot;c2&quot;</span>] ,</span><br><span class="line">                        <span class="attr">&quot;connection&quot;</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">&quot;jdbcUrl&quot;</span>: [</span><br><span class="line">                                    <span class="string">&quot;jdbc:db2://127.0.0.1:50000/testdb:currentSchema=JXXD;&quot;</span></span><br><span class="line">                                ],</span><br><span class="line">                                <span class="attr">&quot;table&quot;</span>: [</span><br><span class="line">                                    <span class="string">&quot;datax_test&quot;</span></span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;writer&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;oceanbasev10writer&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;writeMode&quot;</span>: <span class="string">&quot;insert&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;tpcc&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;******&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;column&quot;</span>: [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;c1&quot;</span>, <span class="string">&quot;c2&quot;</span>] ,</span><br><span class="line">                        <span class="attr">&quot;connection&quot;</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">&quot;jdbcUrl&quot;</span>: <span class="string">&quot;||_dsc_ob10_dsc_||obdemo:oboracle||_dsc_ob10_dsc_||jdbc:oceanbase://127.0.0.1:2883/tpcc&quot;</span>,</span><br><span class="line">                                <span class="attr">&quot;table&quot;</span>: [</span><br><span class="line">                                    <span class="string">&quot;datax_test&quot;</span></span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/admin/datax3 &amp;&amp; bin/datax.py job/datax_test.json</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>DB2</tag>
        <tag>OCEANBASE</tag>
      </tags>
  </entry>
  <entry>
    <title>OceanBase JDBC 连接方法</title>
    <url>/posts/a5ed3b8f/</url>
    <content><![CDATA[<p>OceanBase 数据库支持JDBC驱动连接。经常有人问怎么连接，这里就简单说明一下。</p>
<span id="more"></span>

<h2 id="驱动用法"><a href="#驱动用法" class="headerlink" title="驱动用法"></a>驱动用法</h2><p>OceanBase实例（租户）根据兼容性分 MySQL 和 ORACLE 两种。<br>如果是连接 OB 的 MySQL 租户，可以使用 MySQL JDBC 驱动，版本推荐 5.1.46 。这个版本在内部大量使用验证过。当然也不是说其他版本就不行。此外也可以使用 OB 的 JDBC 驱动。组件名称后期可能会变化，实际文件名是 ： <code>oceanbase-client-1.1.10.jar</code> 。 版本号后面也会变，记住名字格式就行。<br>如果是连接 OB 的 ORACLE 租户，则只能使用 OB 的 JDBC 驱动，不能使用 ORACLE 的 JDBC 驱动。</p>
<p>OB 的 JDBC 驱动加载类名推荐：<code>com.alipay.oceanbase.jdbc.Driver</code> 。以前的版本也有使用 <code>com.alipay.oceanbase.obproxy.mysql.jdbc.Driver</code> 的。</p>
<p>对于大部分连接中间件，配置到 OB 的连接，只需要修改配置文件即可。各个配置文件可能会多少不一样，下面是示例供参考，关键是连接的 <code>IP</code>、<code>PORT</code>和 <code>USER</code>。<br>驱动的其他熟悉推荐开启 <code>rewriteBatchedStatements</code> 和  <code>allowMultiQueries</code> 。但是 <code>useServerPrepStmts</code> 在 OB 2.2 不建议开启。OB 2.2 之前应该不支持， 2.2 之后需要开启内核参数 <code>_ob_enable_prepared_statement</code> 。 2.2.7 以后的版本这个参数默认为 <code>true</code>。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=com.alipay.oceanbase.obproxy.mysql.jdbc.Driver</span><br><span class="line"><span class="attr">conn</span>=jdbc:oceanbase://<span class="number">127.1</span>:<span class="number">2883</span>/tpcc?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-<span class="number">8</span>&amp;rewriteBatchedStatements=<span class="literal">true</span>&amp;allowMultiQueries=<span class="literal">true</span></span><br><span class="line"><span class="attr">user</span>=tpcc@oboracle<span class="comment">#obdemo</span></span><br><span class="line"><span class="attr">password</span>=<span class="number">123456</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面是简单的JAVA 代码示例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BasicDataSource dataSource = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line"></span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.alipay.oceanbase.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:oceanbase://&quot;</span> + ip + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/&quot;</span> + dbName + <span class="string">&quot;?rewriteBatchedStatements=true&amp;allowMultiQueries=true&amp;useLocalSessionState=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;socketTimeout=3000000&amp;userAffectedRows=true&quot;</span>);</span><br><span class="line">        dataSource.setUsername(user);</span><br><span class="line">        dataSource.setPassword(passwd);</span><br><span class="line">        dataSource.setMaxIdle(<span class="number">6000</span>);</span><br><span class="line">        dataSource.setMaxActive(<span class="number">6000</span>);</span><br><span class="line">        dataSource.setPoolPreparedStatements(<span class="keyword">true</span>);</span><br><span class="line">        dataSource.setMaxOpenPreparedStatements(<span class="number">60000</span>);</span><br><span class="line">```        </span><br><span class="line"></span><br><span class="line">其他的数据库操作写法跟传统数据库的 JDBC 驱动一样。</span><br><span class="line"></span><br><span class="line">### `PreparedStatement` 用法</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="comment">//DBStatement dbst = new DBStatement(connection);</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    PreparedStatement pstmt = connection.prepareStatement(sql);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ResultSet rs = pstmt.executeQuery();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;MemRow&gt; rows = getRows(rs, rs.getMetaData());</span><br><span class="line">            <span class="keyword">if</span> (toCache) &#123;</span><br><span class="line">                setCache(rows);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                setRows(rows);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLNonTransientConnectionException | SQLRecoverableException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Error.raise(RBPM_CORE_0010, viewName, sql, e.getMessage());</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        pstmt.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//dbst.close();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3</span>人未读</span><br><span class="line">昨天 <span class="number">11</span>:<span class="number">59</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="CallableStatement-用法"><a href="#CallableStatement-用法" class="headerlink" title="CallableStatement 用法"></a><code>CallableStatement</code> 用法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainCall</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Driver driver = <span class="keyword">new</span> com.alipay.oceanbase.jdbc.Driver();</span><br><span class="line"></span><br><span class="line">            Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">            p.setProperty(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Connection conn = DriverManager.getConnection(<span class="string">&quot;jdbc:oceanbase://127.1:2883/bankcore&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;bankcore@oboracle#obdemo&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Create PROCEDURE &#x27;calc_add&#x27;</span></span><br><span class="line">            Statement stmt = conn.createStatement();</span><br><span class="line">            String sql = <span class="string">&quot;create or replace PROCEDURE calc_add(a1 IN int, a2 IN OUT int) is &quot;</span></span><br><span class="line">                    + <span class="string">&quot;begin &quot;</span> + <span class="string">&quot;  a2:=a1+a2; &quot;</span> + <span class="string">&quot;end;&quot;</span>;</span><br><span class="line">            stmt.execute(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Execute PROCEDURE &#x27;calc_add&#x27;</span></span><br><span class="line">            CallableStatement csmt = conn.prepareCall(<span class="string">&quot;call calc_add(?, ?)&quot;</span>);</span><br><span class="line"></span><br><span class="line">            csmt.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            csmt.setInt(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">            csmt.registerOutParameter(<span class="number">2</span>, Types.INTEGER);</span><br><span class="line">            csmt.execute();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Get Result of a2 from &#x27;calc_add&#x27;</span></span><br><span class="line">            <span class="keyword">int</span> sum = csmt.getInt(<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;sum:&quot;</span> + sum);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其他建议"><a href="#其他建议" class="headerlink" title="其他建议"></a>其他建议</h2><ul>
<li>使用连接池技术，连接池注意设置 <code>keepAlive</code>，即避免空闲连接。 空闲连接空闲太久可能会被 OB 或者网络上其他设备中断。</li>
<li>数据库操作要有异常处理逻辑。如果是连接中断，则新建连接；如果是事务异常，则回滚事务。 事务长期不提交很容易触发 OB 的事务未提交超时或者空闲超时机制。如果是事务未提交超时，该连接必须明确发起 <code>commit</code> 或 <code>rollback</code> 以清理连接的事务状态。否则这个连接不能再使用。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>OceanBase 官网文档:  <code>https://www.oceanbase.com/docs</code> </li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>OceanBase 部署架构实践总结</title>
    <url>/posts/32080/</url>
    <content><![CDATA[<p>本文总结 OceanBase 五花八门的部署架构及其原理，满足各个行业的企业的形形色色的数据库容灾和多活需求。有兴趣的看看。</p>
<span id="more"></span>

<h2 id="标准部署形态"><a href="#标准部署形态" class="headerlink" title="标准部署形态"></a>标准部署形态</h2><p>首先来一个 OB 最基础的最中规中矩的部署架构图。</p>
<p><img src="/images/16275469181084.jpg"></p>
<p>这个图信息量很大，下面一一说明。</p>
<p>部署一个产品，最大的挑战就是用户环境。100 个用户，可能就有 100 种环境。产品应付不过来，要求部署环境要标准。所以，部署的第一步就是环境标准化。</p>
<h3 id="部署环境标准化"><a href="#部署环境标准化" class="headerlink" title="部署环境标准化"></a>部署环境标准化</h3><p>不同客户的机器配置也不尽相同，OB 会对软硬件提一些基本要求。然后提供一个工具对机器进行自动初始化。主要是 OS 内核和会话参数的设置、文件系统的划分、用户和相关目录的创建。<br>早期的时候需要命令行下每个机器挨个执行。<br>现在提供了一个 OAT 产品（有图形界面），挨个添加机器，点点鼠标，自动初始化环境。现在一次初始化十几台机器也不是问题。</p>
<p>OAT 怎么部署？<br>OAT 为了适应各种客户环境，选择了 docker 技术，只要启动一个 docker 容器就可以用。</p>
<p>初始化机器环境只是 OAT 基本功能，还可以自动化部署 OCP、OMS、ODC 等产品。这些产品都提供 docker 镜像，都以容器形式运行。就不怕用户环境的千差万别了。</p>
<p>早期没有 OAT，则在命令行下用 OB 提供的软件自动化部署 OCP 容器。</p>
<!-- more -->

<h3 id="关于-OCP"><a href="#关于-OCP" class="headerlink" title="关于 OCP"></a>关于 OCP</h3><ul>
<li>OCP 以集群形式运行，有高可用和负载均衡能力。所以生产环境建议 OCP 有3台服务器。机器预算有限的客户，可以选择用1台服务器部署 OCP。缺点就是没有高可用。</li>
<li>每个 OCP 服务器会有三个 docker 容器，分别对应：OCP 应用、OBPROXY 容器和 OB 元数据库容器。这个 OBPROXY 是给 OCP 自己用的，OB 元数据库容器是给 OCP 用的，不给业务用。不过有时候也给 OMS 和 ODC 存放元数据用。</li>
<li>元数据库是 OB，所以高可用需要 3 台服务器。</li>
<li>OCP 访问 元数据库 OB 是通过 OBPROXY 容器。当有三台的时候，需要对多个 OBPROXY 提供一个 VIP 或者域名 进行负载均衡和高可用。同理，多个 OCP 容器也许要这么一个 VIP 或者 域名。</li>
<li>OCP 集群可以部署在一个机房，也可以部署在三个机房，哪怕其中一个机房是异地的也行。</li>
<li>OCP 集群还可以有备集群，主要用在双机房部署需求里，以及两地三中心里异地机房单独部署用。</li>
</ul>
<h3 id="关于-OB"><a href="#关于-OB" class="headerlink" title="关于 OB"></a>关于 OB</h3><ul>
<li>OB 是一个单进程的软件，进程名：<code>observer</code> 。生产环境每个 OB 机器数就一个进程。所以说 OB 集群机器的角色地位都是平等的。</li>
<li>OB 每个进程监听2个端口：默认是 2881 和 2882 ，可以指定。开发测试学习 OB 如果只有一台服务器，可以在单机上启动多个 OB 进程（监听不同端口）来搭建一个 OB 集群。</li>
<li>生产环境 OB 都是3台机器起步，推荐三副本（数据有三份）。也有的会选择五副本。副本数越多，抵抗故障风险的能力越强。</li>
</ul>
<p>大部分客户案例里，OB 集群的机器数是 3 或 5 的倍数。有的人会觉得客户比较浪费机器。这个却未必，因为 OB 还有多租户和多活的能力。</p>
<h3 id="多租户"><a href="#多租户" class="headerlink" title="多租户"></a>多租户</h3><p>OB 以集群形态部署，提供多租户（多实例）能力给不同业务用。</p>
<p>首先看看 OB的多实例示意图。</p>
<p><img src="/images/16275509356582.jpg"></p>
<ul>
<li>重申：每个节点只有一个 OB 进程。OB 的实例不是独立的进程，是 OB 进程内部的线程集。</li>
<li>多实例指的是：实例1、实例2和实例3。对于每个实例，在三台机器上都有数据，属于一个实例，不是三个实例。所以业务只有一个连接字符串。为了便于理解，示意图看起来像是三个实例，实际同名的就表示一个实例。物理形态是三个 OB 进程内部的线程集。</li>
<li>每个实例的三份数据可以简单理解为一个主两个备。主会向备同步数据。默认只有实例的主被访问到（提供读写服务）。</li>
</ul>
<p>如果是上面这个部署图，那是给人感觉有点浪费机器。但是 OB 很灵活，它还可以是下面这种部署形态。</p>
<p><img src="/images/16275511037010.jpg"></p>
<ul>
<li>OB 可以在线调整实例的主在哪个区域（ZONE）的机器上。这个就对应了传统的主备切换了。OB 里是在线做，不停机，业务影响很小，甚至不感知。</li>
<li>当所有机器上都有实例的主的时候，这台机器就不空闲了，也就不浪费了。</li>
</ul>
<p>如果只是上面这种还好理解。实际上 OB 的灵活性远不止这些。还可以下面这种部署形态。</p>
<p><img src="/images/16275514123097.jpg"></p>
<p>每个实例 1 的三份数据都是主，彼此双向同步。有人说，这怎么可能？<br>OB 确实可以这样，这里的奥秘就在于 OB 里主备的粒度很细，可以到表级别（实际更细到表的分区）。</p>
<p><img src="/images/16275518612311.jpg"></p>
<ul>
<li>分区表是多分区，如表 T1 ，有 2 个分区：分区 1 和分区 2 。</li>
<li>普通的表是单分区，只有一个分区。如 T2 。</li>
<li>每个分区在实例里（或者在集群里）都有三份数据，这个就是三副本。角色：1 个主副本 2个 备副本。</li>
<li>默认情况下只有主副本提供读写服务，备副本不提供服务。特殊情况下有需要的话，备副本也可以提供只读服务，主要是读写分离考虑。</li>
</ul>
<p><strong>当机器上有主副本的时候，就可以认为实例在这台机器上也提供服务了。自然，这个机器也不会空闲。</strong> 这就是 OB 的多活能力。</p>
<p>OB 的多租户使得机器资源使用粒度更精细，OB 的多活能力使得机器利用率更高，所以当业务体量有一定规模时，OB 可以用更少的机器满足业务需求。</p>
<p>所以，你还认为 OB 浪费机器吗？</p>
<p>如果你还是这么认为，那 OB 还有更超出你想象的部署形态。<br>在那之前，先看看 OB 扩展后的形态。</p>
<h2 id="扩容后的-OB-部署形态"><a href="#扩容后的-OB-部署形态" class="headerlink" title="扩容后的 OB 部署形态"></a>扩容后的 OB 部署形态</h2><p>假设现在 OB 集群 从 1-1-1 扩容到 2-2-2 。可以变成下面这个形态。</p>
<p><img src="/images/16276125524371.jpg"></p>
<p>或者是下面这个形态</p>
<p><img src="/images/16276124932514.jpg"></p>
<p>或者是下面这个形态</p>
<p><img src="/images/16276125155522.jpg"></p>
<p>纵向看，每2台机器是一个 Zone。OB 实例可以控制主副本在哪个 ZONE 或者在哪几个 ZONE。所有实例的主副本都在一个 Zone，就是单机房提供服务，其他两个机房都是备机房。所有实例的主副本都在两个 Zone，那就是双活模式。所有实例的主副本分散在所有 Zone，那就是多活模式。</p>
<p>上面图更突出 OB 灵活性的是 实例 1 和 实例 2 都只用了 3台机器的资源，实例 3 用了6台机器的资源。实例 3依然是3副本，只不过每份数据分布在2台服务器上。<br>这些可以在线变换，这就是 OB 集群和租户的在线弹性伸缩能力。用户只需要改变策略，数据迁移是 OB 内部事情。</p>
<h2 id="资源异构的部署形态"><a href="#资源异构的部署形态" class="headerlink" title="资源异构的部署形态"></a>资源异构的部署形态</h2><p>标准部署形态中，OB 集群三台机器资源都是对等的，每个 Zone 机器数量一样。每个实例在三个 Zone 里的资源大小也基本保持一致。这是最佳实践建议。但是技术上，为了满足一些客户项目机器预算有限，OB 是可以接受三个Zone 资源异构。</p>
<p>OB 的分区副本有多种类型：</p>
<ul>
<li>全功能副本（FULL）：包含数据和事务日志，参与高可用投票（选举），可以候选为主副本。</li>
<li>数据副本（DATA）：只包含数据，不存储事务日志，不参与高可用投票（选举）。仅用于测试验证，生产环境没有用过。</li>
<li>日志副本（LOGONLY)：只包含事务日志，参与高可用投票（选举），但是不会当选为主副本（因为没有数据）。日志副本不能转换为其他副本类型。</li>
<li>只读副本（READONLY)：包含数据和事务日志，不参与高可用投票（选举），不可以候选为主副本。只能读不能写，用于读写分离场景。可以在线来回转换为全功能副本。</li>
</ul>
<p><img src="/images/16276126484769.jpg"></p>
<h3 id="日志副本"><a href="#日志副本" class="headerlink" title="日志副本"></a>日志副本</h3><p>日志副本不包含数据，使得可以节省磁盘空间。CPU和内存方面也可以适当减少（内存不能太小，不要低于8G）。<strong>日志副本的内存大小会限制整个实例能创建的分区数量，所以不要太小。</strong>日志副本的特性，使得下面这种部署形态也是可以的。图中矩形框的大小可以理解为资源的大小（资源就是CPU、内存和空间）。</p>
<p><img src="/images/16276145261791.jpg"></p>
<p>架构说明：</p>
<ul>
<li>ZONE1 和 ZONE2 中实例的数据副本都是全功能副本，ZONE3 中实例的数据副本都是日志副本。</li>
<li>日志副本的资源可以少一些。最少不要低于2C8G（尤其是内存8G）。内存大小还要考虑实例里的分区数目。</li>
<li>这里使用日志副本，通过适当的排列，可以实现每个实例提供服务的副本可以使用更多的机器资源。</li>
</ul>
<p>上面这种用法只是进一步提升了机器资源利用率，并没有明显减少机器，下面这种玩法就更高级了。<br><img src="/images/16276446515060.jpg"></p>
<p>架构说明：</p>
<ul>
<li>ZONE1 和 ZONE2 分别是 2 台服务器，ZONE3 分别是 1 台服务器。集群的架构简称为 2-2-1 。</li>
<li>ZONE1 和 ZONE2 中实例的数据副本都是全功能副本，ZONE3 中实例的数据副本都是日志副本。</li>
<li>实际运用的时候也可以 3-3-1 。但是要看看这个 1 的机器资源大小。尤其是 内存大小。当租户很多的时候，每个日志副本内存至少8G，ZONE3 的1台机器承载的实例数量也是有限的。所以 4-4-1 可能很危险，但可以 4-4-2 。资源是关键。</li>
</ul>
<p>比如说下面这个就是一个业务场景的资源布局图。<br><img src="/images/16276373898734.jpg"></p>
<p>架构说明：</p>
<ul>
<li>集群机器 5 台，其中 2 台机器的 CPU 要少一些。集群架构 2-2-1 ， Zone1 使用了日志副本。</li>
<li>不同实例都设置一个 PRIMARY_ZONE ，控制主副本的位置，以及备用备副本的位置。</li>
<li>资源大小：主副本 &gt; 备副本 &gt;&gt; 日志副本。 不同租户的主副本、备副本和日志副本交叉部署，让提供服务的主副本资源能力最大化。</li>
<li>实例的资源大小、实例的副本分布位置（机器），都是可以在OCP 中在线调整，操作非常方便。涉及到的数据迁移是 OB 内部事情，不需要 DBA 手动操作。并且迁移期间，业务读写不停。也不怕机器故障（有高可用）。</li>
</ul>
<h3 id="只读副本"><a href="#只读副本" class="headerlink" title="只读副本"></a>只读副本</h3><p>默认情况下 OB 的三副本只有主副本提供读写服务，备副本不提供服务。但是通过 OBPROXY的会话设置或者 SQL语句设置，业务也可以读备副本。这就是读写分离。<br>不过由于 OB 特殊的多实例能力，以及多活，这种读备副本的读写分离意义不是特别大。如果是大量的读写分离需求，建议部署只读副本。</p>
<p><img src="/images/16277023370498.jpg"></p>
<p>架构说明：</p>
<ul>
<li>ZONE4 的机器里部署的是只读副本，机器数可以跟其他 ZONE 不同，可以在线调整。</li>
<li>只读副本的建立是按实例配置的，实例只读副本的资源也是可以独立设置的（根据需要在线调整）。每个实例可以配置 1 个或多个 只读副本（2个只读副本就要2台机器）。这个主要看都承担的压力。</li>
<li>只读副本只承担读服务，不能接受写请求。实际上写请求不会路由到只读副本上。关于路由以后再单独介绍。</li>
</ul>
<p>只读副本的数据是从主副本同步过来的，理论上会有延时，但是数据绝对不会错。只读副本自身故障后恢复时，数据同步可以自动恢复，不需要 DBA 介入处理数据同步。只读副本也可以在线重建。所以说 OB 的运维是非常方便的，只有体验过一次的人才能理解。</p>
<p>除了资源异构，OB 还有很多种混和部署方案。</p>
<h2 id="混合部署方案"><a href="#混合部署方案" class="headerlink" title="混合部署方案"></a>混合部署方案</h2><h3 id="国产化方案"><a href="#国产化方案" class="headerlink" title="国产化方案"></a>国产化方案</h3><p>OB 集群支持国产化产品：</p>
<ul>
<li>服务器：华为泰山</li>
<li>CPU： 鲲鹏 920、海光 XC的CPU （5280 和 7280）、飞腾2000 。</li>
<li>OS ：麒麟系统（中标V7/银河V10，后合并了)、统信 UOS 。</li>
</ul>
<p>OB 集群可以全部部署在国产化服务器上并使用国产操作系统。外部有代表性的客户案例有宇宙行的对公理财业务。</p>
<p>当然有些客户可能对国产服务器和软件还有些担心。OB 也支持下面这些混搭方案。</p>
<ul>
<li>主集群是 x86_64 + redhat/centos , 备集群是 aarch_64 + 麒麟 OS 。代表案例是某头部寿险业务。</li>
<li>主集群的多数派 Zone 是 x86_64 + redhat/centos，少数派 Zone 是 aarch_64 + 麒麟 OS 。并且可以逐步用国产服务器替换商用服务器。代表案例是支付宝某核心业务（集群规模大，早期基于性能考虑没有全部替换）。</li>
</ul>
<h3 id="混合云部署方案"><a href="#混合云部署方案" class="headerlink" title="混合云部署方案"></a>混合云部署方案</h3><p>主要适合有专有云和自有机房的客户。可以在专有云和自由机房之间部署一个 OB 集群，或者 OB 主备集群。 OB 本质是一个软件，可以部署在物理机、ECS上，只要网络通并且延时和带宽满足要求即可。<br>使用主备集群方案时，可以将备集群放到云上 或者 线下，实现云上和云下的容灾。</p>
<h3 id="多云部署方案"><a href="#多云部署方案" class="headerlink" title="多云部署方案"></a>多云部署方案</h3><p>主要适合在多个云厂商有 ECS 并自建数据库的客户。只要打通两边云厂商的 VPC 网络，横跨两个云厂商的ECS部署一个 OB 集群。建议5副本，实现跨云的多活能力。</p>
<h2 id="OB-的容灾多活部署方案"><a href="#OB-的容灾多活部署方案" class="headerlink" title="OB 的容灾多活部署方案"></a>OB 的容灾多活部署方案</h2><p>OB 产品的特别之处就在于 OB 集群可以跨机房部署，甚至可以跨城市部署。根据实际需求不同也有多种玩法。</p>
<h3 id="两地三中心三副本"><a href="#两地三中心三副本" class="headerlink" title="两地三中心三副本"></a>两地三中心三副本</h3><p><img src="/images/16276155163743.jpg"></p>
<p>架构说明：</p>
<ul>
<li>同城双机房的机器都提供服务，双机房的之间的延时决定了实例的事务提交性能。</li>
<li>当两个城市不是那么远的时候（杭州和上海网络延时 5~ 7ms左右），对于普通的业务，使用三副本就够了。即使有机器故障，业务实例的延时增加也在业务容忍范围内就行。</li>
<li>如果两个城市的延时水平不满足业务性能要求，那就将副本数增加到5副本。副本越多，抵抗风险能力越强。</li>
</ul>
<h3 id="两地三中心五副本"><a href="#两地三中心五副本" class="headerlink" title="两地三中心五副本"></a>两地三中心五副本</h3><p><img src="/images/16276376363680.jpg"></p>
<p>架构说明：</p>
<ul>
<li>总体三个机房：上海两个机房，北京一个机房。 这是某国有大行的理财业务（OB）的机房和OB部署示意图。</li>
<li>上海每个机房里准备两个ZONE，上海两个机房之间是光纤专线，带宽和延时不是问题。双机房的4个ZONE 同时提供服务，这个能力空间很大。</li>
<li>北京机房会有一个 ZONE5，跟上海两机房的四个 ZONE 合起来就是 OB 主集群。上海和北京机房的延时和带宽需要评估，不用像同城双机房之间那么高，但也不能太低。</li>
<li>OB 主集群对每个具体的数据分区，可以抵抗最多两台机器同时故障带来的风险。如果有三台机器故障，局部实例不可用。这个时候就考虑切换到北京机房的 OB 备集群。</li>
<li>OB 备集群是近期 OB 新增的能力，跟 ZONE5 部署一同部署在北京机房。OB 备集群可以是单副本，也可以是三副本，看灾备要求定。也可以先是单副本，后期启用后，在线扩容到三副本（只要机器准备好即可）。OB 集群的每个 ZONE 内机器数量可以跟主集群的ZONE 内机器数量不一致，但是相差不要太大。OB 主备集群同步能力见下面双机房主板容灾方案说明。再次说明，OB 的部署很灵活。</li>
<li>水平拆分方案选择用了 OB 的分区表技术。同一个表的不同分区打散到多个机房多台机器。</li>
<li>这个架构图满足工行数据库容灾等级最高要求。</li>
</ul>
<h3 id="双机房主备容灾方案"><a href="#双机房主备容灾方案" class="headerlink" title="双机房主备容灾方案"></a>双机房主备容灾方案</h3><p>凡事使用 Paxos 或者 Raft 技术的产品，都要求副本数是奇数（偶数副本数没有意义），在机房容灾部署的时候都会要求有三个可用区。但是传统客户，尤其是金融客户，都是同城两机房，异地可能还有个机房，只是那个机房很可能延时大带宽太小，规格不够。实际能用的就是同城双机房。</p>
<p>目前 OB对双机房的部署方案就回归到传统 ORACLE 的 Dataguard 方案。</p>
<p><img src="/images/16276236183782.jpg"></p>
<p>架构说明：</p>
<ul>
<li>双机房，主机房部署 OB 主集群，备机房部署 OB 备集群。备集群可以是单副本，也可以是三副本，取决于容灾要求。</li>
<li>OB 主备集群是两个集群，同步类似 ORACLE 的Dataguard 方案同步，通常是最大性能同步，也支持最大保护（强同步）和最大可用（在最大保护和最大性能之间取平衡）。按 ORACLE 的项目经验，绝大部分客户都用最大性能。推测 OB 的客户也多是如此。</li>
<li>目前 OB 主备集群同步是整个集群里所有实例都同步。未来可能会变化按实例配置同步。</li>
<li>OB 主备集群的切换支持正常的切换（<code>switchover</code>）和故障切换（<code>failover</code>）。在最大性能同步的时候，故障切换是不能保证不丢数据（<code>RPO&gt;=0</code>)。这个跟传统ORACLE DG的能力是一致。</li>
</ul>
<p>OB 主备集群双机房方案跟传统主备方案的能力和特点一样。缺点也是一样的，就是备集群默认不提供服务，备机房也没有利用上，有点浪费。不过 OB 的备集群也是可以提供只读服务，这也是 OB 读写分离的一种使用方法，分离的更彻底。</p>
<p>如果想利用备机房，OB 的部署架构图还可以调整为下面这种：</p>
<p><img src="/images/16276236270582.jpg"></p>
<p>架构说明：</p>
<ul>
<li>双机房，OB 主集群的部分 Zone （少数派，3副本中的1个副本，5副本中的2个副本）放在机房 2。OB 的多活能力是 OB 所有的机器都有同时写入能力。</li>
<li>不过，实例事务提交性能取决于多数派副本的事务日志同步能力和日志写能力。机房 2 的性能会比机房 1 的性能会慢一些（具体慢多少取决于双机房之间的网络延时和带宽）。此外，可能还会有分布式事务。</li>
<li>有些业务是能接受这种性能，那么就可以将主副本打散到双机房。上图是 实例 1 和实例 2 在机房 1 和 2 同时提供读写服务。实例3 不接受这种性能损失，那就不在备机房提供读写服务。</li>
<li>这个方案的特点是实现了双活，同时也解决了 OB主集群多数派故障时的可用性问题（故障切换到备集群）。备集群图中是单副本，启用后需要更高可用性的话，也可以在线扩容到三副本（前提是有机器）。</li>
</ul>
<h3 id="单元化部署方案"><a href="#单元化部署方案" class="headerlink" title="单元化部署方案"></a>单元化部署方案</h3><p>单元化是多活能力的最高标准，指的是从业务到数据库的链路都发生在某个机房。<br>要实现单元化，必须在应用层面对数据水平拆分，即分库分表（为什么？这个说来话长，这里不细说请看参考资料）。具体是 1 库 1 表或者 1 库多表，看业务特点。也不是所有的业务都能水平拆分。下面仅看能做水平拆分的业务数据的单元化部署架构。</p>
<p><img src="/images/16276296569936.jpg"></p>
<p>架构说明：</p>
<ul>
<li>应用在杭州和上海每个机房都部署，数据库是1套（真实业务是多套）OB集群横跨 5 个机房部署。</li>
<li>实例 1-5 对应的是同一份业务数据，业务数据按用户ID（UID）拆分为5个实例（这里只是<strong>示意图</strong>，蚂蚁内部拆分为百库百表，远不止5个实例，比这个图粒度更细）。</li>
<li>候选主副本指的如果某个ZONE的主副本故障了，会优先切换到同城另外一个机房的备副本上，这样业务层都可以不用切换流量。</li>
<li>单元化架构的关键就是应用请求之间也带有UID信息，应用的流量转发也有水平拆分规则。应用流量的水平拆分规则跟数据库的水平拆分规则保持一致并联动。</li>
<li>在单元化里，OB 的价值就是在数据库层面解决了数据多机房的强同步和高可用能力。RPO=0，RTO~30s。</li>
</ul>
<p><img src="/images/16276310905281.jpg"></p>
<p>以上是蚂蚁和网商两地三中心五副本单元化的示意架构图，这套架构使用了 SOFA + OB 的多个产品。SOFA &amp; OB 最佳实践已经在多个外部客户落地。</p>
<p>蚂蚁做单元化用了至少5个机房，外部客户不一定有这么多机房。4个机房的也可以玩。下面是某国有大行的银行核心业务之一的近似单元化架构。</p>
<p><img src="/images/16276563498506.jpg"></p>
<p>架构说明：</p>
<ul>
<li>总共有两个城市四个机房，每个城市有两个机房，机房之间光纤专线，延时和带宽都不是问题。</li>
<li>业务数据水平拆分为南北两个集群（实例），每个集群的数据没有进一步水平拆分，而是直接用一个实例，在实例内部用 OB 的水平拆分技术（分区表技术）。同一个表的不同分区打散到多个机房多台机器。</li>
<li>异地机房也做了一个三副本的 OB 备集群。整体容灾能力为最高水平。</li>
<li>OB 的价值：提供跨机房跨城市的数据多副本同步技术（指高可用和强一致）；提供对业务完全透明的原生的水平拆分技术（指分区表技术，详情请看参考资料）。</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>总结一下，不管 OB 是那种部署方案，在一个集群内部，只要故障节点是少数派节点，OB都能提供极致的高可用能力（<code>RPO=0</code>,<code>RTO~30s</code>）。OB集群的各种部署架构和性能测试都是把数据安全放到第一位，没有异步同步或半同步等技术。针对 OB 主备集群，需要认识到主备集群同步跟传统数据库主备同步原理是一样的，不一定能保证故障切换不丢数据（<code>RPO&gt;=0</code>），并且故障切换也是需要手动做的（<code>RTO~分钟级别</code>）。</p>
<p>OB 的部署方案都说到了吗？</p>
<p>还没有，OB 3.2 版本将会推出计算存储分离架构，届时可以针对计算和存储能力分开配置服务器数目，上面部署形态又可以进一步变化。。。</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>OCEANBASE</tag>
        <tag>运维</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/16107/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>mysqldump 重搭备库方法</title>
    <url>/posts/3841/</url>
    <content><![CDATA[<p>本文简单总结如何使用 mysqldump 命令搭建备库。这只是搭建备库的一种方法，另外一种方法是使用 <code>xtrabackup</code> 物理备份恢复。</p>
<span id="more"></span>

<h2 id="当前主库信息"><a href="#当前主库信息" class="headerlink" title="当前主库信息"></a>当前主库信息</h2><p>以下命令在主库和备库上运行。检查主备环境。要求主备环境一致，如果有不一致，可能影响后面结果。请自行判断。</p>
<ul>
<li>是否用了GTID？</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">where</span> variable_name <span class="keyword">in</span> (<span class="string">&#x27;gtid_mode&#x27;</span>,<span class="string">&#x27;gtid_executed&#x27;</span>,<span class="string">&#x27;gtid_purged&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果 <code>gtid_mode</code>的值为ON，则表示使用了GTID；否则，没有开启。<br>根据是否有GTID，选择不同的备库重搭方案。</p>
<ul>
<li>写日志参数 </li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">where</span> variable_name <span class="keyword">in</span> (<span class="string">&#x27;sync_binlog&#x27;</span>,<span class="string">&#x27;innodb_flush_log_at_trx_commit&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name                  <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> innodb_flush_log_at_trx_commit <span class="operator">|</span> <span class="number">1</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sync_binlog                    <span class="operator">|</span> <span class="number">1000</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+-------+</span></span><br></pre></td></tr></table></figure>

<p>2 rows in set (0.00 sec)</p>
<p>记录当前值。</p>
<ul>
<li>判断当前mysql环境</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef|grep mysqld</span><br></pre></td></tr></table></figure>
<p>看mysqld使用的是哪个目录的mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> mysql</span><br><span class="line"><span class="built_in">which</span> mysqldump</span><br></pre></td></tr></table></figure>
<p>看mysql和mysqldump的运行环境，如果跟mysqld不一致，那么使用mysql的完整的目录。防止客户环境有多套mysql环境，互相干扰。</p>
<h2 id="有GTID时搭建方法"><a href="#有GTID时搭建方法" class="headerlink" title="有GTID时搭建方法"></a>有GTID时搭建方法</h2><h3 id="备份主库"><a href="#备份主库" class="headerlink" title="备份主库"></a>备份主库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/u01/mysql/bin/mysqldump --all-databases --single-transaction --set-gtid-purged=ON --triggers --routines --host=127.0.0.1 --port=3306 --user=root  --password=<span class="string">&#x27;密码&#x27;</span> &gt; dbpaas-metadb.sql </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>注：</strong> </p>
<ol>
<li><code>set-gtid-purged</code>值必须为ON，这样导出的sql里会设置<code>GTID_PURGED</code>值，用于自动搭建同步。</li>
</ol>
<h3 id="将备份文件传送到备库"><a href="#将备份文件传送到备库" class="headerlink" title="将备份文件传送到备库"></a>将备份文件传送到备库</h3><p>如果文件很大，压缩；否则，用nc直传。</p>
<ul>
<li>源端（主库）：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">nc -l 8086 &lt; dbpaas-metadb.sql </span><br></pre></td></tr></table></figure>

<p>+目标端（备库）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc 主库IP 8086 &gt; dbpaas-metadb.sql</span><br></pre></td></tr></table></figure>

<h3 id="备库开始导入备份sql"><a href="#备库开始导入备份sql" class="headerlink" title="备库开始导入备份sql"></a>备库开始导入备份sql</h3><ul>
<li>备库导入备份sql之前的准备</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">reset master;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> sync_binlog<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> innodb_flush_log_at_trx_commit<span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong> </p>
<ol>
<li>reset master 是为了重置备库的binlog，让主库上的slave复制自动失败，以避免备库导入的sql到主库上再被同步一次。</li>
<li>修改刷日志参数，是为了提升导入性能。根据导入文件大小，导入时间长短不一，耐心等待。</li>
</ol>
<ul>
<li>备库开始导入备份sql</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h127.1 -uroot -P3306 -p &lt; dbpaas-metadb.sql </span><br><span class="line">输入密码</span><br></pre></td></tr></table></figure>


<h3 id="备库同步启动"><a href="#备库同步启动" class="headerlink" title="备库同步启动"></a>备库同步启动</h3><ul>
<li>备库启动同步</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">reset slave;</span><br><span class="line">CHANGE MASTER <span class="keyword">TO</span> MASTER_AUTO_POSITION<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">start</span> slave;</span><br><span class="line"><span class="keyword">show</span> slave status\G</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong></p>
<ol>
<li>查看slave同步状态，如果报错，根据报错情况处理。这里之所以没有指定<code>MASTER_USER</code>和<code>MASTER_PASSWORD</code>，是因为该slave此前已经设置过了，保存在内存里。如果是无法连接主库，则使用完整的change 语句。如下。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---备用sql，正常不用执行</span></span><br><span class="line">reset slave;</span><br><span class="line">stop slave;</span><br><span class="line">CHANGE MASTER <span class="keyword">TO</span> MASTER_HOST<span class="operator">=</span><span class="string">&#x27;11.164.191.36&#x27;</span>,MASTER_PORT<span class="operator">=</span><span class="number">3306</span>, MASTER_USER<span class="operator">=</span><span class="string">&#x27;复制帐号&#x27;</span>,MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;复制帐号密码&#x27;</span>, MASTER_AUTO_POSITION<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">start</span> slave;</span><br><span class="line"><span class="keyword">show</span> slave status\G</span><br></pre></td></tr></table></figure>

<ul>
<li>等待同步赶上。</li>
</ul>
<p>如正常继续。耐心等待同步赶上</p>
<ul>
<li>修改刷日志参数</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> sync_binlog<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> innodb_flush_log_at_trx_commit<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong></p>
<ol>
<li>日志参数必须改回双1，否则异常宕机时，会导致日志有部分丢失，同步会中断。</li>
</ol>
<ul>
<li>查看备库的Binlog信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> master status;</span><br><span class="line"><span class="operator">|</span> mysql<span class="operator">-</span>bin<span class="number">.000001</span> <span class="operator">|</span> <span class="number">251825466</span> <span class="operator">|</span>              <span class="operator">|</span>                  <span class="operator">|</span>                   <span class="operator">|</span></span><br></pre></td></tr></table></figure>

<p>该信息用于下面修复主库的同步。</p>
<h3 id="修复主库的同步"><a href="#修复主库的同步" class="headerlink" title="修复主库的同步"></a>修复主库的同步</h3><ul>
<li>重新设置主库的复制位点。</li>
</ul>
<p>``sql<br>–源端（主库）<br>stop slave;<br>reset slave;<br>CHANGE MASTER TO MASTER_LOG_FILE=’mysql-bin.000001’, MASTER_LOG_POS=251825466;<br>start slave;<br>show slave status\G</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 无GTID时搭建方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 备份主库</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">mysqldump --all-databases --single-transaction <span class="attribute">--master-data</span>=2 --triggers --routines <span class="attribute">--host</span>=127.0.0.1 <span class="attribute">--port</span>=3306 <span class="attribute">--user</span>=root  <span class="attribute">--password</span>=<span class="string">&#x27;密码&#x27;</span> &gt; dbpaas-metadb.sql </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>注：</strong> </p>
<ol>
<li>master-data=2，导出文件头部会有 CHANGE MASTER语句。</li>
<li>备份期间，主库不能有DDL操作，否则，会彼此阻塞。</li>
<li>备份期间，另开窗口，查看主库会话，看是否有‘锁阻塞’事件发生。 show processlist;</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#head -n 50 dbpaas-metadb.sql |grep &quot;CHANGE MASTER&quot;</span></span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000019&#x27;</span>, MASTER_LOG_POS=146425128;</span><br></pre></td></tr></table></figure>

<p>这个CHANGE MASTER 语句取出来，留作后用。</p>
<h3 id="将备份文件传送到备库-1"><a href="#将备份文件传送到备库-1" class="headerlink" title="将备份文件传送到备库"></a>将备份文件传送到备库</h3><p>如果文件很大，压缩；否则，用nc直传。</p>
<ul>
<li>源端（主库）：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">nc -l 8086 &lt; dbpaas-metadb.sql </span><br></pre></td></tr></table></figure>

<p>+目标端（备库）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc 主库IP 8086 &gt; dbpaas-metadb.sql</span><br></pre></td></tr></table></figure>

<h3 id="备库开始导入备份sql-1"><a href="#备库开始导入备份sql-1" class="headerlink" title="备库开始导入备份sql"></a>备库开始导入备份sql</h3><ul>
<li>备库导入备份sql之前的准备</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">reset master;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> sync_binlog<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> innodb_flush_log_at_trx_commit<span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong> </p>
<ol>
<li>reset master 是为了重置备库的binlog，让主库上的slave复制自动失败，以避免备库导入的sql到主库上再被同步一次。</li>
<li>修改刷日志参数，是为了提升导入性能。根据导入文件大小，导入时间长短不一，耐心等待。</li>
</ol>
<ul>
<li>备库开始导入备份sql</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h127.1 -uroot -P3306 -p &lt; dbpaas-metadb.sql </span><br><span class="line">输入密码</span><br></pre></td></tr></table></figure>

<h3 id="备库开始修复同步"><a href="#备库开始修复同步" class="headerlink" title="备库开始修复同步"></a>备库开始修复同步</h3><p>前面从备份sql里取出了CHANGE MASTER语句，用在这里。</p>
<ul>
<li>重新设置同步位点。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">reset slave;</span><br><span class="line">CHANGE MASTER <span class="keyword">TO</span> MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;mysql-bin.000019&#x27;</span>, MASTER_LOG_POS<span class="operator">=</span><span class="number">146425128</span>;</span><br><span class="line"><span class="keyword">start</span> slave;</span><br><span class="line"><span class="keyword">show</span> slave status\G</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong></p>
<ol>
<li>上面的<code>MASTER_LOG_FILE</code>和<code>MASTER_LOG_POS</code>的值，以实际为准。</li>
<li>查看slave同步状态，如果报错，根据报错情况处理。这里之所以没有指定<code>MASTER_USER</code>和<code>MASTER_PASSWORD</code>，是因为该slave此前已经设置过了，保存在内存里。如果是无法连接主库，则使用完整的change 语句。如下。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---备用sql，正常不用执行</span></span><br><span class="line">reset slave;</span><br><span class="line">stop slave;</span><br><span class="line">CHANGE MASTER <span class="keyword">TO</span> MASTER_HOST<span class="operator">=</span><span class="string">&#x27;11.164.191.36&#x27;</span>,MASTER_PORT<span class="operator">=</span><span class="number">3306</span>, MASTER_USER<span class="operator">=</span><span class="string">&#x27;复制帐号&#x27;</span>,MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;复制帐号密码&#x27;</span>, MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;mysql-bin.000009&#x27;</span>, MASTER_LOG_POS<span class="operator">=</span><span class="number">394974494</span>;</span><br><span class="line"><span class="keyword">start</span> slave;</span><br><span class="line"><span class="keyword">show</span> slave status\G</span><br></pre></td></tr></table></figure>

<ul>
<li>等待同步赶上。</li>
</ul>
<p>如正常继续。耐心等待同步赶上</p>
<ul>
<li>修改刷日志参数</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> sync_binlog<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> innodb_flush_log_at_trx_commit<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong></p>
<ol>
<li>日志参数必须改回双1，否则异常宕机时，会导致日志有部分丢失，同步会中断。</li>
</ol>
<ul>
<li>查看备库的Binlog信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> master status;</span><br><span class="line"><span class="operator">|</span> mysql<span class="operator">-</span>bin<span class="number">.000001</span> <span class="operator">|</span> <span class="number">251825466</span> <span class="operator">|</span>              <span class="operator">|</span>                  <span class="operator">|</span>                   <span class="operator">|</span></span><br></pre></td></tr></table></figure>

<p>该信息用于下面修复主库的同步。</p>
<h3 id="修复主库的同步-1"><a href="#修复主库的同步-1" class="headerlink" title="修复主库的同步"></a>修复主库的同步</h3><ul>
<li>重新设置主库的复制位点。</li>
</ul>
<p>``sql<br>–源端（主库）<br>stop slave;<br>reset slave;<br>CHANGE MASTER TO MASTER_LOG_FILE=’mysql-bin.000001’, MASTER_LOG_POS=251825466;<br>start slave;<br>show slave status\G</p>
<pre><code>

</code></pre>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>MYSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>三步体验 OceanBase 社区版</title>
    <url>//ob-docker/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文是个人基于 OceanBase 社区版构建了一个容器镜像，仅用于学习研究。只要你有一个 4C10G的笔记本可以联网，你就可以在5分钟内将 OceanBase 社区版跑起来。</p>
<span id="more"></span>

<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>请确保宿主机的可用资源满足下面要求：</p>
<ul>
<li>逻辑 CPU 不少于4个</li>
<li>可用内存不少于 10G，并且 docker 容器内存限制不少于10G</li>
<li>空间不少于10G</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>笔记本需要安装 Docker，并且在 Docker 的设置里将容器使用的内存上限调整到 10 G 。下面是 Mac 版本的 Docker 容器设置。</p>
<p><img src="/images/16301420583501.jpg"></p>
<h3 id="下载镜像和启动容器"><a href="#下载镜像和启动容器" class="headerlink" title="下载镜像和启动容器"></a>下载镜像和启动容器</h3><p>下载镜像，文件大概 2.3G 不到。具体时间取决于连接 <code>https://hub.docker.com/repository/docker/obpilot/oceanbase-ce</code> 网站的网速。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull obpilot/oceanbase-ce:latest</span><br><span class="line"></span><br><span class="line">docker images</span><br><span class="line">REPOSITORY                                            TAG                     IMAGE ID            CREATED             SIZE</span><br><span class="line">obpilot/oceanbase-ce                                  latest                  0017baaa9d87        23 minutes ago      2.24GB</span><br><span class="line"></span><br><span class="line">docker run -itd -m 10G --name oceanbase-ce  obpilot/oceanbase-ce:latest</span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line">CONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS              PORTS                                                                     NAMES</span><br><span class="line">e5dd6da0aa8d        obpilot/oceanbase-ce:latest   <span class="string">&quot;/bin/bash&quot;</span>              40 minutes ago      Up 40 minutes                                                                                 oceanbase-ce</span><br></pre></td></tr></table></figure>

<p>启动容器的时候，可选的是如果有独立盘目录 <code>/data</code>，可以加上 <code>-v /data:/data </code> 参数。</p>
<!-- more -->

<h3 id="登录容器，启动-OB-集群"><a href="#登录容器，启动-OB-集群" class="headerlink" title="登录容器，启动 OB 集群"></a>登录容器，启动 OB 集群</h3><p>容器内已经部署了 OB 社区版自动化部署工具 OBD 。使用 OBD 启动集群，第一次会初始化集群，时间需要2-3分钟（取决于宿主机性能）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it oceanbase-ce bash</span><br><span class="line"></span><br><span class="line">obd cluster list</span><br><span class="line"></span><br><span class="line">obd cluster start obdemo</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面是启动输出。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[admin@e5dd6da0aa8d ~]$ obd cluster list</span><br><span class="line">+------------------------------------------------------------+</span><br><span class="line">|                        Cluster List                        |</span><br><span class="line">+--------+---------------------------------+-----------------+</span><br><span class="line">| Name   | Configuration Path              | Status (Cached) |</span><br><span class="line">+--------+---------------------------------+-----------------+</span><br><span class="line">| obdemo | /home/admin/.obd/cluster/obdemo | deployed        |</span><br><span class="line">+--------+---------------------------------+-----------------+</span><br><span class="line">[admin@e5dd6da0aa8d ~]$ obd cluster start obdemo</span><br><span class="line">Get <span class="built_in">local</span> repositories and plugins ok</span><br><span class="line">Open ssh connection ok</span><br><span class="line">Cluster param config check ok</span><br><span class="line">Check before start observer ok</span><br><span class="line">Check before start obproxy ok</span><br><span class="line">Start observer ok</span><br><span class="line">observer program health check ok</span><br><span class="line">Connect to observer ok</span><br><span class="line">Initialize cluster</span><br><span class="line">Cluster bootstrap ok</span><br><span class="line">Wait <span class="keyword">for</span> observer init ok</span><br><span class="line">+---------------------------------------------+</span><br><span class="line">|                   observer                  |</span><br><span class="line">+-----------+---------+------+-------+--------+</span><br><span class="line">| ip        | version | port | zone  | status |</span><br><span class="line">+-----------+---------+------+-------+--------+</span><br><span class="line">| 127.0.0.1 | 3.1.0   | 2881 | zone1 | active |</span><br><span class="line">+-----------+---------+------+-------+--------+</span><br><span class="line"></span><br><span class="line">Start obproxy ok</span><br><span class="line">obproxy program health check ok</span><br><span class="line">Connect to obproxy ok</span><br><span class="line">Initialize cluster</span><br><span class="line">+---------------------------------------------+</span><br><span class="line">|                   obproxy                   |</span><br><span class="line">+-----------+------+-----------------+--------+</span><br><span class="line">| ip        | port | prometheus_port | status |</span><br><span class="line">+-----------+------+-----------------+--------+</span><br><span class="line">| 127.0.0.1 | 2883 | 2884            | active |</span><br><span class="line">+-----------+------+-----------------+--------+</span><br><span class="line">obdemo running</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>admin 用户的密码是 : <code>adminPWD123</code> . 您可以使用 sudo yum 安装软件包。</p>
<h3 id="创建-OB-实例（租户）"><a href="#创建-OB-实例（租户）" class="headerlink" title="创建 OB 实例（租户）"></a>创建 OB 实例（租户）</h3><p>默认初始化的 OB 集群还没有创建业务实例。需要手动建一个。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">obclient -h127.1 -uroot@sys<span class="comment">#obdemo -P2883 -prootPWD123 -c -A oceanbase</span></span><br><span class="line"></span><br><span class="line">alter resource unit sys_unit_config min_cpu=5;</span><br><span class="line">-- 创建资源单元规格</span><br><span class="line">CREATE resource unit S4C1G max_cpu=4, min_cpu=4, max_memory=<span class="string">&#x27;1G&#x27;</span>, min_memory=<span class="string">&#x27;1G&#x27;</span>, max_iops=10000, min_iops=1000, max_session_num=1000000, max_disk_size=<span class="string">&#x27;1024G&#x27;</span>; </span><br><span class="line"></span><br><span class="line">-- 创建资源池（分配资源）</span><br><span class="line">CREATE resource pool my_pool unit = <span class="string">&#x27;S4C1G&#x27;</span>, unit_num = 1;</span><br><span class="line"></span><br><span class="line">-- 创建实例（mysql类型）</span><br><span class="line">create tenant obmysql resource_pool_list=(<span class="string">&#x27;my_pool&#x27;</span>), primary_zone=<span class="string">&#x27;RANDOM&#x27;</span>,comment <span class="string">&#x27;mysql tenant/instance&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span> <span class="built_in">set</span> ob_tcp_invited_nodes=<span class="string">&#x27;%&#x27;</span>, ob_compatibility_mode=<span class="string">&#x27;mysql&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure>

<h3 id="登录使用-OB-实例"><a href="#登录使用-OB-实例" class="headerlink" title="登录使用 OB 实例"></a>登录使用 OB 实例</h3><p>默认创建的 OB 实例，连接密码是空。 登录后可以导入 bmsql.sql 中的建库建表语句。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">obclient -h 127.1 -uroot@obmysql<span class="comment">#obdemo -P2883 -p -c -A test</span></span><br><span class="line"></span><br><span class="line">empty password.</span><br><span class="line"></span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> bmsql.sql</span><br></pre></td></tr></table></figure>

<p>成功后，输出</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL [tpccdb]<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_tpccdb <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> bmsql_config     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> bmsql_customer   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> bmsql_district   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> bmsql_history    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> bmsql_item       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> bmsql_new_order  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> bmsql_oorder     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> bmsql_order_line <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> bmsql_stock      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> bmsql_warehouse  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.003</span> sec)</span><br><span class="line"></span><br><span class="line">MySQL [tpccdb]<span class="operator">&gt;</span> <span class="keyword">show</span> tablegroups;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+------------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> Tablegroup_name <span class="operator">|</span> Table_name       <span class="operator">|</span> Database_name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+------------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> oceanbase       <span class="operator">|</span> <span class="keyword">NULL</span>             <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tpcc_group      <span class="operator">|</span> bmsql_customer   <span class="operator">|</span> tpccdb        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tpcc_group      <span class="operator">|</span> bmsql_district   <span class="operator">|</span> tpccdb        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tpcc_group      <span class="operator">|</span> bmsql_history    <span class="operator">|</span> tpccdb        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tpcc_group      <span class="operator">|</span> bmsql_new_order  <span class="operator">|</span> tpccdb        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tpcc_group      <span class="operator">|</span> bmsql_oorder     <span class="operator">|</span> tpccdb        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tpcc_group      <span class="operator">|</span> bmsql_order_line <span class="operator">|</span> tpccdb        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tpcc_group      <span class="operator">|</span> bmsql_stock      <span class="operator">|</span> tpccdb        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tpcc_group      <span class="operator">|</span> bmsql_warehouse  <span class="operator">|</span> tpccdb        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+------------------+---------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.008</span> sec)</span><br></pre></td></tr></table></figure>

<h2 id="附录1：Docker-镜像制作方法"><a href="#附录1：Docker-镜像制作方法" class="headerlink" title="附录1：Docker 镜像制作方法"></a>附录1：Docker 镜像制作方法</h2><p>第一次使用 Dockerfile 构建镜像，还不是很娴熟，功能做的比较粗糙。下面是 Dockerfile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat Dockerfile</span><br><span class="line"></span><br><span class="line">FROM centos:latest</span><br><span class="line">MAINTAINER obpilot</span><br><span class="line">COPY ./obdemo.yaml /tmp/</span><br><span class="line"></span><br><span class="line">VOLUME [<span class="string">&quot;/data&quot;</span>]</span><br><span class="line"></span><br><span class="line">RUN yum -y install tree net-tools vim sudo passwd \</span><br><span class="line">	&amp;&amp; yum -y install mariadb-connector-c \</span><br><span class="line">	&amp;&amp; yum install -y yum-utils \</span><br><span class="line">	&amp;&amp; yum-config-manager --add-repo https://mirrors.aliyun.com/oceanbase/OceanBase.repo \</span><br><span class="line">	&amp;&amp; yum install -y ob-deploy obclient \</span><br><span class="line">	&amp;&amp; useradd admin &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;admin:adminPWD123&#x27;</span> | chpasswd \</span><br><span class="line">	&amp;&amp; sed -i <span class="string">&#x27;$a\admin    ALL=(ALL)	ALL&#x27;</span> /etc/sudoers \</span><br><span class="line">	&amp;&amp; mkdir -p /data/1 /data/log1  \</span><br><span class="line">	&amp;&amp; chown -R admin.admin /data/ /tmp/ \</span><br><span class="line">	&amp;&amp; su admin -c  <span class="string">&quot;obd cluster deploy obdemo -c /tmp/obdemo.yaml&quot;</span></span><br><span class="line"></span><br><span class="line">USER admin</span><br><span class="line">WORKDIR /home/admin</span><br><span class="line">COPY ./bmsql.sql /home/admin/</span><br><span class="line">COPY ./readme.md /home/admin/</span><br></pre></td></tr></table></figure>

<h2 id="附录2-OBD-集群初始化配置文件"><a href="#附录2-OBD-集群初始化配置文件" class="headerlink" title="附录2: OBD 集群初始化配置文件"></a>附录2: OBD 集群初始化配置文件</h2><p>OBD 是 OB 社区版推出的自动化部署工具，现在功能也越来越成熟好用了。开源网站（<code>https://github.com/oceanbase/obdeploy/tree/master/example</code>）提供了几个配置模板文件。这里是修改后的配置文件。部署的是单机版 OB，监听本地 IP。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Only need to configure when remote login is required</span></span><br><span class="line"><span class="comment"># user:</span></span><br><span class="line"><span class="comment">#   username: your username</span></span><br><span class="line"><span class="comment">#   password: your password if need</span></span><br><span class="line"><span class="comment">#   key_file: your ssh-key file path if need</span></span><br><span class="line"><span class="comment">#   port: your ssh port, default 22</span></span><br><span class="line"><span class="comment">#   timeout: ssh connection timeout (second), default 30</span></span><br><span class="line"><span class="attr">oceanbase-ce:</span></span><br><span class="line">  <span class="attr">servers:</span></span><br><span class="line">    <span class="comment"># Please don&#x27;t use hostname, only IP can be supported</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="comment">#  The working directory for OceanBase Database. OceanBase Database is started under this directory. This is a required field.</span></span><br><span class="line">    <span class="attr">home_path:</span> <span class="string">/home/admin/oceanbase-ce</span></span><br><span class="line">    <span class="comment"># The directory for data storage. The default value is $home_path/store.</span></span><br><span class="line">    <span class="comment"># data_dir: /data/1</span></span><br><span class="line">    <span class="comment"># The directory for clog, ilog, and slog. The default value is the same as the data_dir value.</span></span><br><span class="line">    <span class="attr">redo_dir:</span> <span class="string">/data/log1</span></span><br><span class="line">    <span class="comment"># Please set devname as the network adaptor&#x27;s name whose ip is  in the setting of severs.</span></span><br><span class="line">    <span class="comment"># if set severs as &quot;127.0.0.1&quot;, please set devname as &quot;lo&quot;</span></span><br><span class="line">    <span class="comment"># if current ip is 192.168.1.10, and the ip&#x27;s network adaptor&#x27;s name is &quot;eth0&quot;, please use &quot;eth0&quot;</span></span><br><span class="line">    <span class="attr">devname:</span> <span class="string">lo</span></span><br><span class="line">    <span class="attr">mysql_port:</span> <span class="number">2881</span> <span class="comment"># External port for OceanBase Database. The default value is 2881.</span></span><br><span class="line">    <span class="attr">rpc_port:</span> <span class="number">2882</span> <span class="comment"># Internal port for OceanBase Database. The default value is 2882.</span></span><br><span class="line">    <span class="attr">zone:</span> <span class="string">zone1</span></span><br><span class="line">    <span class="attr">cluster_id:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># please set memory limit to a suitable value which is matching resource.</span></span><br><span class="line">    <span class="attr">memory_limit:</span> <span class="string">8G</span> <span class="comment"># The maximum running memory for an observer</span></span><br><span class="line">    <span class="attr">system_memory:</span> <span class="string">4G</span> <span class="comment"># The reserved system memory. system_memory is reserved for general tenants. The default value is 30G.</span></span><br><span class="line">    <span class="attr">stack_size:</span> <span class="string">512K</span></span><br><span class="line">    <span class="attr">cpu_count:</span> <span class="number">16</span></span><br><span class="line">    <span class="attr">cache_wash_threshold:</span> <span class="string">1G</span></span><br><span class="line">    <span class="attr">__min_full_resource_pool_memory:</span> <span class="number">268435456</span></span><br><span class="line">    <span class="attr">workers_per_cpu_quota:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">schema_history_expire_time:</span> <span class="string">1d</span></span><br><span class="line">    <span class="comment"># The value of net_thread_count had better be same as cpu&#x27;s core number.</span></span><br><span class="line">    <span class="attr">net_thread_count:</span> <span class="number">4</span></span><br><span class="line">    <span class="attr">major_freeze_duty_time:</span> <span class="string">Disable</span></span><br><span class="line">    <span class="attr">minor_freeze_times:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">enable_separate_sys_clog:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">enable_merge_by_turn:</span> <span class="literal">FALSE</span></span><br><span class="line">    <span class="comment">#datafile_disk_percentage: 20 # The percentage of the data_dir space to the total disk space. This value takes effect only when datafile_size is 0. The default value is 90.</span></span><br><span class="line">    <span class="attr">datafile_size:</span> <span class="string">5G</span></span><br><span class="line">    <span class="attr">syslog_level:</span> <span class="string">ERROR</span> <span class="comment"># System log level. The default value is INFO.</span></span><br><span class="line">    <span class="attr">enable_syslog_wf:</span> <span class="literal">false</span> <span class="comment"># Print system logs whose levels are higher than WARNING to a separate log file. The default value is true.</span></span><br><span class="line">    <span class="attr">enable_syslog_recycle:</span> <span class="literal">true</span> <span class="comment"># Enable auto system log recycling or not. The default value is false.</span></span><br><span class="line">    <span class="attr">max_syslog_file_count:</span> <span class="number">4</span> <span class="comment"># The maximum number of reserved log files before enabling auto recycling. The default value is 0.</span></span><br><span class="line">    <span class="comment"># observer cluster name, consistent with obproxy&#x27;s cluster_name</span></span><br><span class="line">    <span class="attr">appname:</span> <span class="string">obdemo</span></span><br><span class="line">    <span class="attr">root_password:</span> <span class="string">rootPWD123</span> <span class="comment"># root user password, can be empty</span></span><br><span class="line">    <span class="attr">proxyro_password:</span>  <span class="string">proxyROPWD123</span> <span class="comment"># proxyro user pasword, consistent with obproxy&#x27;s observer_sys_password, can be empty</span></span><br><span class="line"><span class="attr">obproxy:</span></span><br><span class="line">  <span class="attr">servers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">listen_port:</span> <span class="number">2883</span> <span class="comment"># External port. The default value is 2883.</span></span><br><span class="line">    <span class="attr">prometheus_listen_port:</span> <span class="number">2884</span> <span class="comment"># The Prometheus port. The default value is 2884.</span></span><br><span class="line">    <span class="attr">home_path:</span> <span class="string">/home/admin/obproxy</span></span><br><span class="line">    <span class="comment"># oceanbase root server list</span></span><br><span class="line">    <span class="comment"># format: ip:mysql_port,ip:mysql_port</span></span><br><span class="line">    <span class="attr">rs_list:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2881</span></span><br><span class="line">    <span class="attr">enable_cluster_checkout:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># observer cluster name, consistent with oceanbase-ce&#x27;s appname</span></span><br><span class="line">    <span class="attr">cluster_name:</span> <span class="string">obdemo</span></span><br><span class="line">    <span class="attr">obproxy_sys_password:</span>  <span class="string">proxySYSPWD123</span> <span class="comment"># obproxy sys user password, can be empty</span></span><br><span class="line">    <span class="attr">observer_sys_password:</span> <span class="string">proxyROPWD123</span> <span class="comment"># proxyro user pasword, consistent with oceanbase-ce&#x27;s proxyro_password, can be empty</span></span><br><span class="line">    <span class="attr">automatic_match_work_thread:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">work_thread_num:</span> <span class="number">12</span></span><br><span class="line">    <span class="attr">xflush_log_level:</span> <span class="string">ERROR</span></span><br><span class="line">    <span class="attr">monitor_log_level:</span> <span class="string">ERROR</span></span><br><span class="line">    <span class="attr">syslog_level:</span> <span class="string">ERROR</span></span><br><span class="line">    <span class="attr">log_dir_size_threshold:</span> <span class="string">1G</span></span><br><span class="line">    <span class="attr">enable_compression_protocol:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>里面的 <code>datafile_size</code> 写的很小（<code>5G</code>）。如果你磁盘空间很大，可以后期对 OB集群里数据文件扩容。</p>
<h2 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h2><p>有问题欢迎留言，或者登录 OB 社区版官网问答区（<code>https://open.oceanbase.com/answer</code>) ，或者 OB社区版钉钉群直接跟开发和其他用户沟通交流。</p>
<p><img src="/images/16296964112262.jpg"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>OCEANBASE</tag>
        <tag>OCEANBASE-CE</tag>
        <tag>DOCKER</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用DataX在OB和传统数据库之间同步数据</title>
    <url>/posts/2903/</url>
    <content><![CDATA[<h2 id="DataX-简介以及下载编译"><a href="#DataX-简介以及下载编译" class="headerlink" title="DataX 简介以及下载编译"></a>DataX 简介以及下载编译</h2><p>DataX 是阿里云 DataWorks数据集成 的开源版本，在阿里巴巴集团内被广泛使用的离线数据同步工具/平台。DataX 实现了包括 MySQL、Oracle、SqlServer、Postgre、HDFS、Hive、ADS、HBase、TableStore(OTS)、MaxCompute(ODPS)、Hologres、DRDS 、<strong>OceanBase</strong> 等各种异构数据源之间高效的数据同步功能。</p>
<p>开源地址：<code>https://github.com/alibaba/datax</code> 。</p>
<p>OB 企业版客户，可以跟 OB 的技术人员索取 DataX 内部版本（RPM包）。 OB 社区版客户，可以在 DataX 开源网站上下载源码，自行编译。</p>
<span id="more"></span>
<p>编译的时候，注意在 <code>pom.xml</code> 中剔除掉不用的数据库插件。否则，编译出来的包非常大。</p>
<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><p>Maven 配置文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>core<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>transformer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- reader --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>mysqlreader<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>oraclereader<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>txtfilereader<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>streamreader<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>rdbmsreader<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>oceanbasev10reader<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- writer --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>mysqlwriter<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>txtfilewriter<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>streamwriter<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>oraclewriter<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>rdbmswriter<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>oceanbasev10writer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- common support module --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>plugin-rdbms-util<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>plugin-unstructured-storage-util<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>kuduwriter<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编译方法还是很简单的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">mvn -U clean package assembly:assembly -Dmaven.test.skip=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Reactor Summary:</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] datax-all ......................................... SUCCESS [25.353s]</span><br><span class="line">[INFO] datax-common ...................................... SUCCESS [3.219s]</span><br><span class="line">[INFO] datax-transformer ................................. SUCCESS [1.655s]</span><br><span class="line">[INFO] datax-core ........................................ SUCCESS [5.078s]</span><br><span class="line">[INFO] plugin-rdbms-util ................................. SUCCESS [2.020s]</span><br><span class="line">[INFO] mysqlreader ....................................... SUCCESS [1.316s]</span><br><span class="line">[INFO] oraclereader ...................................... SUCCESS [1.250s]</span><br><span class="line">[INFO] plugin-unstructured-storage-util .................. SUCCESS [1.744s]</span><br><span class="line">[INFO] txtfilereader ..................................... SUCCESS [4.572s]</span><br><span class="line">[INFO] streamreader ...................................... SUCCESS [1.244s]</span><br><span class="line">[INFO] rdbmsreader ....................................... SUCCESS [1.367s]</span><br><span class="line">[INFO] oceanbasev10reader ................................ SUCCESS [1.836s]</span><br><span class="line">[INFO] mysqlwriter ....................................... SUCCESS [1.195s]</span><br><span class="line">[INFO] txtfilewriter ..................................... SUCCESS [3.923s]</span><br><span class="line">[INFO] streamwriter ...................................... SUCCESS [1.113s]</span><br><span class="line">[INFO] oraclewriter ...................................... SUCCESS [1.170s]</span><br><span class="line">[INFO] rdbmswriter ....................................... SUCCESS [1.534s]</span><br><span class="line">[INFO] oceanbasev10writer ................................ SUCCESS [2.150s]</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 1:02.428s</span><br><span class="line">[INFO] Finished at: Wed Aug 25 11:25:29 CST 2021</span><br><span class="line">[INFO] Final Memory: 144M/5065M</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

<p>编译好的目录，请把 <code>target</code> 目录下的 datax 复制到实际工作目录。</p>
<h2 id="DataX-配置文件框架"><a href="#DataX-配置文件框架" class="headerlink" title="DataX 配置文件框架"></a>DataX 配置文件框架</h2><p><strong>DataX 迁移数据以任务的形式，每个任务只处理一个表，每个任务有一个 <code>json</code> 格式的配置文件。配置文件里会包含 <code>reader</code> 和 <code>writer</code> 两节。具体的 <code>reader</code> 和 <code>writer</code> 都是 DataX 支持的数据库插件，可以随意搭配使用（就跟孩子搭积木一样）</strong>。</p>
<p>下面是配置文件示例。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;job&quot;: &#123;</span><br><span class="line">    &quot;content&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;reader&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;streamreader&quot;,</span><br><span class="line">          &quot;parameter&quot;: &#123;</span><br><span class="line">            &quot;sliceRecordCount&quot;: 10,</span><br><span class="line">            &quot;column&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;type&quot;: &quot;long&quot;,</span><br><span class="line">                &quot;value&quot;: &quot;10&quot;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;type&quot;: &quot;string&quot;,</span><br><span class="line">                &quot;value&quot;: &quot;hello，你好，世界-DataX&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;writer&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;streamwriter&quot;,</span><br><span class="line">          &quot;parameter&quot;: &#123;</span><br><span class="line">            &quot;encoding&quot;: &quot;UTF-8&quot;,</span><br><span class="line">            &quot;print&quot;: true</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;setting&quot;: &#123;</span><br><span class="line">      &quot;speed&quot;: &#123;</span><br><span class="line">        &quot;channel&quot;: 2</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将 <code>json</code> 配置文件放到  datax的目录的 <code>job</code> 下，或者自定义路径。执行方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$bin</span>/datax.py job/stream2stream.json</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;.....&gt;</span><br><span class="line"></span><br><span class="line">2021-08-26 11:06:09.217 [job-0] INFO  JobContainer - PerfTrace not <span class="built_in">enable</span>!</span><br><span class="line">2021-08-26 11:06:09.218 [job-0] INFO  StandAloneJobContainerCommunicator - Total 20 records, 380 bytes | Speed 38B/s, 2 records/s | Error 0 records, 0 bytes |  All Task WaitWriterTime 0.000s |  All Task WaitReaderTime 0.000s | Percentage 100.00%</span><br><span class="line">2021-08-26 11:06:09.223 [job-0] INFO  JobContainer -</span><br><span class="line">任务启动时刻                    : 2021-08-26 11:05:59</span><br><span class="line">任务结束时刻                    : 2021-08-26 11:06:09</span><br><span class="line">任务总计耗时                    :                 10s</span><br><span class="line">任务平均流量                    :               38B/s</span><br><span class="line">记录写入速度                    :              2rec/s</span><br><span class="line">读出记录总数                    :                  20</span><br><span class="line">读写失败总数                    :                   0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>DataX 任务执行结束都会有个简单的任务报告，关注一下里面 平均流量、写入速度和读写失败总数等。</p>
<p>DataX 的 <code>job</code> 的参数 <code>settings</code> 可以指定速度参数、错误记录容忍度等。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&quot;setting&quot;: &#123;</span><br><span class="line">    &quot;speed&quot;: &#123;</span><br><span class="line">        &quot;channel&quot;: 10 </span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;errorLimit&quot;: &#123;</span><br><span class="line">        &quot;record&quot;: 10,</span><br><span class="line">        &quot;percentage&quot;: 0.1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <strong>特别说明：</strong></p>
<ul>
<li><code>speed</code> 还有个限速的设计（<code>bytes</code>)，但是有bug，大家就不要用了。  <code>errorLimit</code> 表示报错记录数的容忍度，超出这个限制后任务就中断退出。 </li>
<li><code>channel</code> 是并发数，理论上并发越大，迁移性能越好。实际也要考虑源端的读压力、网络传输性能以及目标端写入性能。</li>
</ul>
<p>下面是常用数据源（<code>mysql</code>、<code>oracle</code> 、<code>csv</code> 和 <code>oceanbase</code> ）的读写插件。</p>
<h2 id="reader-插件说明"><a href="#reader-插件说明" class="headerlink" title="reader 插件说明"></a><code>reader</code> 插件说明</h2><h3 id="txtfilereader-插件说明"><a href="#txtfilereader-插件说明" class="headerlink" title="txtfilereader 插件说明"></a><code>txtfilereader</code> 插件说明</h3><p><code>txtfilereader</code> 提供了读取本地文件系统数据存储的能力。在底层实现上，<code>txtfilereader</code> 获取本地文件数据，并转换为DataX传输协议传递给Writer。</p>
<p>本地文件内容存放的是一张逻辑意义上的二维表，例如CSV格式的文本信息。</p>
<p><code>txtfilereader</code> 有一些功能限制和参数，请首先阅读官方说明： <code>https://github.com/alibaba/DataX/blob/master/txtfilereader/doc/txtfilereader.md</code> 。</p>
<p>下面是 <code>txtfilereader</code> 的 示例。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&quot;reader&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;txtfilereader&quot;,</span><br><span class="line">    &quot;parameter&quot;: &#123;</span><br><span class="line">        &quot;path&quot;: [&quot;/tmp/tpcc/bmsql_oorder&quot;],</span><br><span class="line">        &quot;encoding&quot;: &quot;UTF-8&quot;,</span><br><span class="line">        &quot;column&quot;: [&quot;*&quot;],</span><br><span class="line">        &quot;dateFormat&quot;: &quot;yyyy-MM-dd hh:mm:ss&quot; ,</span><br><span class="line">        &quot;nullFormat&quot;: &quot;\\N&quot; ,</span><br><span class="line">        &quot;fieldDelimiter&quot;: &quot;,&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>特别说明：</strong></p>
<ul>
<li><code>path</code> 指定到路径即可，<code>fileName</code> 会是生成的文件前缀，完整的文件名很长，有随机字符串（避免重复）。文件的数量可能是根据记录数来自动分的。</li>
<li><code>column</code> 可以指定为 “*” ，这样所有字段值都作为字符串了。这个虽然方便，但不能保证完全没有问题。目前测试常用数据类型是可以的。</li>
<li><code>nullFormat</code> 指定空值的记录，默认是”null”，这个读入oracle的时候会有问题。建议导出文件的时候指定为 “\N” 表示空值和。</li>
<li><code>fieldDelimiter</code> 指定 <code>csv</code> 文件的列分隔符，这个跟导出的时候指定的列分隔符保持一致。通常导出的列内容如果含有列分隔符时，会用双引号进行包含（<code>enclosed</code>）。用逗号（<code>,</code>）也可以，只是太过常见，建议用生僻一点的单字符。如 <code>|</code> 或 <code>^</code> 等。</li>
</ul>
<h3 id="mysqlreader插件说明"><a href="#mysqlreader插件说明" class="headerlink" title="mysqlreader插件说明"></a><code>mysqlreader</code>插件说明</h3><p>MysqlReader插件实现了从Mysql读取数据。在底层实现上，MysqlReader通过JDBC连接远程Mysql数据库，并执行相应的sql语句将数据从mysql库中SELECT出来。</p>
<p>不同于其他关系型数据库，MysqlReader 不支持 FetchSize.</p>
<p>实现原理方面，简而言之，MysqlReader通过JDBC连接器连接到远程的Mysql数据库，并根据用户配置的信息生成查询SELECT SQL语句，然后发送到远程Mysql数据库，并将该SQL执行返回结果使用DataX自定义的数据类型拼装为抽象的数据集，并传递给下游Writer处理。详细功能和参数说明请首先阅读官方说明：<code>https://github.com/alibaba/DataX/blob/master/mysqlreader/doc/mysqlreader.md</code> 。</p>
<p>下面是 <code>mysqlreader</code> 的配置示例。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&quot;reader&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;mysqlreader&quot;,</span><br><span class="line">    &quot;parameter&quot;: &#123;</span><br><span class="line">        &quot;username&quot;: &quot;tpcc&quot;,</span><br><span class="line">        &quot;password&quot;: &quot;********&quot;,</span><br><span class="line">        &quot;column&quot;: [</span><br><span class="line">            &quot;*&quot;</span><br><span class="line">        ],                        </span><br><span class="line">        &quot;connection&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;table&quot;: [</span><br><span class="line">                    &quot;bmsql_oorder&quot;</span><br><span class="line">                ],</span><br><span class="line">                &quot;jdbcUrl&quot;: [&quot;jdbc:mysql://127.0.0.1:3306/tpccdb?useUnicode=true&amp;characterEncoding=utf8&quot;]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>特别说明：</strong></p>
<ul>
<li>如果表的主键是单列主键，比如说 <code>id</code>。那么可以在 <code>parameter</code> 下加一个配置： <code>&quot;splitPk&quot;: &quot;db_id&quot;, </code> 。如果是加在最后，就去掉后面的逗号(<code>,</code>)。</li>
<li> <code>column</code> 指定读取的列。通常建议写具体的列，可以在列上用函数做逻辑转换。用 <code>*</code> 就是要时刻确保列跟目标端写入的列能对应上。</li>
</ul>
<h3 id="oraclereader-插件说明"><a href="#oraclereader-插件说明" class="headerlink" title="oraclereader 插件说明"></a><code>oraclereader</code> 插件说明</h3><p>OracleReader插件实现了从Oracle读取数据。在底层实现上，OracleReader通过JDBC连接远程Oracle数据库，并执行相应的sql语句将数据从Oracle库中SELECT出来。</p>
<p>其原理也很简单，OracleReader通过JDBC连接器连接到远程的Oracle数据库，并根据用户配置的信息生成查询SELECT SQL语句并发送到远程Oracle数据库，并将该SQL执行返回结果使用DataX自定义的数据类型拼装为抽象的数据集，并传递给下游Writer处理。详细功能和参数说明请首先阅读官方说明：<code>https://github.com/alibaba/DataX/blob/master/oraclereader/doc/oraclereader.md</code> 。</p>
<p>下面是 <code>oraclereader</code> 的配置示例。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&quot;reader&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;oraclereader&quot;,</span><br><span class="line">    &quot;parameter&quot;: &#123;</span><br><span class="line">        &quot;username&quot;: &quot;tpcc&quot;,</span><br><span class="line">        &quot;password&quot;: &quot;********&quot;,</span><br><span class="line">        &quot;column&quot;: [</span><br><span class="line">            &quot;*&quot;</span><br><span class="line">        ],                    </span><br><span class="line">        &quot;connection&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;table&quot;: [</span><br><span class="line">                    &quot;bmsql_oorder&quot;</span><br><span class="line">                ],</span><br><span class="line">                &quot;jdbcUrl&quot;: [ &quot;jdbc:oracle:thin:@172.17.0.5:1521:helowin&quot;]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>特别说明：</strong></p>
<ul>
<li>如果表的主键是单列主键，比如说 <code>id</code>。那么可以在 <code>parameter</code> 下加一个配置： <code>&quot;splitPk&quot;: &quot;db_id&quot;, </code> 。如果是加在最后，就去掉后面的逗号(<code>,</code>)。</li>
<li><code>column</code> 指定读取的列。通常建议写具体的列，可以在列上用函数做逻辑转换。用 <code>*</code> 就是要时刻确保列跟目标端写入的列能对应上。</li>
</ul>
<h3 id="oceanbasev10reader-插件说明"><a href="#oceanbasev10reader-插件说明" class="headerlink" title="oceanbasev10reader 插件说明"></a><code>oceanbasev10reader</code> 插件说明</h3><p>OceanbaseV10Reader插件实现了从 Oceanbase  读取数据。在底层实现上，该读取插件通过java client（jdbc）连接远程Oceanbase 1.0数据库，并执行相应的sql语句将数据从库中SELECT出来。</p>
<h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>简而言之，Oceanbasev10Reader通过java client连接器连接到远程的Oceanbase数据库，并根据用户配置的信息生成查询SELECT SQL语句，然后发送到远程Oceanbase 数据库，并将该SQL执行返回结果使用DataX自定义的数据类型拼装为抽象的数据集，并传递给下游Writer处理。<br>对于用户配置Table、Column、Where的信息，OceanbaseV10Reader将其拼接为SQL语句发送到Oceanbase 数据库；对于用户配置querySql信息，OceanbaseReader直接将其发送到Oceanbase 数据库。</p>
<p>下面是 <code>oceanbasev10reader</code> 的配置示例。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&quot;reader&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;oceanbasev10reader&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;where&quot;: &quot;&quot;,</span><br><span class="line">                        &quot;readBatchSize&quot;: 100000,</span><br><span class="line">                        &quot;column&quot;: [</span><br><span class="line">                            &quot;*&quot;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;jdbcUrl&quot;: [&quot;||_dsc_ob10_dsc_||obdemo:oboracle||_dsc_ob10_dsc_||jdbc:oceanbase://127.0.0.1:2883/tpcc&quot;],</span><br><span class="line">                                &quot;table&quot;: [</span><br><span class="line">                                    &quot;bmsql_oorder&quot;</span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;username&quot;: &quot;tpcc&quot;,</span><br><span class="line">                        &quot;password&quot;:&quot;********&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>

<h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>供参考，以后可能会变化，请关注<code>DataX</code> 开源地址说明 （<code>https://github.com/alibaba/DataX/tree/master/oceanbasev10reader</code>）。</p>
<ul>
<li>jdbcUrl:<br>描述：连接ob使用的jdbc url，格式固定，注意此处为数组，应用中括号([])括起来<br>必选：是<br>默认值：无 </li>
<li><code>table</code>:<br>描述：所选取的需要同步的表。使用JSON的数组描述，因此支持多张表同时抽取。当配置为多张表时，用户自己需保证多张表是同一schema结构，OceanbaseReader不予检查表是否同一逻辑表。注意，table必须包含在connection配置单元中。<br>必选：是<br>默认值：无 </li>
<li><code>column</code>:<br>描述：所配置的表中需要同步的列名集合，使用JSON的数组描述字段信息。<br>支持列裁剪，即列可以挑选部分列进行导出。<br>支持列换序，即列可以不按照表schema信息进行导出，同时支持通配符*，在使用之前需仔细核对列信息。<br>必选：是<br>默认值：无 </li>
<li><code>where</code>:<br>描述：筛选条件，OceanbaseReader根据指定的column、table、where条件拼接SQL，并根据这个SQL进行数据抽取。在实际业务场景中，往往会选择当天的数据进行同步，可以将where条件指定为gmt_create &gt; $bizdate 。这里gmt_create不可以是索引字段，也不可以是联合索引的第一个字段。where条件可以有效地进行业务增量同步。如果不填写where语句，包括不提供where的key或者value，DataX均视作同步全量数据。<br>必选：否<br>默认值：无 </li>
<li><code>splitPk</code>:<br>描述：OBReader进行数据抽取时，如果指定splitPk，表示用户希望使用splitPk代表的字段进行数据分片，DataX因此会启动并发任务进行数据同步，这样可以大大提供数据同步的效能。<br>推荐splitPk用户使用表主键，因为表主键通常情况下比较均匀，因此切分出来的分片也不容易出现数据热点。<br>目前splitPk仅支持int数据切分，不支持其他类型。如果用户指定其他非支持类型将报错。<br>splitPk如果不填写，将视作用户不对单表进行切分，OBReader使用单通道同步全量数据。<br>必选：否<br>默认值：空 </li>
<li><code>querySql</code>:<br>描述：在有些业务场景下，where这一配置项不足以描述所筛选的条件，用户可以通过该配置型来自定义筛选SQL。当用户配置了这一项之后，DataX系统就会忽略table，column这些配置型，直接使用这个配置项的内容对数据进行筛选<br>当用户配置querySql时，OceanbaseReader直接忽略table、column、where条件的配置，querySql优先级大于table、column、where选项。<br>必选：否<br>默认值：无 </li>
<li><code>timeout</code>:<br>描述：sql执行的超时时间 单位分钟。目前默认被设置为 48h，所以用户不用设置。<br>必选：否<br>默认值：5 </li>
<li><code>username</code>:<br>描述：访问oceanbase1.0的用户名<br>必选：是<br>默认值：无 </li>
<li><code>** password**</code><br>描述：访问oceanbase1.0的密码<br>必选：是<br>默认值：无 </li>
<li><code>readByPartition</code><br>描述：对分区表是否按照分区切分任务<br>必选：否<br>默认值：fasle </li>
<li><code>readBatchSize</code><br>描述：一次读取的行数，如果遇到内存不足的情况，可将该值调小<br>必选：否<br>默认值：100000 </li>
</ul>
<h2 id="writer-插件说明"><a href="#writer-插件说明" class="headerlink" title="writer 插件说明"></a><code>writer</code> 插件说明</h2><h3 id="txtfilewriter-插件说明"><a href="#txtfilewriter-插件说明" class="headerlink" title="txtfilewriter 插件说明"></a><code>txtfilewriter</code> 插件说明</h3><p>TxtFileWriter提供了向本地文件写入类CSV格式的一个或者多个表文件。TxtFileWriter服务的用户主要在于DataX开发、测试同学。</p>
<p>写入本地文件内容存放的是一张逻辑意义上的二维表，例如CSV格式的文本信息。</p>
<p>详细功能和参数说明请首先阅读官方说明：<code>https://github.com/alibaba/DataX/blob/master/txtfilewriter/doc/txtfilewriter.md</code></p>
<p>下面是 <code>txtfilewriter</code> 的配置示例。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&quot;writer&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;txtfilewriter&quot;,</span><br><span class="line">    &quot;parameter&quot;: &#123;</span><br><span class="line">        &quot;path&quot;: &quot;/tmp/tpcc/bmsql_oorder&quot;,</span><br><span class="line">        &quot;fileName&quot;: &quot;bmsql_oorder&quot;,</span><br><span class="line">        &quot;encoding&quot;: &quot;UTF-8&quot;,</span><br><span class="line">        &quot;writeMode&quot;: &quot;truncate&quot;,</span><br><span class="line">        &quot;dateFormat&quot;: &quot;yyyy-MM-dd hh:mm:ss&quot; ,</span><br><span class="line">        &quot;nullFormat&quot;: &quot;\\N&quot; ,</span><br><span class="line">        &quot;fileFormat&quot;: &quot;csv&quot; ,</span><br><span class="line">        &quot;fieldDelimiter&quot;: &quot;,&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>特别说明：</strong></p>
<ul>
<li><code>fileFormat</code> 指定为 <code>csv</code> 。</li>
<li><code>fieldDelimiter</code> 指定字段分隔符，单字符，尽量使用内容里不会出现的分隔符。默认是逗号(<code>,</code>)，推荐用 <code>^</code>、<code>|</code> 等。当内容中出现分隔符的时候，该字段会使用双引号包含起来。<br>如下面就是字段值包含分隔符<code>,</code>的记录：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">32,300000,.1111,LCJgPD6U,<span class="string">&quot;pIScfm2oihf4KrC,1U&quot;</span>,kwmFinypFhN,ZJdxWAwUHhx,XI,754811111</span><br></pre></td></tr></table></figure></li>
<li><code>nullFormat</code> 指定空值的表现形式，默认是 “null” ，建议改为 “\N” 。<br>如下面就是空值记录：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3,1,2101,1015,\N,13,1,2021-08-25 10:50:56</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="mysqlwriter-插件说明"><a href="#mysqlwriter-插件说明" class="headerlink" title="mysqlwriter 插件说明"></a><code>mysqlwriter</code> 插件说明</h3><p>MysqlWriter 插件实现了写入数据到 Mysql 主库的目的表的功能。在底层实现上， MysqlWriter 通过 JDBC 连接远程 Mysql 数据库，并执行相应的 insert into … 或者 ( replace into …) 的 sql 语句将数据写入 Mysql，内部会分批次提交入库，需要数据库本身采用 innodb 引擎。</p>
<p>实现原理，MysqlWriter 通过 DataX 框架获取 Reader 生成的协议数据，根据你配置的 writeMode 生成</p>
<ul>
<li>insert into…(当主键/唯一性索引冲突时会写不进去冲突的行)<br>或者</li>
<li>replace into…(没有遇到主键/唯一性索引冲突时，与 insert into 行为一致，冲突时会用新行替换原有行所有字段) 的语句写入数据到 Mysql。出于性能考虑，采用了 PreparedStatement + Batch，并且设置了：rewriteBatchedStatements=true，将数据缓冲到线程上下文 Buffer 中，当 Buffer 累计到预定阈值时，才发起写入请求。</li>
</ul>
<p>详细功能和参数说明请首先阅读官方说明： <code>https://github.com/alibaba/DataX/blob/master/mysqlwriter/doc/mysqlwriter.md</code> </p>
<p>下面是 <code>mysqlwriter</code> 的 配置示例。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&quot;writer&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;mysqlwriter&quot;,</span><br><span class="line">    &quot;parameter&quot;: &#123;</span><br><span class="line">        &quot;writeMode&quot;: &quot;insert&quot;,</span><br><span class="line">        &quot;username&quot;: &quot;tpcc&quot;,</span><br><span class="line">        &quot;password&quot;: &quot;123456&quot;,</span><br><span class="line">        &quot;column&quot;: [</span><br><span class="line">            &quot;*&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;session&quot;: [</span><br><span class="line">        	&quot;set session sql_mode=&#x27;ANSI&#x27;&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;preSql&quot;: [</span><br><span class="line">            &quot;truncate table bmsql_oorder&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;batchSize&quot;: 512,                        </span><br><span class="line">        &quot;connection&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;jdbcUrl&quot;: &quot;jdbc:mysql://127.0.0.1:3306/tpccdb?useUnicode=true&amp;characterEncoding=utf8&quot;,</span><br><span class="line">                &quot;table&quot;: [</span><br><span class="line">                    &quot;bmsql_oorder&quot;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>特别说明：</strong></p>
<ul>
<li><code>writeMode</code> ：有三种取值：<code>insert</code>、<code>replace</code>、<code>update</code> ，分别对应的 SQL 类型为 <code>insert into</code>、<code>replace into</code> 和  <code>on duplicate key update</code> 。</li>
<li><code>preSQL</code>: 是在任务开始的时候提前执行一次的SQL。通常是清空表数据。大表不要使用 <code>delete from @table</code> ，那个很慢。</li>
<li><code>batchSize</code> ： 时候一次性批量提交的记录数大小，该值可以极大减少DataX与Mysql的网络交互次数，并提升整体吞吐量。但是该值设置过大可能会造成DataX运行进程OOM情况。</li>
</ul>
<h3 id="oraclewriter-插件说明"><a href="#oraclewriter-插件说明" class="headerlink" title="oraclewriter 插件说明"></a><code>oraclewriter</code> 插件说明</h3><p>OracleWriter 插件实现了写入数据到 Oracle 主库的目的表的功能。在底层实现上， OracleWriter 通过 JDBC 连接远程 Oracle 数据库，并执行相应的 insert into … sql 语句将数据写入 Oracle，内部会分批次提交入库。</p>
<p>实现原理，OracleWriter 通过 DataX 框架获取 Reader 生成的协议数据，根据你配置生成相应的SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span>...(当主键<span class="operator">/</span>唯一性索引冲突时会写不进去冲突的行)</span><br></pre></td></tr></table></figure>

<p>详细功能和参数说明请首先阅读官方说明：<code>https://github.com/alibaba/DataX/blob/master/oraclewriter/doc/oraclewriter.md</code> 。</p>
<p>下面是 <code>oraclewriter</code> 的配置示例。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&quot;writer&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;oraclewriter&quot;,</span><br><span class="line">    &quot;parameter&quot;: &#123;</span><br><span class="line">        &quot;username&quot;: &quot;tpcc&quot;,</span><br><span class="line">        &quot;password&quot;: &quot;********&quot;,</span><br><span class="line">        &quot;column&quot;: [</span><br><span class="line">            &quot;*&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;preSql&quot;: [</span><br><span class="line">            &quot;truncate table bmsql_oorder&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;batchSize&quot;: 512,</span><br><span class="line">        &quot;connection&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;jdbcUrl&quot;: &quot;jdbc:oracle:thin:@127.0.0.1:1521:helowin&quot;,</span><br><span class="line">                &quot;table&quot;: [</span><br><span class="line">                    &quot;bmsql_oorder&quot;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>特别说明：</strong></p>
<ul>
<li><code>OracleWriter</code> 和 <code>MysqlWriter</code> 不同，不支持配置writeMode参数。</li>
<li><code>preSQL</code>: 是在任务开始的时候提前执行一次的SQL。通常是清空表数据。大表不要使用 <code>delete from @table</code> ，那个很慢。</li>
<li><code>batchSize</code> ： 时候一次性批量提交的记录数大小，该值可以极大减少DataX与Mysql的网络交互次数，并提升整体吞吐量。但是该值设置过大可能会造成DataX运行进程OOM情况。</li>
</ul>
<h3 id="oceanbasev10writer-插件说明"><a href="#oceanbasev10writer-插件说明" class="headerlink" title="oceanbasev10writer 插件说明"></a><code>oceanbasev10writer</code> 插件说明</h3><p><code>oceanbasev10writer</code> 插件实现了写入数据到 OceanBase  主库的目的表的功能。在底层实现上， OceanbaseV10Writer 通过 java客户端(底层MySQL JDBC或oceanbase client) 连接obproxy 远程 OceanBase 数据库，并执行相应的 insert sql 语句将数据写入 OceanBase ，内部会分批次提交入库。</p>
<h4 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h4><p>Oceanbasev10Writer 通过 DataX 框架获取 Reader 生成的协议数据，生成 insert 语句。对于mysql 租户，在主键或唯一键冲突时，可以选择 <code>replace</code> 模式，更新表中的所有字段。对于oracle 租户，目前只有 insert 行为。 出于性能考虑，写入采用 batch 方式批量写，当行数累计到预定阈值时，才发起写入请求。</p>
<p>下面是 <code>oceanbasev10writer</code> 的配置示例。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&quot;writer&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;oceanbasev10writer&quot;,</span><br><span class="line">    &quot;parameter&quot;: &#123;</span><br><span class="line">        &quot;obWriteMode&quot;: &quot;insert&quot;,</span><br><span class="line">        &quot;column&quot;: [</span><br><span class="line">            &quot;*&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;preSql&quot;: [</span><br><span class="line">            &quot;truncate table bmsql_oorder&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;connection&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;jdbcUrl&quot;: &quot;||_dsc_ob10_dsc_||obdemo:oboracle||_dsc_ob10_dsc_||jdbc:oceanbase://127.0.0.1:2883/tpcc?useLocalSessionState=true&amp;allowBatch=true&amp;allowMultiQueries=true&amp;rewriteBatchedStatements=true&quot;,</span><br><span class="line">                &quot;table&quot;: [</span><br><span class="line">                    &quot;bmsql_oorder&quot;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;username&quot;: &quot;tpcc&quot;,</span><br><span class="line">        &quot;password&quot;:&quot;********&quot;,</span><br><span class="line">        &quot;batchSize&quot;: 512,</span><br><span class="line">        &quot;writerThreadCount&quot;:10,</span><br><span class="line">        &quot;memstoreThreshold&quot;: &quot;0.9&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h4><p>供参考，以后可能会变化，请关注<code>DataX</code> 开源地址说明 （<code>https://github.com/alibaba/DataX/tree/master/oceanbasev10writer</code>）。</p>
<ul>
<li><code>jdbcUrl</code> :<br>描述：目的数据库的连接信息,包含了ob的集群、租户、obproxy的地址和端口以及库名；使用域名可能会报错，建议使用 <code>ip</code> 。<br>必选：是<br>默认值：无</li>
<li><code>table</code>:<br>描述：目的表的表名称。支持写入一个或者多个表。当配置为多张表时，必须确保所有表结构保持一致；表名中一般不含库名；<br>必选：是<br>默认值：无</li>
<li><code>column</code>:<br>描述：目的表需要写入数据的字段,字段之间用英文逗号分隔。例如: “column”: [“id”,”name”,”age”]。</li>
</ul>
<p> <strong>column配置项必须指定，不能留空！</strong><br>必选：是<br>默认值：否</p>
<ul>
<li><code>preSql</code>:<br>描述：写入数据到目的表前，会先执行这里的标准语句。如果 Sql 中有你需要操作到的表名称，请使用 @table 表示，这样在实际执行 Sql 语句时，会对变量按照实际表名称进行替换。比如你的任务是要写入到目的端的100个同构分表(表名称为:datax_00,datax01, … datax_98,datax_99)，并且你希望导入数据前，先对表中数据进行删除操作，那么你可以这样配置：”preSql”:[“delete from @table”]，效果是：在执行到每个表写入数据前，会先执行对应的 delete from 对应表名称.只支持delete语句<br>必选：否<br>默认值：无</li>
<li><code>batchSize</code>:<br>描述：一次性批量提交的记录数大小，该值可以极大减少DataX与Oceanbase的网络交互次数，并提升整体吞吐量。但是该值设置过大可能会造成DataX运行进程OOM情况。<br>必选：否<br>默认值：1000</li>
<li><code>memstoreThreshold</code>:<br>描述：OB租户的memstore使用率，当达到这个阀值的时候暂停导入,等释放内存后继续导入. 防止租户内存溢出。<br>必选：否<br>默认值：0.9</li>
<li><code>username</code>:<br>描述：访问oceanbase1.0的用户名，注意，此处不配置ob的集群名和租户名。<br>必选：是<br>默认值：无</li>
<li><code>** password**</code><br>描述：访问oceanbase1.0的密码<br>必选：是<br>默认值：无</li>
<li><code>writerThreadCount</code>:<br>描述：每个通道（channel）中写入使用的线程数<br>必选：否<br>默认值：1</li>
</ul>
<h2 id="DataX-的调优建议"><a href="#DataX-的调优建议" class="headerlink" title="DataX 的调优建议"></a>DataX 的调优建议</h2><p>DataX 本质上是个数据交换平台，将源端的数据读出，写入到目标端。其数据迁移性能取决于下面几个因素：</p>
<ul>
<li>源端的读性能。可以加并发，制约条件就是对源库的影响、源库的性能瓶颈等。</li>
<li>DataX 自身的性能。DataX 是个Java程序，其能起的线程数也是有限，受限于所在主机的CPU和内存大小。</li>
<li>网络传输性能。并发高的时候，网络传输要留意吞吐量是否达到网卡瓶颈。现在万兆网卡的吞吐量 10000Mb，很难达到。不过占用网络带宽对其他业务可能也会有影响。</li>
<li>目标端的写入性能。也可以加并发，制约条件就是目标库写入性能瓶颈、对目标库的影响等。如果目标端是OB，需要针对OB调优。</li>
<li>涉及到文件数据源的时候，关注文件所在磁盘 IO 性能。如 iops、吞吐量等。</li>
</ul>
<p>所以 DataX 的调优就是调节 <code>reader</code> 和 <code>writer</code> 的各个并行参数，尽可能的把 源和目标端数据库资源能力都利用上，那么整体 DataX 的迁移效率会最好。</p>
<p>此外，如果主机内存够大的话， <code>datax.py</code> 能使用的 JVM 内存也可以调大。编辑脚本，调大 <code>-Xms</code> 和 <code>-Xmx</code> 参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim bin/datax.py</span><br><span class="line"></span><br><span class="line"> 30 DEFAULT_JVM = <span class="string">&quot;-Xms16g -Xmx16g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=%s/log&quot;</span> % (DATAX_HOME)</span><br></pre></td></tr></table></figure>

<h3 id="主机资源监控-tsar"><a href="#主机资源监控-tsar" class="headerlink" title="主机资源监控 tsar"></a>主机资源监控 <code>tsar</code></h3><p><code>tsar</code> 是阿里巴巴开源的主机性能监控工具，非常轻量和实用，阿里内部服务器标配。开源地址：<code>https://github.com/alibaba/tsar/</code> 。</p>
<p>常用用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$tsar</span> --cpu --load --traffic --io -I sdb -l -i 3</span><br><span class="line">Time              -----------------------cpu---------------------- ---------------------traffic-------------------- ------------------------------------------sdb-------------------------------------------  -------------------load-----------------</span><br><span class="line">Time                user     sys    <span class="built_in">wait</span>    hirq    sirq    util    bytin  bytout   pktin  pktout  pkterr  pktdrp    rrqms   wrqms      rs      ws   rsecs   wsecs  rqsize  qusize   await   svctm    util     load1   load5  load15    runq    plit</span><br><span class="line">26/08/21-16:15:15  27.84    7.08    0.03    0.00    0.01   34.93   632.00    2.1K    9.00    7.00    0.00    0.00     0.00   33.33    2.00  100.00   40.00  561.33    5.90    0.00    0.06    0.04    0.40     15.69   14.30   14.05   27.00    3.9K</span><br><span class="line">26/08/21-16:15:18  26.69    7.21    0.07    0.00    0.03   33.92     1.0K    6.3K   13.00   15.00    0.00    0.00     0.00   38.67    2.00  139.33   40.00   10.4K   75.70    0.00    1.42    0.05    0.73     15.69   14.30   14.05    6.00    3.9K</span><br><span class="line">26/08/21-16:15:21  29.51    7.44    0.03    0.00    0.01   36.96     1.0K    5.7K   12.00   13.00    0.00    0.00     0.00   33.33    2.00  100.33   40.00  562.67    5.89    0.00    0.05    0.04    0.43     15.63   14.31   14.05   30.00    3.9K</span><br><span class="line">26/08/21-16:15:24  26.33    7.34    0.03    0.00    0.01   33.68   720.00    1.4K    9.00    6.00    0.00    0.00     0.00   29.67    2.00   88.67   40.00  501.33    5.97    0.00    0.04    0.03    0.27     15.02   14.21   14.02   22.00    3.9K</span><br><span class="line">^C</span><br><span class="line"></span><br><span class="line"><span class="variable">$tsar</span> -l -i 3</span><br><span class="line">Time              ---cpu-- ---mem-- ---tcp-- -----traffic---- --sda--- --sdb---  ---load-</span><br><span class="line">Time                util     util   retran    bytin  bytout     util     util     load1</span><br><span class="line">26/08/21-16:15:32  35.66    29.92     0.21     1.0K    6.5K     1.73     0.43     15.98</span><br><span class="line">26/08/21-16:15:35  34.02    29.92     0.00     1.5K    5.3K     1.40     0.40     15.18</span><br><span class="line">26/08/21-16:15:38  34.84    29.92     0.00     1.1K    5.8K     2.73     0.93     15.18</span><br><span class="line">^C</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="读写并行度"><a href="#读写并行度" class="headerlink" title="读写并行度"></a>读写并行度</h3><p>DataX 的配置文件中首先有 <code>speed</code> 的设置，其中 <code>channel</code> 是总的并发数。<br>OB 的 <code>oceanbasev10writer</code> 还进一步支持 多线程，通过参数 <code>&quot;writerThreadCount&quot;:10</code> 指定每个 channel 从源端读取的数据，再分几个并发线程写入。所以OB总的写入并发数是  <code>channel</code> * <code>writerThreadCount</code> 。</p>
<p>每个 <code>writer</code> 里还有个 batchsize，那个是一个事务的记录数数量。通常建议 200-10000 都可以。尽量不要超过 1万。事务太大了，不是很好。在 OB 里事务太大太长，可能会到达事务超时时间（默认120秒）。<br>这里有趣的是，OB 的 <code>oceanbasev10writer</code> 会把这个batch insert 合并为 一个 insert 多个values 子句。所以 <code>batchSize</code> 也不要太大；否则，insert sql 文本太长, 高并发时也可能会报错（内存不足方面的错误）。当列非常多的时候（比如说100 列） 或者 值的内容有大文本的时候，这个 <code>batchSize</code> 控制在 几百左右比较好。</p>
<h3 id="源端数据库读优化"><a href="#源端数据库读优化" class="headerlink" title="源端数据库读优化"></a>源端数据库读优化</h3><p>当源端是数据库的时候，如果表有单列主键，并且主键列类型的 数值型 （如 number、bigint、integer、decimal 等），可以在源端 <code>reader</code> 里增加配置 ： <code>&quot;splitPk&quot;: &quot;id&quot; </code> 。这个时候，DataX 能先对主键进行切片，然后多个 channel 同时并发分段去读取源数据。 如果没有这个设置，那源端只能单并发读取数据。</p>
<h3 id="OB写入的内存调优"><a href="#OB写入的内存调优" class="headerlink" title="OB写入的内存调优"></a>OB写入的内存调优</h3><p>OB 的数据读写模型比较特殊，增量都在内存里。当 OB 机器已经是 SSD 盘的时候， IO 不大可能会首先成为 OB 的性能瓶颈，内存和 CPU 更有可能先是瓶颈。大量数据写入的时候，增量对 memtable 内存的消耗会很快。OB 设置不当的情况下，可能会出现内存耗尽，从而写入报错。其他业务写入也会跟着报错。</p>
<p>OB 的内存优化过程比较复杂。这里先给出一个初始的设置，能降低内存写入报错的概率。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> merge_thread_count <span class="operator">=</span> <span class="number">32</span>;  <span class="comment">--  增大合并的线程数。</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> minor_merge_concurrency <span class="operator">=</span> <span class="number">16</span>;  <span class="comment">--  增大转储的线程数，期望提高转储的速度。</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> _mini_merge_concurrency <span class="operator">=</span> <span class="number">8</span>;  <span class="comment">--  增大mini_merge的线程数，期望提高mini_merge的速度（默认值为3）。调大为8以后，发现会导致压测中CPU使用率有时飙升至90%，对性能有影响。</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> memory_limit_percentage <span class="operator">=</span> <span class="number">90</span>;    <span class="comment">--  OB占系统总内存的比例，提高OB可用的内存量。</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> memstore_limit_percentage <span class="operator">=</span> <span class="number">55</span>;  <span class="comment">--  memstore占租户的内存比，尽量增大memstore的空间（但是可能对读操作有负面影响）。</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> freeze_trigger_percentage <span class="operator">=</span> <span class="number">40</span>;  <span class="comment">--  启动major/minor freeze的时机，让转储（minor freeze）尽早启动，memstore内存尽早释放。</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> minor_freeze_times <span class="operator">=</span> <span class="number">100</span>;        <span class="comment">--  minor freeze的次数，尽量不在测试期间触发major freeze。</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> minor_warm_up_duration_time <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">--  加快minor freeze</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>OB 的 <code>oceanbasev10writer</code> 插件也提供参数 <code>memstoreThreshold</code> 监测增量内存的利用率，如果到达这个阈值，DataX 自动降速。</p>
<p>OB 的增量内存使用也可以监控，关键 SQL 是：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tenant_id, ip, round(active<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>) active_gb, round(total<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>) total_gb, round(freeze_trigger<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>) freeze_trg_gb, round(mem_limit<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>) mem_limit_gb</span><br><span class="line">    , freeze_cnt , round((active<span class="operator">/</span>freeze_trigger),<span class="number">2</span>) freeze_pct, round(total<span class="operator">/</span>mem_limit, <span class="number">2</span>) mem_usage</span><br><span class="line"><span class="keyword">FROM</span> `gv$memstore`</span><br><span class="line"><span class="keyword">WHERE</span> tenant_id <span class="operator">=</span><span class="number">1001</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> tenant_id, ip;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>OB 的监控产品里也能监控增量内存的变化。</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="示例1-：MySQL-数据导出到-CSV-文件"><a href="#示例1-：MySQL-数据导出到-CSV-文件" class="headerlink" title="示例1 ：MySQL 数据导出到 CSV 文件"></a>示例1 ：MySQL 数据导出到 <code>CSV</code> 文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$cat job/bmsql_oorder_mysql2csv.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;job&quot;: &#123;</span><br><span class="line">        &quot;setting&quot;: &#123;</span><br><span class="line">            &quot;speed&quot;: &#123;</span><br><span class="line">                &quot;channel&quot;: 4</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;errorLimit&quot;: &#123;</span><br><span class="line">                &quot;record&quot;: 0,</span><br><span class="line">                &quot;percentage&quot;: 0.1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;content&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;reader&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;mysqlreader&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;username&quot;: &quot;tpcc&quot;,</span><br><span class="line">                        &quot;password&quot;: &quot;********&quot;,</span><br><span class="line">                        &quot;column&quot;: [</span><br><span class="line">                            &quot;*&quot;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;table&quot;: [</span><br><span class="line">                                    &quot;bmsql_oorder&quot;</span><br><span class="line">                                ],</span><br><span class="line">                                &quot;jdbcUrl&quot;: [&quot;jdbc:mysql://127.0.0.1:3306/tpccdb?useUnicode=true&amp;characterEncoding=utf8&quot;]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;writer&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;txtfilewriter&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;path&quot;: &quot;/tmp/tpcc/bmsql_oorder&quot;,</span><br><span class="line">                        &quot;fileName&quot;: &quot;bmsql_oorder&quot;,</span><br><span class="line">                        &quot;encoding&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                        &quot;writeMode&quot;: &quot;truncate&quot;,</span><br><span class="line">                        &quot;dateFormat&quot;: &quot;yyyy-MM-dd hh:mm:ss&quot; ,</span><br><span class="line">                        &quot;nullFormat&quot;: &quot;\\N&quot; ,</span><br><span class="line">                        &quot;fileFormat&quot;: &quot;csv&quot; ,</span><br><span class="line">                        &quot;fieldDelimiter&quot;: &quot;,&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="示例2-CSV-文件导入到-OceanBase"><a href="#示例2-CSV-文件导入到-OceanBase" class="headerlink" title="示例2:  CSV 文件导入到 OceanBase"></a>示例2:  <code>CSV</code> 文件导入到 OceanBase</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$cat job/bmsql_oorder_csv2ob.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;job&quot;: &#123;</span><br><span class="line">        &quot;setting&quot;: &#123;</span><br><span class="line">            &quot;speed&quot;: &#123;</span><br><span class="line">                &quot;channel&quot;: 4</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;errorLimit&quot;: &#123;</span><br><span class="line">                &quot;record&quot;: 0,</span><br><span class="line">                &quot;percentage&quot;: 0.1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;content&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;reader&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;txtfilereader&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;path&quot;: [&quot;/tmp/tpcc/bmsql_oorder&quot;],</span><br><span class="line">                        &quot;encoding&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                        &quot;column&quot;: [&quot;*&quot;],</span><br><span class="line">                        &quot;dateFormat&quot;: &quot;yyyy-MM-dd hh:mm:ss&quot; ,</span><br><span class="line">                        &quot;nullFormat&quot;: &quot;\\N&quot; ,</span><br><span class="line">                        &quot;fieldDelimiter&quot;: &quot;,&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;writer&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;oceanbasev10writer&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;obWriteMode&quot;: &quot;insert&quot;,</span><br><span class="line">                        &quot;column&quot;: [</span><br><span class="line">                            &quot;*&quot;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;preSql&quot;: [</span><br><span class="line">                            &quot;truncate table bmsql_oorder&quot;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;jdbcUrl&quot;: &quot;||_dsc_ob10_dsc_||obdemo:oboracle||_dsc_ob10_dsc_||jdbc:oceanbase://127.0.0.1:2883/tpcc?useLocalSessionState=true&amp;allowBatch=true&amp;allowMultiQueries=true&amp;rewriteBatchedStatements=true&quot;,</span><br><span class="line">                                &quot;table&quot;: [</span><br><span class="line">                                    &quot;bmsql_oorder&quot;</span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;username&quot;: &quot;tpcc&quot;,</span><br><span class="line">                        &quot;password&quot;:&quot;********&quot;,</span><br><span class="line">                        &quot;writerThreadCount&quot;:10,</span><br><span class="line">                        &quot;batchSize&quot;: 1000,</span><br><span class="line">                        &quot;memstoreThreshold&quot;: &quot;0.9&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="示例3：ORACLE-数据同步到-CSV-文件"><a href="#示例3：ORACLE-数据同步到-CSV-文件" class="headerlink" title="示例3：ORACLE 数据同步到 CSV 文件"></a>示例3：ORACLE 数据同步到 <code>CSV</code> 文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;job&quot;: &#123;</span><br><span class="line">        &quot;setting&quot;: &#123;</span><br><span class="line">            &quot;speed&quot;: &#123;</span><br><span class="line">                &quot;channel&quot;: 4 </span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;errorLimit&quot;: &#123;</span><br><span class="line">                &quot;record&quot;: 0,</span><br><span class="line">                &quot;percentage&quot;: 0.1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;content&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;reader&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;oraclereader&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;username&quot;: &quot;tpcc&quot;,</span><br><span class="line">                        &quot;password&quot;: &quot;********&quot;,</span><br><span class="line">                        &quot;column&quot;: [</span><br><span class="line">                            &quot;*&quot;</span><br><span class="line">                        ],                    </span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;table&quot;: [</span><br><span class="line">                                    &quot;bmsql_oorder&quot;</span><br><span class="line">                                ],</span><br><span class="line">                                &quot;jdbcUrl&quot;: [ &quot;jdbc:oracle:thin:@172.17.0.5:1521:helowin&quot;]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]                    </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;writer&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;txtfilewriter&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;path&quot;: &quot;/tmp/tpcc/bmsql_oorder&quot;,</span><br><span class="line">                        &quot;fileName&quot;: &quot;bmsql_oorder&quot;,</span><br><span class="line">                        &quot;encoding&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                        &quot;writeMode&quot;: &quot;truncate&quot;,</span><br><span class="line">                        &quot;dateFormat&quot;: &quot;yyyy-MM-dd hh:mm:ss&quot; ,</span><br><span class="line">                        &quot;nullFormat&quot;: &quot;\\N&quot; ,</span><br><span class="line">                        &quot;fileFormat&quot;: &quot;csv&quot; ,</span><br><span class="line">                        &quot;fieldDelimiter&quot;: &quot;,&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="示例4：OB-数据同步到-MySQL"><a href="#示例4：OB-数据同步到-MySQL" class="headerlink" title="示例4：OB 数据同步到 MySQL"></a>示例4：OB 数据同步到 MySQL</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;job&quot;: &#123;</span><br><span class="line">        &quot;setting&quot;: &#123;</span><br><span class="line">            &quot;speed&quot;: &#123;</span><br><span class="line">                &quot;channel&quot;: 16 </span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;errorLimit&quot;: &#123;</span><br><span class="line">                &quot;record&quot;: 0,</span><br><span class="line">                &quot;percentage&quot;: 0.1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;content&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;reader&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;oceanbasev10reader&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;where&quot;: &quot;&quot;,</span><br><span class="line">                        &quot;readBatchSize&quot;: 10000,</span><br><span class="line">                        &quot;column&quot;: [</span><br><span class="line">                            &quot;*&quot;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;jdbcUrl&quot;: [&quot;||_dsc_ob10_dsc_||obdemo:oboracle||_dsc_ob10_dsc_||jdbc:oceanbase://127.0.0.1:2883/tpcc&quot;],</span><br><span class="line">                                &quot;table&quot;: [</span><br><span class="line">                                    &quot;bmsql_oorder&quot;</span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;username&quot;: &quot;tpcc&quot;,</span><br><span class="line">                        &quot;password&quot;:&quot;********&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;writer&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;mysqlwriter&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;writeMode&quot;: &quot;replace&quot;,</span><br><span class="line">                        &quot;username&quot;: &quot;tpcc&quot;,</span><br><span class="line">                        &quot;password&quot;: &quot;123456&quot;,</span><br><span class="line">                        &quot;column&quot;: [</span><br><span class="line">                            &quot;*&quot;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;session&quot;: [</span><br><span class="line">                        	&quot;set session sql_mode=&#x27;ANSI&#x27;&quot;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;preSql&quot;: [</span><br><span class="line">                            &quot;truncate table bmsql_oorder&quot;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;batchSize&quot;: 512,</span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;jdbcUrl&quot;: &quot;jdbc:mysql://127.0.0.1:3306/tpccdb?useUnicode=true&amp;characterEncoding=utf8&quot;,</span><br><span class="line">                                &quot;table&quot;: [</span><br><span class="line">                                    &quot;bmsql_oorder&quot;</span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;    </span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="示例5：OB-数据同步到-ORACLE"><a href="#示例5：OB-数据同步到-ORACLE" class="headerlink" title="示例5：OB 数据同步到 ORACLE"></a>示例5：OB 数据同步到 ORACLE</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;job&quot;: &#123;</span><br><span class="line">        &quot;setting&quot;: &#123;</span><br><span class="line">            &quot;speed&quot;: &#123;</span><br><span class="line">                &quot;channel&quot;: 16 </span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;errorLimit&quot;: &#123;</span><br><span class="line">                &quot;record&quot;: 0,</span><br><span class="line">                &quot;percentage&quot;: 0.1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;content&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;reader&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;oceanbasev10reader&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;where&quot;: &quot;&quot;,</span><br><span class="line">                        &quot;readBatchSize&quot;: 10000,</span><br><span class="line">                        &quot;column&quot;: [</span><br><span class="line">                            &quot;*&quot;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;jdbcUrl&quot;: [&quot;||_dsc_ob10_dsc_||obdemo:oboracle||_dsc_ob10_dsc_||jdbc:oceanbase://127.0.0.1:2883/tpcc&quot;],</span><br><span class="line">                                &quot;table&quot;: [</span><br><span class="line">                                    &quot;bmsql_oorder&quot;</span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;username&quot;: &quot;tpcc&quot;,</span><br><span class="line">                        &quot;password&quot;:&quot;********&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;writer&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;oraclewriter&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;username&quot;: &quot;tpcc&quot;,</span><br><span class="line">                        &quot;password&quot;: &quot;********&quot;,</span><br><span class="line">                        &quot;column&quot;: [</span><br><span class="line">                            &quot;*&quot;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;preSql&quot;: [</span><br><span class="line">                            &quot;truncate table bmsql_oorder&quot;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;batchSize&quot;: 512,</span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;jdbcUrl&quot;: &quot;jdbc:oracle:thin:@127.0.0.1:1521:helowin&quot;,</span><br><span class="line">                                &quot;table&quot;: [</span><br><span class="line">                                    &quot;bmsql_oorder&quot;</span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;    </span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="示例6：ORACLE-数据同步到-OB"><a href="#示例6：ORACLE-数据同步到-OB" class="headerlink" title="示例6：ORACLE 数据同步到 OB"></a>示例6：ORACLE 数据同步到 OB</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;job&quot;: &#123;</span><br><span class="line">        &quot;setting&quot;: &#123;</span><br><span class="line">            &quot;speed&quot;: &#123;</span><br><span class="line">                &quot;channel&quot;: 4 </span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;errorLimit&quot;: &#123;</span><br><span class="line">                &quot;record&quot;: 0,</span><br><span class="line">                &quot;percentage&quot;: 0.1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;content&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;reader&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;oraclereader&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;username&quot;: &quot;tpcc&quot;,</span><br><span class="line">                        &quot;password&quot;: &quot;********&quot;,</span><br><span class="line">                        &quot;column&quot;: [</span><br><span class="line">                            &quot;*&quot;</span><br><span class="line">                        ],                    </span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;table&quot;: [</span><br><span class="line">                                    &quot;bmsql_oorder&quot;</span><br><span class="line">                                ],</span><br><span class="line">                                &quot;jdbcUrl&quot;: [ &quot;jdbc:oracle:thin:@172.17.0.5:1521:helowin&quot;]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]                    </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;writer&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;oceanbasev10writer&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;obWriteMode&quot;: &quot;insert&quot;,</span><br><span class="line">                        &quot;column&quot;: [</span><br><span class="line">                            &quot;*&quot;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;preSql&quot;: [</span><br><span class="line">                            &quot;truncate table bmsql_oorder&quot;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;jdbcUrl&quot;: &quot;||_dsc_ob10_dsc_||obdemo:oboracle||_dsc_ob10_dsc_||jdbc:oceanbase://127.0.0.1:2883/tpcc?useLocalSessionState=true&amp;allowBatch=true&amp;allowMultiQueries=true&amp;rewriteBatchedStatements=true&quot;,</span><br><span class="line">                                &quot;table&quot;: [</span><br><span class="line">                                    &quot;bmsql_oorder&quot;</span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;username&quot;: &quot;tpcc&quot;,</span><br><span class="line">                        &quot;password&quot;:&quot;********&quot;,</span><br><span class="line">                        &quot;writerThreadCount&quot;:10,</span><br><span class="line">                        &quot;batchSize&quot;: 1000,</span><br><span class="line">                        &quot;memstoreThreshold&quot;: &quot;0.9&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="示例7：DB2-数据同步到-OB"><a href="#示例7：DB2-数据同步到-OB" class="headerlink" title="示例7：DB2 数据同步到 OB"></a>示例7：DB2 数据同步到 OB</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;job&quot;: &#123;</span><br><span class="line">        &quot;setting&quot;: &#123;</span><br><span class="line">            &quot;speed&quot;: &#123;</span><br><span class="line">                &quot;channel&quot;: 8,</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;errorLimit&quot;: &#123;</span><br><span class="line">                &quot;record&quot;: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;content&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;reader&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;db2reader&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;username&quot;: &quot;db2inst1&quot;,</span><br><span class="line">                        &quot;password&quot;: &quot;db2inst1&quot;,</span><br><span class="line">                        &quot;column&quot;: [</span><br><span class="line">                            &quot;c1&quot;,</span><br><span class="line">                            &quot;c2&quot;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;jdbcUrl&quot;: [</span><br><span class="line">                                    &quot;jdbc:db2://127.0.0.1:50000/testdb:currentSchema=JXXD;&quot;</span><br><span class="line">                                ],</span><br><span class="line">                                &quot;table&quot;: [</span><br><span class="line">                                    &quot;blob_test&quot;</span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;writer&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;oceanbasev10writer&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;writeMode&quot;: &quot;insert&quot;,</span><br><span class="line">                        &quot;username&quot;: &quot;jxxd&quot;,</span><br><span class="line">                        &quot;password&quot;: &quot;123456&quot;,</span><br><span class="line">                        &quot;column&quot;: [</span><br><span class="line">                            &quot;c1&quot;,</span><br><span class="line">                            &quot;c2&quot;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;jdbcUrl&quot;: &quot;||_dsc_ob10_dsc_||obdemo:oboracle||_dsc_ob10_dsc_||jdbc:mysql://127.0.0.1:2883/jxxd&quot;,</span><br><span class="line">                                &quot;table&quot;: [</span><br><span class="line">                                    &quot;blob_test&quot;</span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>OCEANBASE</tag>
        <tag>DATAX</tag>
      </tags>
  </entry>
  <entry>
    <title>OceanBase 分布式数据库设计实践（一）</title>
    <url>/posts/62a54e8d/</url>
    <content><![CDATA[<p>数据库选型用 OceanBase 的原因很多，其中一类是原数据库确实遇到难解的问题或瓶颈，需要采用分布式数据库技术来脱困。这类客户以运营商、互联网客户居多。本文就是总结这类客户业务在 OceanBase 上的实践经验。</p>
<span id="more"></span>

<h2 id="原数据库问题分析以及应对策略"><a href="#原数据库问题分析以及应对策略" class="headerlink" title="原数据库问题分析以及应对策略"></a>原数据库问题分析以及应对策略</h2><h3 id="连接问题分析"><a href="#连接问题分析" class="headerlink" title="连接问题分析"></a>连接问题分析</h3><p>这一类业务原数据库一般是 ORACLE 数据库。当业务量增长，应用规模变多，创建的数据库连接也会很多，导致 DBA 不能不出规定限制一下应用的连接数。</p>
<p>连接数太多在 ORACLE 上会成为问题，主要原因还是每个用户连接是一个进程，进程有自己的私有内存（UGA），并发高时，ORACLE 多进程之间的通信也耗CPU。任凭小机处理能力再强也经不起客户端连接数的任意增长。</p>
<p>在 OceanBase 里，连接数不是问题。每个用户连接是一个线程。用户连接发起的请求会被放到一个内部请求池里，由内部工作线程去处理。内部工作线程数量并不大，跟实例资源的 CPU 规格有关系，默认是实例 CPU 的 10 倍。此外，在 OceanBase 集群前端还有个反向代理 OBPROXY （生产环境，在反向代理 OBPROXY 前面还有个 负载均衡 F5 或者 LVS等产品，不影响结论，这里略去不提）。应用实际上是跟 OBPROXY 建立连接，每个连接也是一个线程。每个 OBPROXY 默认可以创建 8000 个用户连接，这个参数可以调大到 6w ，会多消耗一些 CPU 。OBPROXY 只做 SQL 路由，不做运算，所以对 CPU 消耗也不是很大。资源充足的情况下，每个 OBPROXY 的 SQL路由能力是单核 2w。而且在实际部署中至少有 2个 OBPROXY，可以多个分担负载。</p>
<p><strong>所以，在 OceanBase 数据库里，连接数很难成为首要问题或者瓶颈。</strong></p>
<h3 id="空间问题分析"><a href="#空间问题分析" class="headerlink" title="空间问题分析"></a>空间问题分析</h3><p>这一类业务一般是运营商行业或者互联网行业有面向终端消费者业务的。用户量大，访问量大，导致业务积累了很多交易数据。<br>如果原数据库是 ORACLE 数据库，一般已经做了分区表，多是按时间分区（按月/周/日分区）。数据库文件规模通常在 十几T 或者 几十T 以上了。<br>如果原数据库是 MySQL 数据库，大部分就是单表了（MySQL 分区表功能据说不好用），也有部分可能用了分库分表技术做了水平拆分。有电商客户案例MySQL 单表数据量 120 亿还能跑（并发不高）。</p>
<p>数据量大的苦恼就是磁盘扩容成本越来越高。如果使用了存储，存储的容量也有上限。如果使用云主机产品，本地 SSD 数目和容量也有限，云盘（ESSD） 也有数量和容量的上限。只要业务在增长，触达瓶颈只是时间问题。实际上，当表容量非常大的时候，可能会先触达性能瓶颈。</p>
<p>在 OceanBase 里，数据存储时除了可以选择压缩算法外，还可以选择编码技术，极大的降低了数据的存储空间。在 OceanBase 的客户案例里，ORACLE 数据迁移到 OceanBase ，单副本空间可以做到之前的 1/5 。MySQL 业务案例里，近 20T 的 MySQL 数据在 OceanBase 里单副本实际存储空间大概 4.3 T 左右。而性能方面，通过编码技术节省存储空间这个数据并不需要解码操作，不消耗 CPU ，所以整体性能差异并不大。 OceanBase 企业版默认就开启了高级压缩特性。有关这个压缩特性请参考《OceanBase 2.0的高级数据压缩特性》。</p>
<p>不过就空间运维而言，从 ORACLE / MySQL 迁移到 OceanBase 后还是有点变化。 OceanBase 目前只支持一个数据文件（名字叫 <code>block_file</code>），其空间大小是预分配式的。默认取所在磁盘目录空间的 95% 。当然如果磁盘后期扩容了，这个文件大小上限也可以自动扩。不过对磁盘扩容不是 OceanBase 的标准玩法。</p>
<h3 id="性能问题分析"><a href="#性能问题分析" class="headerlink" title="性能问题分析"></a>性能问题分析</h3><p>在 ORACLE / MYSQL 里，表数据量到了亿级别继续增长的话，性能上可能会感觉越来越慢。其他维护操作（表结构变更、表备份恢复等）可能也会感觉比较麻烦。有的是真碰到性能问题急需解决，有的是担心将来有性能问题再解决来不及。</p>
<p>性能变慢也分读变慢和写变慢。<br>读查询通常也能走索引，不过业务比较复杂，表上的索引也很多。尤其以单列索引居多。往往业务查询条件很多，只是部分字段能命中索引，然后还有大量的索引回表操作。随着数据量的增长，数据存储空间变大，回表的成本也在增长，所以理论上是性能会下降的。有时候这些索引也建的并不合适（单列索引值得商榷的空间最大）。写操作通常也跟索引有关系。<code>update</code> 和 <code>delete</code> 操作也有查询条件要走索引，然后更新数据时还要更新索引数据。当表上索引数量很多（超过10个）时，索引对数据更新的影响也是很明显的。<br>由于索引很多都是业务开发创建的，每个业务的开发只管自己的查询，并不一定能全盘考虑。索引是否最优是个未知数。但数据库性能变慢是所有人都能看懂的事实。于是传统数据库背锅，业务寄希望于分布式数据库能解决。</p>
<p>分布式数据库确实有很多办法应对这个挑战。<br>首先是通过水平拆分技术将一个大表的数据分散到多个实例多台机器上（多台机器是关键）。水平拆分技术有分库分表、分区表和存储切片三类技术。这里主要讨论 前两者。水平拆分技术原理详情可以参考《数据水平拆分方案》。</p>
<p>分库分表技术将业务大表拆分多个分片，每个分片是一个实际存在的物理表。分区表拆分后的每一个分片是一个分区，是表的子集，不是分表。两种技术的产品都呈现给业务的是一一个业务表。前者呈现的是逻辑表，后者呈现的是物理表。这是二者原理的区别。不同的分片相比原表，不仅数据量小，存储空间也小，很多小范围的数据查询和修改性能都会提升。此外，不同的分片如果落到不同的机器上，则可以将多台机器的存储能力和计算能力（CPU、内存和IO）都同时运用起来，总体处理能力也会提升。</p>
<p>不过，分布式除了带来好处，也带来挑战。那就是跨机的查询和事务。</p>
<p>在分库分表技术里，这个处理复杂度很高，只有少数几家厂商产品实现了这个功能。但是都有一个问题，就是数据强一致和读写性能方面要有取舍。数据强一致包含跨机的查询数据都满足MVCC、跨机的事务修改的数据要是强一致的（不能是最终一致性解决方案）。<br>在 OceanBase 里，自 2.0版本后，跨机的分布式查询和分布式事务都支持（指满足强一致），性能方面也不差。强一致要求会对性能有损耗，损耗多少就是 SQL 引擎的基本功，OceanBase 始终把数据强一致放在首位。当然，平时大家听到的或者理解的强一致可能更多的是指机器故障前后数据不丢（RPO=0）那个。无论指哪个，这句话都是对的。</p>
<p>很长一段时间，也只有 TiDB 和 OceanBase 这两个原生的分布式关系型数据库真正实现了符合数据库规范的分布式查询和分布式事务。分库分表技术产品方案都是通过多个组件协同工作实现类似的功能。</p>
<h3 id="分库分表问题分析"><a href="#分库分表问题分析" class="headerlink" title="分库分表问题分析"></a>分库分表问题分析</h3><p>也有些互联网业务已经探索了分库分表的水平拆分技术。但是由于业务数据量大、以及访问量大，也有很多通点。<br>比如说：</p>
<ul>
<li>大表在线DDL导致从库延时很大。分库分表技术将一个大的DDL 拆分为多个分表的 DDL。表数据量大的时候，ONLINE DDL会导致MySQL 的从库出现很大延迟。</li>
<li>大表在线 DDL 可能阻塞 DML。在 MySQL 的 Online DLL的开始和结束阶段，涉及到元数据的变更时会尝试加表锁，会阻塞 DML。此外有些 DDL还不支持 Online，也会阻塞 DML。</li>
<li>大表在线 DDL 在机器故障后处理过程比较麻烦。当 DDL 进行中，有 MySQL 机器出现故障。首先会话要报错（DDL 部分成功部分失败），失败的 MySQL 要主从切换。主从切换时如果有 Binlog 丢失（异步同步），则还需要修复主从同步。然后还要在新主上重新开始 DDL 。</li>
<li>小表广播故障时问题。广播表适合那些不能做拆分的配置表，但是会频繁的跟其他拆分过的分表做表连接，广播表会把数据通过Binlog复制技术应用到所有实例的分库中，这个同步是外部逻辑同步，其可靠性最高不超过 MySQL的Binlog复制。其麻烦也是在同步过程中出现机器故障后，处理过程比较麻烦。风险是故障后广播表多个副本数据不一致。</li>
<li>大量分库拆分，导致MySQL实例和机器规模增长很快，运维成本增加。在淘宝内部业务，核心业务单机跑2个MySQL实例，其次跑4个、8个、16个也有。很多长尾业务都是小实例，每个机器上可能有几十个 MySQL 实例。其运维成本和风险会增加，当然厂商产品也会有自动化运维平台（DB PaaS 平台）。其麻烦依然是在出现机器故障后。只要有三四个实例要修复主从同步，DBA 半天的时间就过去了。</li>
</ul>
<p>在 OceanBase 里，上面大部分问题会因为技术方案不同而有所改变。</p>
<ul>
<li>首先，OceanBase 每笔事务默认就是三副本强同步，Paxos协议会保证至少一半成员事务日志落盘了，这个事务才会成功。这个对主副本的事务提交性能会有制约。说通俗一点，主副本不能甩开备副本自由酣畅的跑了（MySQL “自由”的代价就是出问题的时候，备副本延迟太大导致主备不一致。）。此外，由于 OceanBase 事务日志同步粒度是</li>
<li>第二，OceanBase的三副本强同步的另外一个好处就是OceanBase的高可用能力会时刻处于可用状态。只要发生少数派机器故障，内部就切换（选举出新的主副本），并且OceanBase保证数据跟故障前是绝对一致的（RPO=0）。故障机器恢复后，原来的DDL可以继续，不需要运维介入处理。也没有内部数据不一致。</li>
<li>第三，OceanBase的数据存储模型是 LSM Tree。所以 OceanBase 里的 DDL 都是 Online DDL，不会阻塞 DML。当然，OceanBase 目前的缺陷也有，有很多 DDL 都不支持。比如说加主键、改列的类型（大类变换）等等。这个预计在 3.2 某个版本就会支持了。</li>
<li>第四，不能拆分的配置表可以在 OceanBase 里配置为复制表，OceanBase会自动将复制表的变更数据同步到实例所在的所有机器（也可以指定机器范围）。这种同步是全同步策略，全部成功事务才提交，所以所有副本数据都是完全一致的。这种同步在机器故障的时候，会自动剔除故障节点，也不需要运维介入。故障机器恢复后，自动恢复数据同步，并自动恢复到全同步成员中。</li>
<li>第五，OceanBase只要一个实例，实例里表用分区表就可以替换原分库分表架构。实例可以在线扩容和缩容，负载均衡和数据同步都是 OceanBase 内部逻辑，运维非常的“省心”。</li>
</ul>
<h2 id="OceanBase-分布式能力实践"><a href="#OceanBase-分布式能力实践" class="headerlink" title="OceanBase 分布式能力实践"></a>OceanBase 分布式能力实践</h2><p>OceanBase的分布式能力包含：高可用、多实例、多活、分区表、复制表。</p>
<h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><p>高可用指的的分布式数据库 OceanBase 集群里有机器故障的时候，数据库访问服务在中断后能自动恢复。很多人可能不把高可用能力当作分布式能力，但这个是OceanBase 最核心基础的能力（不可剥夺）。这里就简单提一下，OceanBase的高可用能力就是少数派机器故障，自动切换（RTO~30s），数据不丢（RPO=0)。故障恢复后，数据同步自动恢复，非常的省心。</p>
<h3 id="多实例"><a href="#多实例" class="headerlink" title="多实例"></a>多实例</h3><p>多实例就是多租户，实例更通俗一些。OceanBase 以集群形式部署，提供给业务的是实例。集群在每个机器上只有一个进程，实例是逻辑实例，对业务完全透明，体感跟单实例一样。实例提供原生的 SQL 能力和事务能力，分布式细节对使用者完全透明。</p>
<p>OceanBase 的多实例可以提高对机器资源的利用率，根据业务需求有多种使用方法。关于 OceanBase 多实例的部署形态可以参考前面文章《闲话OB部署架构》。其关键点就是 实例的主副本位置策略（<code>PRIMARY_ZONE</code>）的设置。默认情况下设置为一个 <code>zone</code>，以及 <code>unit_num</code> 设置为 1 。业务压力大的实例，有很多分区表的实例，可以考虑 将 <code>unit_num</code> 设置为 2 以及 <code>PRIMARY_ZONE</code> 设置为多个 <code>zone</code>，以提升实例的总体处理能力。</p>
<p>OceanBase 多实例之间有资源隔离（CPU和内存），数据完全隔离。不过现在也支持 DBLINK 联通不同 ORACLE 实例之间的数据。</p>
<h3 id="多活"><a href="#多活" class="headerlink" title="多活"></a>多活</h3><p>前文《闲话OB部署架构》里也解释了 OceanBase实例跟传统 ORACLE/MYSQL 实例的不同。OceanBase 可以很好的将集群的多台机器都提供服务，这就是多活能力。<br>多实例和多话能力结合使用，将不同实例的压力在集群机器之间可以实现一定程度的错开。<br>在 OceanBase 里做读写分离也是很方便的。在三副本之外增加一个只读副本，就可以专门用于只读查询业务。OceanBase 保证只读副本的数据只会有延时，绝不会有错误。</p>
<h3 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h3><p>OceanBase 分布式最核心能力之一就是分区表，这个概念跟 ORACLE 分区表是一样的。分区表详情可以参考《OceanBase 分区表有什么不同》。</p>
<p>分区表的用法就是选一个字段当作分区字段，按照某种策略（LIST\HASH\RANGE\二级分组组合）拆分表数据为多个分区。当业务表非常多的时候，比较麻烦的也是这个分区字段的选择。</p>
<p>精力有限的情况下，建议是抓住关键的表，有这么些策略选择表：</p>
<ul>
<li>业务主要流程的相关表。如订单业务，那就是订单表、订单历史表、会员表。 支付业务就是支付订单表、支付历史表等等。每个表如果有通过业务外键关联的表都算上。</li>
<li>业务数据量在 1 亿以上的大表。或者业务访问量（QPS）非常高的表。</li>
<li>核心业务查询很慢的 SQL 对应的表。</li>
</ul>
<h4 id="分区字段选择"><a href="#分区字段选择" class="headerlink" title="分区字段选择"></a>分区字段选择</h4><p>对于核心业务相关表，当表之间都遵循 3NF 设计的时候，有两种做法。<br>一种做法就是加入冗余列（比如说会员id）。因为所有表数据都是围绕会员的，所有表都根据会员 ID 做 HASH 分区。这些相关的表就可以放到一个表分组中。这是最优的设计。<br>不过由于表很多的时候，老业务用户可能不想改动。那就退而求其次，选第二个方案。每个表独立的选择分区字段。对于主表，如果有自增 ID 做主键，简单一点就使用自增 iD 作为分区键。OceanBase目前版本（3.1以及以前）还不支持自增ID 作为分区键，就需要换一个业务字段。OceanBase 预计在 3.2 某个版本支持以自增 ID 作为分区键主键。更好的建议是用业务字段。因为业务查询带上业务字段的概率更高。<br>这样不同表的分区字段不一样，关联查询的时候可能会出现 1:N 或者 M:N 这样的查询模型，这个在 OceanBase里很可能是跨机的请求，但是这种查询可以发挥多机并行能力，所以性能也比较好。</p>
<h4 id="本地索引和全局索引"><a href="#本地索引和全局索引" class="headerlink" title="本地索引和全局索引"></a>本地索引和全局索引</h4><p>当分区表分区字段定了后，总会有很多查询是不带分区键的，建议优先用本地分区索引。有些人了解 OceanBase 分区表原理后，可能会觉得本地索引很慢，用全局索引会更好。实际上，用本地索引时，会扫描所有分区的本地索引，OceanBase可以在分区间并行，这个扫描也不会特别慢。当索引返回的数据量很少的时候，这个性能是很好的。<br>全局索引对少量数据查询场景是非常有好的。但是如果索引过滤数据不高返回很多数据的时候，全局索引的性能可能会比本地索引性能还要差。因为全局索引是独立的分区，本地索引跟数据是在一个分区上的。查询时使用全局分区索引，在索引回表的时候很有可能是分布式查询，回表数据量很大的时候，这个性能会有所下降。当然，技术上OceanBase SQL引擎也是有一些优化去缓解这个影响。<br>此外，正如索引会降低数据修改（DML）的性能，全局索引对数据修改（DML）的影响会更明显一些。因为这个修改很可能就是一个跨机的分布式事务。这也是一个考虑因素。</p>
<p>索引是为最重要的查询场景服务的，其代价就是写入的性能，全局索引更是如此。如果一定要用，要控制数量，要控制使用场景一定是非常重要且必要的场景。要避免滥用索引包括全局索引。这就是业务开发建索引不靠谱的地方。重要表的索引的创建应该由专业的DBA来审核或者创建。</p>
<h3 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h3><p>跟索引的使用思想一样，复制表是另外一个需要权衡考虑的方案。</p>
<p>复制表主要解决一些表业务上决定了不能拆分（分区）或者没有必要拆分，但它又频繁的跟分区表有关联关系。为了减少不必要的跨机分布式查询，复制表将自己的数据强同步到实例的所有机器上，所以不管分区表的分区的主副本在哪个机器上，它都可以在 同机跟复制表的副本做表连接。<br>OceanBase 里普通的表多是三副本，但是在一个 2-2-2 的租户（实例）里，复制表的副本可以是六副本，并且还是全同步，六个副本事务日志同时落盘事务才提交。所以复制表的写性能会比 Paxos协议强同步策略要慢一些，适合写入TPS 不高的业务表（如配置表、参数表）。这就是复制表的代价。</p>
<p>以上是复制表常用用法。</p>
<p>还有更极端一点的用法，为了避免两个分区表的跨节点的M:N 的连接，也可以将其中一个分区表做成复制表。这样做的可能原因只会是因为收益大于成本。这需要先测试验证一下。</p>
<p>普通表到复制表的转换可以在线做，也很方便，就是改变表的一个属性。运维也是相当简单。扩充副本（3副本到6副本）的时候会需要一些数据迁移时间。</p>
]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>从ORACLE/MySQL到OceanBase：参数或变量</title>
    <url>/posts/3c53125f/</url>
    <content><![CDATA[<p>近期打算写一个【从ORACLE/MySQL到OceanBase】序列。本文是第三篇。前期直播回放请到：<code>https://cs.enmotech.com/course/play/17</code> 。</p>
<span id="more"></span>

<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>OceanBase和ORACLE一样， 定位都是通用的关系型数据库。然而客户业务场景、环境总是千奇百怪。所以数据库需要支持各种参数以满足不同客户需求。</p>
<p>OceanBase里的参数就影响范围分集群级别和租户级别两类。<br>OB集群参数的做法参照ORACLE的参数做法(即<code>parameters</code>) 。OB的租户别名是实例，跟实际机器是解耦的，租户的参数参照MySQL实例的做法又叫变量(<code>variables</code>)。光研究OceanBase的参数和变量就可以感受到这是一个功能强大又非常有趣的数据库。</p>
<p>下面就一一介绍影响OB使用的参数和变量。</p>
<h2 id="集群参数"><a href="#集群参数" class="headerlink" title="集群参数"></a>集群参数</h2><h3 id="查看和修改参数"><a href="#查看和修改参数" class="headerlink" title="查看和修改参数"></a>查看和修改参数</h3><p>首先查看集群参数是需要登录到sys租户里。用户名：<code>root@sys#集群名</code></p>
<ul>
<li>查看参数语法如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> parameters;</span><br><span class="line"><span class="keyword">show</span> parameters <span class="keyword">like</span> <span class="string">&#x27;%limit%&#x27;</span>;</span><br><span class="line"><span class="keyword">show</span> parameters</span><br><span class="line"><span class="keyword">where</span> name <span class="keyword">in</span> (<span class="string">&#x27;clog_disk_usage_limit_percentage&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;data_disk_usage_limit_percentage&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;resource_hard_limit&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;resource_soft_limit&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;memstore_limit_percentage&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;memory_limit_percentage&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;sql_audit_memory_limit&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;memory_limit&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;major_freeze_duty_time&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;minor_freeze_times&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;freeze_trigger_percentage&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;enable_sql_audit&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;sql_audit_queue_size&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;sql_audit_memory_limit&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;enable_rebalance&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="/images/15620561131970.jpg" alt="-w1400"></p>
<p>从上面可以看出几个特点：参数有名称、默认值和描述，以及生效方法(是否需要重启)、生效节点(<code>IP</code>和<code>Port</code>)、参数归属模块，是否可见等。每个参数在每个节点上都有一份，其值默认一样可以不一样(当然实际不推荐这样)。</p>
<p>这里列举的参数都是OceanBase集群使用过程中会涉及到的，非常重要。后面会逐一解释。</p>
<ul>
<li>修改参数语法</li>
</ul>
<p>目前修改参数支持集群所有节点同时修改或者只改某几个节点。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> param_name <span class="operator">=</span> expr </span><br><span class="line">     [COMMENT <span class="string">&#x27;text&#x27;</span>] </span><br><span class="line">     [<span class="keyword">SCOPE</span> <span class="operator">=</span> conf_scope] </span><br><span class="line">     [TENANT <span class="operator">=</span> ‘tenantname’];</span><br><span class="line">     </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> minor_freeze_times<span class="operator">=</span><span class="number">100</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> freeze_trigger_percentage<span class="operator">=</span><span class="number">75</span> server<span class="operator">=</span><span class="string">&#x27;11.***.84.132:2882&#x27;</span>;     </span><br></pre></td></tr></table></figure>

<p><img src="/images/15620560372217.jpg" alt="-w1361"></p>
<h3 id="参数文件"><a href="#参数文件" class="headerlink" title="参数文件"></a>参数文件</h3><p>跟ORACLE不一样的是，OceanBae集群参数修改后都会立即持久化到本地参数文件里。这个参数文件对集群启动非常重要，所以OceanBase提供多重路径保存这个参数。类似于ORACLE保存数据库控制文件一样。而这个多重路径也是参数<code>config_additional_dir</code> 指定的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> parameters <span class="keyword">like</span> <span class="string">&#x27;%config_additional_dir%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/images/15620559769288.jpg" alt="-w1399"></p>
<p>参数文件名叫:<code>observer.config.bin</code>,文件类型是二进制格式，不能直接编辑或用查看，需要用 <code>strings</code>命令查看。这点跟ORACLE的<code>pfile</code>不一样。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file</span> observer.config.bin</span><br><span class="line">observer.config.bin: data</span><br><span class="line"><span class="variable">$strings</span> observer.config.bin|egrep <span class="string">&quot;minor_freeze_times|freeze_trigger_percentage&quot;</span></span><br><span class="line">minor_freeze_times=100</span><br><span class="line">freeze_trigger_percentage=75</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所以，修改每个节点的参数文件的方法通常是在集群里用命令修改。每次修改后，参数文件都会保留上一个版本在文件<code>observer.config.bin.history</code>里，以避免参数修改错误导致集群启动失败。<br>思维严谨的人很快就会发现如果这个节点的<code>OBServer</code>进程不存在，那么通过集群修改参数就会失败。所以这点也要留意。<br>此外，细心的人可能还会有个问题，参数文件是保存在多个目录的，但是参数目录又要先指定参数。如果是在集群里指定，得先<code>OBServer</code>进程启动，而进程既然启动了说明又先有参数文件了。而这个参数文件不能编辑，最初是不存在的。这里有个“先有鸡还是先有蛋”的问题。</p>
<p>所以上面列举的大部分参数是可以在<code>OBServer</code>启动时指定。如果没有指定就用默认值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/admin/node1/oceanbase &amp;&amp; /home/admin/node1/oceanbase/bin/observer -i eth0 -P 2882 -p 2881 -z zone1 -d /home/admin/node1/oceanbase/store/obdemo -r <span class="string">&#x27;192.168.1.241:2882:2881;192.168.1.81:2882:2881;192.168.1.86:2882:2881&#x27;</span> -c 20190423 -n obdemo -o <span class="string">&quot;cpu_count=24,memory_limit=100G,datafile_size=200G,config_additional_dir=/data/data/1/obdemo/etc3;/data/log/log1/obdemo/etc2&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中 <code>-o</code> 就是用于覆盖OB集群参数的默认值。一旦<code>OBServer</code>进程启动成功后，三个参数文件就生成了。</p>
<h3 id="进程启动参数解释"><a href="#进程启动参数解释" class="headerlink" title="进程启动参数解释"></a>进程启动参数解释</h3><p>上面进程启动参数有多个，多跟资源有关。这里一一解释一下，应该能解答对前文《OceanBase数据库实践入门——手动搭建OceanBase集群》里的一些疑惑。</p>
<ul>
<li><code>config_additional_dir</code>：参数冗余目录。已经解释过。</li>
<li><code>cpu_count</code>：指定<code>OS</code>的逻辑<code>CPU</code>个数。通常不指定的时候，<code>OBServer</code>也可以自己获取，跟<code>lscpu</code>里结果一致。但是当需要单机启动多个<code>OBServer</code>进程的时候，可能就需要平分一下物理机的<code>CPU</code>。另外一个用途就是反过来的，当物理机或者虚拟机<code>CPU</code>很少时，故意调大这个参数可以欺骗<code>OBServer</code>进程，以让它能启动(否则<code>CPU</code>少于6个，<code>OBServer</code>可能会启动失败)。</li>
<li><code>memory_limit</code>:指定<code>OS</code>的内存大小。同样不指定的时候，会默认取<code>OS</code>总内存的一定比例。这个比例是另外一个参数<code>memory_limit_percentage</code>控制，默认值是<code>80%</code>。当单机启动多个进程时，需要通过参数<code>memory_limit</code>平分主机内存。由于进程启动时对内存是独占式的，且会理解分配一定大小的内存，所以这个参数不能欺骗<code>OB</code>，否则运行过程中<code>OBServer</code>会报内存不足而不稳定或者根本就无法启动。</li>
<li><code>datafile_size</code>：指定<code>OBServer</code>启动后数据目录的空间大小。不指定的时候，会默认取数据目录空间的一定比例。这个比例是另外一个参数<code>data_disk_usage_limit_percentage</code>指定，默认值是<code>90%</code>。同样，<code>OBServer</code>启动后，会立即初始化一个数据文件(<code>sstable</code>)，大小就是<code>datafile_size</code>。所以，这个参数也不能欺骗<code>OB</code>，否则会启动失败。当单机启动多个<code>OBServer</code>进程时，会需要取设定这个参数值，以平分存储空间。</li>
<li><code>clog_disk_usage_limit_percentage</code>：指定<code>OBServer</code>的<code>clog</code>可用空间占目录比例。通常目录空间使用率<code>100%</code>就是空间满，<code>OBServer</code>为避免写事务日志因为磁盘空间满而出问题，将这一比例降到<code>clog_disk_usage_limit_percentage</code>指定的值。默认值是<code>95%</code>。这样当到达<code>95%</code>时<code>OBServer</code>因为写不进<code>clog</code>就出现集群异常，这个时候如果不能清理目录释放空间的话，还可以临时重启<code>OBServer</code>进程指定这个参数更大一些来临时修复问题，此后还是需要尽快对磁盘扩容。</li>
</ul>
<p>在启动参数里有个<code>-r</code>参数比较特别，它是指定<code>rootservice_list</code>地址的。实际上这个地址也是集群的一个参数。在集群初始化成功后保存到参数文件中。(有关<code>rootservice</code>可以参考文章《OceanBase数据库实践入门——了解总控服务》。)</p>
<p>不过这样还不是很方便。对于集群初始化时的三个节点，指定这个<code>rootservice_list</code>是有必要的。但对于后续新增的节点，如果每个节点都要取指定这个参数值就不方便，因为这个参数的值还有可能会动态的变化，如果要求运维人员记住这个参数变化后的值这是一个负担。所以<code>OBServer</code>在<code>rootservice_list</code>参数变化后将值保存到远端的一个数据库里。不过不是直接写入到那个数据库，而是远端提供了一个<code>API</code>用于响应读取和写入这个参数值。这个<code>API</code>又是通过参数<code>obconfig_url</code>指定的。</p>
<p>所以启动<code>OBServer</code>进程的时候必须指定<code>rootservice_list</code>，这个地址可以手动指定一堆<code>IP</code>，或者指定<code>obconfig_url</code>地址。二选一。<code>obconfig_url</code>描述的<code>API</code>就是有<code>OCP</code>提供的，那个数据库就是<code>OCP</code>的元数据库。这个设计比较特别，详细原因详细的可以查看《自动化运维产品的命门——元数据库》。</p>
<h3 id="SQL审计参数"><a href="#SQL审计参数" class="headerlink" title="SQL审计参数"></a>SQL审计参数</h3><p>OceanBase在SQL性能诊断方面有个很有用的功能叫SQL审计视图(<code>gv$sql_audit</code>)，可以方便开发运维排查在OceanBase运行过的任意一条SQL，不管这些SQL是成功还是失败，都有详细的运行信息记录。如执行时间、执行节点、执行计划id、会话id、执行时间、等待时间、总时间、排队时间、相关block读取信息、执行报错信息等等。有关详细使用方法请参见《阿里数据库性能诊断的利器——SQL全量日志》。</p>
<p>这个视图的内容都保存在内存里，内存大小由参数<code>sql_audit_memory_limit</code>控制，默认值<code>3G</code>。还有另外一个参数<code>sql_audit_queue_size</code>控制记录数，默认值是<code>1000万</code>。一个繁忙的数据库，SQL记录数或者这个大小很快就会超过这两个阈值。当然如果不想用这个SQL审计功能，还可以关闭它。由参数<code>enable_sql_audit</code>控制，默认值是<code>False</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> parameters <span class="keyword">like</span> <span class="string">&#x27;%audit%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/images/15620559065270.jpg" alt="-w1371"></p>
<h3 id="资源分配参数"><a href="#资源分配参数" class="headerlink" title="资源分配参数"></a>资源分配参数</h3><p>在前文《揭秘OceanBase的弹性伸缩和负载均衡原理》我介绍了OceanBase对资源的管理方法。其中查看集群资源的SQL如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> zone,concat(svr_ip,<span class="string">&#x27;:&#x27;</span>,svr_port) observer, cpu_total,cpu_assigned,cpu_assigned_percent, round(mem_total<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>) mem_total_gb, round(mem_assigned<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>) mem_assigned_gb, mem_assigned_percent, unit_Num,round(`load`,<span class="number">2</span>) `load`, round(cpu_weight,<span class="number">2</span>) cpu_weight, round(memory_weight,<span class="number">2</span>) mem_weight, leader_count</span><br><span class="line"><span class="keyword">from</span> __all_virtual_server_stat</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> zone,svr_ip</span><br><span class="line">;</span><br></pre></td></tr></table></figure>
<p><img src="/images/15620558449298.jpg" alt="-w1349"></p>
<p>这里面CPU是30个，内存<code>mem_total</code>大小是<code>193G</code>是OBServer启动时从主机获取的。OceanBase可以将主机获取的资源乘以一个系数就是总的可分配资源。这个系数是参数<code>resource_hard_limit</code>决定，默认值是100，即百分百。如果把这个参数调整到120，我们可以看到总资源就扩大了。这个只适用于学习环境CPU节点数比较少的时候扩大CPU节点个数，对于内存，资源池分配的时候是按<code>min_memory</code>指定值起步增加，所以可以将<code>min_memory</code>设低一点。在生产环境不要修改这个，否则可能在业务压力上来时遭遇内存不足。</p>
<p>OceanBase在分配资源单元的时候，如果每个<code>Zone</code>有多个节点的时候，它会考虑各个节点的资源利用情况和负载情况，以决策从那个节点里分配资源单元。有个参数<code>resource_soft_limit</code>会影响OB在判断一个节点资源利用率是否合适继续分配资源单元。默认值是50(即百分50).这个值最大不能超过参数<code>resource_hard_limit</code>。这个意思是如果有节点资源利用率低于这个比例，那么就是候选节点之一。只要有候选节点，OB就不会首先挑选其他的资源利用率明显高于这个值的节点。如果集群中小租户比较多，这个参数值可以设置的再低一点。</p>
<p><img src="/images/15620705846159.jpg" alt="-w1401"></p>
<p>目前OceanBase集群初始化成功时，会保留一定比例内存用于内部跟业务租户有关的运算。比如说更新统计信息等。这个内存比例由参数<code>system_memory_percentage</code>控制，同时系统还保留几个CPU用于内部逻辑，这个由参数<code>system_cpu_quota</code>控制。这两个参数值都可能会随着OB版本变化而变化。</p>
<p>OB可以有很多会话，但是内部执行请求的工作线程(<code>worker</code>)数量是固定的，对于每个租户而言，<code>worker</code>的数量是租户的<code>CPU</code>配额乘以参数<code>workers_per_cpu_quota</code>的值。参数默认值是<code>10</code>。我们并不建议去修改这个参数。在这么多的<code>worker</code>里，为了避免小而快的查询被一些慢查询SQL占住<code>worker</code>而出现等待过多的现象，OB对SQL的请求队列分为两类，其中一类是用于慢查询的。慢查的标准是执行时间超过参数<code>large_query_threshold</code>的值时就被放入到慢查队列里。同时用于执行慢查队列请求的<code>worker</code>数量比例由参数<code>large_query_worker_percentage</code>控制。这两个参数都是可以根据实际场景SQL特点调整的。比如说如果偏<code>OLAP</code>类查询比较多，则调大这个比例；如果是纯粹<code>OLTP</code>类SQL，则调小这个比例。</p>
<p><img src="/images/15620724730916.jpg" alt="-w1402"></p>
<h3 id="资源负载均衡相关参数"><a href="#资源负载均衡相关参数" class="headerlink" title="资源负载均衡相关参数"></a>资源负载均衡相关参数</h3><p>OB的负载均衡策略比较复杂，并且可能随着版本演进。这里还介绍不了。不过有些固定的逻辑倒是可以提一下。比如说每个租户资源池在每个<code>Zone</code>都有<code>Unit</code>，如果某个租户在该<code>Zone</code>的<code>Unit</code>的<code>CPU</code>非常忙，而它其他两个<code>Zone</code>的<code>Unit</code>可能非常空闲(可能大部分是<code>follower</code>副本又不提供服务)。那么OB可以将其他两个<code>Zone</code>的<code>Unit</code>的<code>CPU</code>配额匀一部分给到负载最高的<code>Zone</code>的<code>Unit</code>上。注意是同一个租户不同<code>Zone</code>之间在调剂<code>CPU</code>配额。当然调整的粒度也是受参数<code>tenant_cpu_variation_per_server</code>控制的。</p>
<p><img src="/images/15620721146366.jpg" alt="-w1401"></p>
<p>在决定是否要做负载均衡的时候，节点里各个<code>Unit</code>的总空间会是一个很重要的因素。理想状况下各个节点内空间利用率应该是均衡的，但实际上不可能完全一样。那么对于空间是否均衡就有个衡量标准。比如说某个节点的空间高出平均值多少水平才算不均衡，这个标准就是参数<code>balancer_tolerance_percentage</code>控制，默认值是10(即百分之10)。注意，这只是其中一个因素。触发均衡策略后能否做Unit迁移也看<code>Unit</code>实际大小和其他节点的剩余空间。</p>
<p><img src="/images/15621162547184.jpg" alt="-w1404"></p>
<p>当OB判断要做负载均衡时，就会发起以<code>Partition</code>为单位的副本迁移。OB做副本迁移的时候是现在目标位置生成一个新的<code>Follower</code>副本，该<code>Follower</code>副本会先从已有的一个<code>Follower</code>副本拉取数据和后续的<code>Redo</code>。这其中就不可避免的有跨节点请求。OB有一序列参数可以控制这个分区跨节点传输的效率。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> parameters <span class="keyword">where</span> name <span class="keyword">in</span> (<span class="string">&#x27;data_copy_concurrency&#x27;</span>, <span class="string">&#x27;server_data_copy_out_concurrency&#x27;</span>,<span class="string">&#x27;server_data_copy_in_concurrency&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/images/15620730136730.jpg" alt="-w1401"></p>
<p>OB的负载均衡是目前所有分布式数据库里做得最好的，既让应用免于迁移数据，又提供策略供应用干预。不过俗话说没有最好，只有更好。OB的负载均衡策略还有很大提升空间。这点跟当今流行的自动驾驶技术一样。你可以在特定的路况下将控制权交给它，然后在特殊的情形下又回收控制权。在OB里可以通过参数<code>enable_rebalance</code>开启和关闭负载均衡机制。</p>
<h3 id="内存的冻结、转储和合并参数"><a href="#内存的冻结、转储和合并参数" class="headerlink" title="内存的冻结、转储和合并参数"></a>内存的冻结、转储和合并参数</h3><p>OB的内存其中一大用途就是报错增量数据，简称为增量内存。这部份增量内存就如同一个水池。业务读写就如同进水管，内存已使用比例会逐步上升。按照这个趋势最终会全部用尽。所以OB还有冻结机制。当已使用内存占增量内存的比例超过参数<code>freeze_trigger_percentage</code>时，就会冻结当前内存中的<code>memtable</code>，然后迅速生成新的<code>memtable</code>用于继续读写。随后对于已经冻结的<code>memtable</code>就开始以<code>SSTable</code>格式转储到磁盘上，释放增量内存。这如同一个放水管。由于OB的写性能非常好，当对OB进行业务压测的时候，如果写入对内存的消耗速度高于转储对内存的释放速度时，增量内存还是会很快耗尽(时间取决于增量内存的大小，默认是租户内存的<code>50%</code>)。加上可转储的次数是有限的(由参数<code>minor_freeze_times</code>控制)，所以理论上总是有可能耗尽增量内存的。所以租户的内存大小要考虑业务写入的压力。<br><img src="/images/15620738184039.jpg" alt="-w396"></p>
<p>不过，即使初期租户内存评估不到位，后期也可以扩容的。OB的扩容和缩容都是在线进行的，非常方便。除了转储可以释放内存外，OB每天还有固定的一次大合并(<code>merge</code>)，这个时候会把增量内存中<code>memtable</code>和基线内存中的<code>sstable</code>直接合并然后以<code>sstable</code>格式写到数据文件里。这个大合并的时间是由参数<code>major_freeze_duty_time</code>设定的，通常设定在业务低峰期。如凌晨。</p>
<p>下面是这些参数的值和介绍。</p>
<p><img src="/images/15620738970922.jpg" alt="-w1404"></p>
<p>集群的参数还有很多，还包括一些以<code>__</code>开头的隐含参数。这里就先介绍到这里。以后在介绍具体功能的时候再继续介绍参数。接下来看看租户变量。</p>
<h2 id="租户变量"><a href="#租户变量" class="headerlink" title="租户变量"></a>租户变量</h2><p>租户变量(<code>variable</code>)的设计主要是参考<code>MySQL</code>的。所以目前介绍的主要是<code>MySQL</code>租户的。其中有些变量特性在<code>ORACLE</code>租户里也有。<br>租户可能需要调整的变量比较少。</p>
<h3 id="变量查看方法"><a href="#变量查看方法" class="headerlink" title="变量查看方法"></a>变量查看方法</h3><p>这个跟MySQL的变量查看和修改方法 是一致的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;%timeout%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">where</span> variable_name <span class="keyword">in</span> (<span class="string">&#x27;ob_query_timeout&#x27;</span>,<span class="string">&#x27;ob_trx_timeout&#x27;</span>,<span class="string">&#x27;ob_trx_idle_timeout&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="租户超时变量设置"><a href="#租户超时变量设置" class="headerlink" title="租户超时变量设置"></a>租户超时变量设置</h3><p>上篇文章《从ORACLE/MySQL到OceanBase：数据库超时机制》介绍了租户跟超时有关的一些参数。其中变量 <code>ob_trx_idle_timeout</code>是 2.x某个版本新增的。</p>
<p><img src="/images/15620769654042.jpg" alt="-w867"></p>
<h3 id="租户白名单变量设置"><a href="#租户白名单变量设置" class="headerlink" title="租户白名单变量设置"></a>租户白名单变量设置</h3><p>租户变量<code>ob_tcp_invited_nodes</code>可以针对访问来源设置白名单。白名单格式可以是<code>&#39;%&#39;</code>，表示允许所有的来源。也可以是一个或多个具体的<code>IP</code>或者子网。如：<code>10.168.0.0/16</code>等。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> ob_tcp_invited_nodes<span class="operator">=</span><span class="string">&#x27;127.1,10.168.0.0/16&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="事务相关变量设置"><a href="#事务相关变量设置" class="headerlink" title="事务相关变量设置"></a>事务相关变量设置</h3><p>租户变量<code>autocommit</code>可以控制会话默认是否开启事务，默认值为<code>on</code>。通常应用端也会在<code>jdbc</code>里明确设置。不要依赖数据库默认值。以防数据库默认值被修改。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>OB新增了很多变量用于影响执行计划。目前对这些变量细节我还不了解，暂时留到以后介绍。</p>
<p><img src="/images/15620776079705.jpg" alt="-w598"></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>此外由于OceanBase版本的演进，还会有更多参数开放，也可能有些参数逐步弃用。不管是架构原理，还是参数，还是运维实践，OceanBase都是一个有深度的数据库。</p>
]]></content>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
</search>
